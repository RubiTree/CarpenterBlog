<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[RubiTree's Blog]]></title>
  <link href="http://blog.rubitree.com/atom.xml" rel="self"/>
  <link href="http://blog.rubitree.com/"/>
  <updated>2019-01-10T02:18:16+08:00</updated>
  <id>http://blog.rubitree.com/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.coderforart.com/">CoderForArt</generator>

  
  <entry>
    <title type="html"><![CDATA[【透镜系列】看穿 > NestedScrolling 机制]]></title>
    <link href="http://blog.rubitree.com/15467469615604.html"/>
    <updated>2019-01-06T11:56:01+08:00</updated>
    <id>http://blog.rubitree.com/15467469615604.html</id>
    <content type="html"><![CDATA[
<p><img src="media/15467469615604/15468896445806.jpg" alt=""/></p>

<span id="more"></span><!-- more -->

<hr/>

<p></br><br/>
目录：</p>

<ul>
<li>
<a href="#toc_0">1. 嵌套同向滑动</a>
<ul>
<li>
<a href="#toc_1">1.1. 嵌套同向滑动的问题</a>
</li>
<li>
<a href="#toc_2">1.2. 分析问题原因</a>
</li>
<li>
<a href="#toc_3">1.3. 尝试解决问题</a>
</li>
<li>
<a href="#toc_4">1.4. 第一次优化</a>
</li>
<li>
<a href="#toc_5">1.5. 第二次优化</a>
</li>
<li>
<a href="#toc_6">1.6. 小结</a>
</li>
</ul>
</li>
<li>
<a href="#toc_7">2. NestedScrolling 机制</a>
<ul>
<li>
<a href="#toc_8">2.1. 原理</a>
</li>
<li>
<a href="#toc_9">2.2. 使用</a>
</li>
</ul>
</li>
<li>
<a href="#toc_10">3. 历史的消防车滚滚向前</a>
<ul>
<li>
<a href="#toc_11">3.1. 第一个版本，2014年9月</a>
</li>
<li>
<a href="#toc_12">3.2. 重构第一个版本，2015年4月</a>
<ul>
<li>
<a href="#toc_13">3.2.1. 第一个版本的Bug</a>
</li>
</ul>
</li>
<li>
<a href="#toc_14">3.3. 第二个版本，2017年9月</a>
<ul>
<li>
<a href="#toc_15">3.3.1. 第二个版本的Bug</a>
</li>
</ul>
</li>
<li>
<a href="#toc_16">3.4. 第三个版本，2018年11月</a>
<ul>
<li>
<a href="#toc_17">3.4.1. 第三个版本的Bug</a>
</li>
</ul>
</li>
<li>
<a href="#toc_18">3.5. 小结</a>
</li>
</ul>
</li>
<li>
<a href="#toc_19">4.总结</a>
</li>
</ul>


<hr/>

<p></br></p>

<p>NestedScrolling 机制翻译过来叫嵌套滑动机制（下文可能混用），它提供了一种优雅解决嵌套滑动问题的方案，具体是什么方案呢？我们从嵌套的同向滑动说起。</p>

<h2 id="toc_0">1. 嵌套同向滑动</h2>

<h3 id="toc_1">1.1. 嵌套同向滑动的问题</h3>

<p>所谓嵌套同向滑动，就是指这样一种情况：两个可滑动的View内外嵌套，而且它们的滑动方向是相同的。<br/>
<img src="media/15467469615604/15468896135503.jpg" alt="" style="width:350px;"/></p>

<p>这种情况如果使用一般的处理方式，会出现交互问题，比如使用两个<code>ScrollView</code>进行布局，你会发现，触摸着内部的<code>ScrollView</code>进行滑动，它是滑不动的<em>（不考虑后来 Google 给它加的<code>NestedScroll</code>开关）</em>：<br/>
<img src="media/15467469615604/2019-01-03_21-05-19%20-1-.gif" alt="" style="width:200px;"/></p>

<h3 id="toc_2">1.2. 分析问题原因</h3>

<p>（温馨提示：本文涉及事件分发的内容比较多，建议对事件分发不太熟悉的同学先阅读另一篇透镜<a href="http://blog.rubitree.com/15456255866253.html">《看穿 &gt; 触摸事件分发》</a>的理论部分）</p>

<p>如果你熟悉 Android 的触摸事件分发机制，那么原因很好理解：两个<code>ScrollView</code>嵌套时，滑动距离终于达到滑动手势判定阈值（<code>mTouchSlop</code>）的这个<code>MOVE</code>事件，会先经过父 View 的<code>onInterceptTouchEvent()</code>方法，父 View 于是直接把事件拦截，子 View 的<code>onTouchEvent()</code>方法里虽然也会在判定滑动距离足够后调用<code>requestDisallowInterceptTouchEvent(true)</code>，但始终要晚一步。</p>

<p>而这个效果显然是不符合用户直觉的<br/>
那用户希望看到什么效果呢？</p>

<ol>
<li>大部分时候，用户希望看到：当手指触摸内部<code>ScrollView</code>进行滑动时，能先滑动内部的<code>ScrollView</code>，只有当内部的<code>ScrollView</code>滑动到尽头时，才滑动外部的<code>ScrollView</code></li>
</ol>

<p>这看上去非常自然，也跟触摸事件的处理方式一致，但相比触摸事件的处理，要在滑动时实现同样的效果却会困难很多</p>

<ol>
<li>因为滑动动作不能立刻识别出来，它的处理本身就需要通过事件拦截机制进行，而事件拦截机制实质上跟<a href="http://blog.rubitree.com/15456255866253.html">《看穿 &gt; 触摸事件分发》</a>中第一次试造的轮子一样，只是单向的，而且方向从外到内，所以无法做到：先让内部拦截滑动，内部不拦截滑动时，再在让外部拦截滑动</li>
</ol>

<p>那能不能把事件拦截机制变成双向的呢？不是不行，但这显然违背了拦截机制的初衷，而且它很快会发展成无限递归的：双向的事件拦截机制本身是否也需要一个拦截机制呢？于是有了拦截的拦截，然后再有拦截的拦截的拦截...<br/>
<img src="media/15467469615604/15467627036503.jpg" alt="" style="width:150px;"/></p>

<h3 id="toc_3">1.3. 尝试解决问题</h3>

<p>换一个更直接的思路，如果我们的需求始终是内部滑动优先，那是否可以让外部 View「拦截滑动的判定条件」比内部 View「申请外部不拦截的判定条件」更严格，从而让滑动距离每次都先达到「申请外部不拦截的判定条件」，子 View 就能够在父 View 拦截事件前申请外部不拦截了。<br/>
能看到在<code>ScrollView</code>中，「拦截滑动的判定条件」和「申请外部不拦截的判定条件」都是<code>Math.abs(deltaY) &gt; mTouchSlop</code>，我们只需要增大「拦截滑动的判定条件」时的<code>mTouchSlop</code>就行了。</p>

<p>但实际上这样做并不好，因为<code>mTouchSlop</code>到底应该增加多少，是件不确定的事情，手指滑动的快慢和屏幕的分辨率可能都会对它有影响。<br/>
所以可以换一种实现，那就是让第一次「拦截滑动的判定条件」成立时，先不进行拦截，如果内部没有申请外部不拦截，第二次条件成立时，再进行拦截，这样也同样实现了开始的思路。<br/>
于是继承 <code>ScrollView</code>，覆写它的<code>onInterceptTouchEvent()</code>：</p>

<pre><code class="language-kotlin">class SimpleNestedScrollView(context: Context, attrs: AttributeSet) : ScrollView(context, attrs) {
    private var isFirstIntercept = true
    
    override fun onInterceptTouchEvent(ev: MotionEvent): Boolean {
        if (ev.actionMasked == MotionEvent.ACTION_DOWN) {
            isFirstIntercept = true
        }

        val result = super.onInterceptTouchEvent(ev)

        if (result &amp;&amp; isFirstIntercept) {
            isFirstIntercept = false
            return false
        }

        return result
    }
}    
</code></pre>

<p>它的效果是这样，能看到确实实现了让内部先获取事件：<br/>
<img src="media/15467469615604/2019-01-03_21-09-34%20-1-.gif" alt="" style="width:200px;"/></p>

<h3 id="toc_4">1.4. 第一次优化</h3>

<p>但我们希望体验能更好一点，内部应该在自己无法滑动的时候，不触发「申请外部不拦截的判定条件」，就能让内外都有机会滑动。<br/>
这个要求非常通用而且合理，在<code>SimpleNestedScrollView</code>基础上进行简单修改，加入以下代码：</p>

<pre><code class="language-kotlin">private var isNeedRequestDisallowIntercept: Boolean? = null

override fun onTouchEvent(ev: MotionEvent): Boolean {
    if (ev.actionMasked == MotionEvent.ACTION_DOWN) isNeedRequestDisallowIntercept = null
    if (ev.actionMasked == MotionEvent.ACTION_MOVE) {
        if (isNeedRequestDisallowIntercept == false) return false

        if (isNeedRequestDisallowIntercept == null) {
            val offsetY = ev.y.toInt() - getInt(&quot;mLastMotionY&quot;)
            if (Math.abs(offsetY) &gt; getInt(&quot;mTouchSlop&quot;)) { // 滑动距离足够判断方向时
                // 判断自己是否能在对应滑动方向上进行滑动
                if ((offsetY &gt; 0 &amp;&amp; isScrollToTop()) || (offsetY &lt; 0 &amp;&amp; isScrollToBottom())) {
                    isNeedRequestDisallowIntercept = false
                    return false
                }
            }
        }
    }

    return super.onTouchEvent(ev)
}

private fun isScrollToTop() = scrollY == 0

private fun isScrollToBottom(): Boolean {
    return scrollY + height - paddingTop - paddingBottom == getChildAt(0).height
}
</code></pre>

<ol>
<li>其中<code>getInt(&quot;mLastMotionY&quot;)</code>和<code>getInt(&quot;mTouchSlop&quot;)</code>为反射代码，获取私有的<code>mLastMotionY</code>和<code>mTouchSlop</code>属性</li>
<li>这段代码省略了多点触控情况的判断</li>
</ol>

<p>运行效果如下：<br/>
<img src="media/15467469615604/2019-01-03_21-30-03%20-1-.gif" alt="" style="width:200px;"/></p>

<p>这样就完成了对嵌套滑动View最基本的需求：大家都能滑了。</p>

<p>后来我发现了一种更野的路子，不用小心翼翼地让改动尽量小，既然内部优先，完全可以让内部的<code>ScrollView</code>在<code>DOWN</code>事件的时候就申请外部不拦截，然后在滑动一段距离后，如果判断自己在该滑动方向无法滑动，再取消对外部的拦截限制，思路是类似的但代码更简单。</p>

<pre><code class="language-kotlin">class SimpleNestedScrollView(context: Context, attrs: AttributeSet) : ScrollView(context, attrs) {
    override fun dispatchTouchEvent(ev: MotionEvent): Boolean {
        if (ev.actionMasked == MotionEvent.ACTION_DOWN) parent.requestDisallowInterceptTouchEvent(true)
        if (ev.actionMasked == MotionEvent.ACTION_MOVE) {
            val offsetY = ev.y.toInt() - getInt(&quot;mLastMotionY&quot;)

            if (Math.abs(offsetY) &gt; getInt(&quot;mTouchSlop&quot;)) {
                if ((offsetY &gt; 0 &amp;&amp; isScrollToTop()) || (offsetY &lt; 0 &amp;&amp; isScrollToBottom())) {
                    parent.requestDisallowInterceptTouchEvent(false)
                }
            }
        }
        return super.dispatchTouchEvent(ev)
    }
}
</code></pre>

<p>运行的效果跟上面是一样的，不重复贴图了。</p>

<h3 id="toc_5">1.5. 第二次优化</h3>

<p>但这两种方式目前为止都没有实现最好的交互体验，最好的交互体验应该让内部不能滑动时，能接着滑动外部，甚至在你滑动过程中快速抬起时，接下来的惯性滑动也能在两个滑动View间传递。</p>

<p>由于滑动这个交互的特殊性，我们可以在外部对它进行操作，所以连续滑动的实现非常简单，只要重写<code>scrollBy</code>就好了，所以在已有代码的基础上再加上下面的代码（上面的两种思路都是加一样的代码）：</p>

<pre><code class="language-kotlin">override fun scrollBy(x: Int, y: Int) {
    if ((y &gt; 0 &amp;&amp; isScrollToTop()) || (y &lt; 0 &amp;&amp; isScrollToBottom())) {
        (parent as View).scrollBy(x, y)
    } else {
        super.scrollBy(x, y)
    }
}
</code></pre>

<p>效果如下：<br/>
<img src="media/15467469615604/2019-01-03_22-54-04%20-1-.gif" alt="" style="width:200px;"/></p>

<p>而惯性滑动的实现就会相对复杂一点，得对<code>computeScroll()</code>方法下手，要做的修改会多一些，这里暂时不去实现了，但做肯定是没问题的。</p>

<h3 id="toc_6">1.6. 小结</h3>

<p>到这里我们对嵌套滑动交互的理解基本已经非常通透了，知道了让我们自己实现也就那么回事，主要需要解决下面几个问题：</p>

<ol>
<li>在内部 View 可以滑动的时候，阻止外部 View 拦截滑动事件，先滑动内部V iew</li>
<li>在用户一次滑动操作中，当内部 View 滑动到终点时，切换滑动对象为外部 View，让用户能够连续滑动</li>
<li>在用户快速抬起触发的惯性滑动中，当内部 View 滑动到终点时，切换滑动对象为外部 View，让惯性能够连续</li>
</ol>

<p>这时就可以<del>（终于可以了）</del>来看看看系统提供的 NestedScrolling 机制是怎么完成嵌套滑动需求的，跟我们的实现相比，有什么区别，是更好还是更好？</p>

<h2 id="toc_7">2. NestedScrolling 机制</h2>

<h3 id="toc_8">2.1. 原理</h3>

<p>与我们不同，我们只考虑了给<code>ScrollView</code>增加支持嵌套滑动的特性，但系统开发者需要考虑给所有有滑动交互的 View 增加这个特性，所以一个直接的思路是在 View 里加入这个机制</p>

<p>那么要怎么加，加哪些东西呢？</p>

<ol>
<li>进一步梳理前面要解决的问题，在嵌套滑动中，是能明确区分两类作用对象的：一个是内部 View，一个是外部 View。而且它们的主被动关系也非常明确：因为内部 View 离手指更近，我们肯定希望它能优先消费事件，但我们同时还希望在某些情况下事件能在内部不消耗的时候给外部消耗，这当然也是让内部来控制，所以<span id="ns_roles"><strong>内部是主动，外部是被动</strong></span><em>（<a href="#bug2_2">回到空气马达</a>）</em></li>
<li>由此整个嵌套滑动的过程可以认为是这样的：触摸事件交给内部 View 进行消费，内部 View 执行相关逻辑，在合适的时候对外部 View 进行一定的控制，两者配合实现嵌套滑动</li>
<li>这就包括了两部分逻辑：

<ol>
<li>内部 View 中的主动逻辑：需要主动阻止外部 View 拦截事件，需要自己进行滑动，并在合适的时候让外部 View 配合进行剩下的滑动

<ol>
<li>这部分是核心内容，前面我们自己实现的也是这部分内容</li>
</ol></li>
<li>外部 View 中的被动逻辑

<ol>
<li>基本就是配合行动了，这部分逻辑不多</li>
</ol></li>
</ol></li>
<li>由于<code>View</code>里是不能放其他<code>View</code>的，它只能是内部的、主动的角色，而<code>ViewGroup</code>既可以放在另一<code>ViewGroup</code>里，它里边也可以放其他的<code>View</code>，所以它可以是内部的也可以是外部的角色</li>
<li>这正好符合<code>View</code>和<code>ViewGroup</code>的继承关系，所以一个很自然的设计是：在<code>View</code>中加入主动逻辑，在<code>ViewGroup</code>中加入被动逻辑</li>
</ol>

<p>因为不是每个<code>View</code>和<code>ViewGroup</code>都能够滑动，滑动只是众多交互中的一种，<code>View</code>和<code>ViewGroup</code>不可能直接把所有事情都做了然后告诉你：Android 支持嵌套滑动了哦~ 所以 Google 加入的这些逻辑其实都是帮助方法，相关的<code>View</code>需要选择在合适的时候进行调用，最后才能实现嵌套滑动的效果。</p>

<p>先不说加了哪些方法，先说 Google 希望能帮助你实现一个什么样的嵌套滑动效果：</p>

<ol>
<li>从逻辑上区分嵌套滑动中的两个角色：<code>ns child</code>和<code>ns parent</code>，对应了上面的内部 View 和外部 View

<ol>
<li><em>注：1）这里我用「ns」表示<code>nested scroll</code>的缩写；2）什么叫逻辑上？因为它允许你一个View同时扮演两个角色</em></li>
</ol></li>
<li><code>ns child</code>会在收到<code>DOWN</code>事件时，找到自己祖上中最近的能与自己匹配的<code>ns parent</code>，与它进行绑定并关闭它的事件拦截机制</li>
<li>然后<code>ns child</code>会在接下来的<code>MOVE</code>事件中判定出用户触发了滑动手势，并把事件流拦截下来</li>
<li>拦截了事件流之后，对于每一次<code>MOVE</code>事件增加的滑动距离：

<ol>
<li><code>ns child</code>并不是直接自己消费，而是先把它交给<code>ns parent</code>，让<code>ns parent</code>可以在<code>ns child</code>之前消费滑动</li>
<li>如果<code>ns parent</code>没有消费或是没有消费完，<code>ns child</code>再自己消费剩下的滑动</li>
<li>如果<code>ns child</code>自己还是没有消费完这个滑动，会再把剩下的滑动交给<code>ns parent</code>消费</li>
<li>最后如果滑动还有剩余，<code>ns child</code>可以做最终的消费</li>
</ol></li>
<li>同时在<code>ns child</code>的<code>computeScroll()</code>方法中，<code>ns child</code>也会把自己因为用户<code>fling</code>操作引发的滑动，与上一条中用户滑动屏幕触发的滑动一样，使用「parent -&gt; child -&gt; parent -&gt; child」的顺序进行消费</li>
</ol>

<blockquote>
<p>注：</p>

<ol>
<li>以上过程参考当前最新的<code>androidx.core 1.1.0-alpha01</code>中的<code>NestedScrollView</code>和<code>androidx.recyclerView 1.1.0-alpha01</code>中的<code>RecyclerView</code>实现，与之前的版本细节略有不同，后文会详述其中差异</li>
<li>为了理解上的方便，有一处细节的描述做了简化：其实在<code>NestedScrollView</code>、<code>RecyclerView</code>这类经典实现中，在判断出滑动手势之前，就可能拦截事件流。具体可以关注源码中的 <code>mIsBeingDragged</code> 字段，在 <code>ns child</code> 滚动时，只要用户一按下，<code>ns child</code> 就会拦截事件流，而且在拦截之后，也不用等到判断出滑动手势，<code>ns child</code>就会把滑动距离交给了<code>ns parent</code>。这个细节是比较合理的，会让用户体验更好一点（后文将不会对这个细节再做说明，直接用简化的描述）</li>
<li>省略了关于直接传递fling的部分，因为这块的设计存在问题，而且最新版本这部分机制的作用已经非常小了，基本都没有用到，后面这点会再讲到</li>
</ol>
</blockquote>

<p>你会发现，这跟我们自己实现嵌套滑动的方式非常像，但它有这些地方做得更好（具体怎么实现的见后文）</p>

<ol>
<li><code>ns child</code>使用更灵活的方式找到和绑定自己的<code>ns parent</code>，而不是直接找自己的上一级结点</li>
<li><code>ns child</code>在<code>DOWN</code>事件时关闭<code>ns parent</code>的事件拦截机制单独用了一个跟滑动相关的 flag 进行关闭，不会关闭<code>ns parent</code>对其他手势的拦截，也不会递归往上关闭祖上们的事件拦截机制。<code>ns child</code>直到在<code>MOVE</code>事件中确定自己要开始滑动后，才会调用<code>requestDisallowInterceptTouchEvent(true)</code>递归关闭祖上们全部的事件拦截</li>
<li>对每一次<code>MOVE</code>事件传递来的滑动，都使用「parent -&gt; child -&gt; parent -&gt; child」机制进行消费，让<code>ns child</code>在消费滑动时与<code>ns parent</code>配合更加细致、紧密和灵活</li>
<li>对于因为用户<code>fling</code>操作引发的滑动，与用户滑动屏幕触发的滑动使用同样的机制进行消费，实现了完美的惯性连续效果</li>
</ol>

<h3 id="toc_9">2.2. 使用</h3>

<p>到这一步，我们再来看看 Google 给 View 和 ViewGroup 加了哪些方法？又希望我们什么时候怎么去调用它们？</p>

<p>加入的需要你关心的方法一共有这些（只注明了关键返回值和参数，使用了最新的版本）：</p>

<!--可能跟你看到的听到的都不一样，但不要着急反对，听我慢慢解释-->

<pre><code class="language-kotlin">// 『View』
setNestedScrollingEnabled(true)                       // 调用
startNestedScroll()                                   // 调用
dispatchNestedPreScroll(int delta, int[] consumed)    // 调用
dispatchNestedScroll(int unconsumed, int[] consumed)  // 调用
stopNestedScroll()                                    // 调用

// 『ViewGroup』
boolean onStartNestedScroll()                       // 覆写
int getNestedScrollAxes()                           // 调用
onNestedPreScroll(int delta, int[] consumed)        // 覆写
onNestedScroll(int unconsumed, int[] consumed)      // 覆写
</code></pre>

<p>怎么调用这些方法取决于你要实现什么角色</p>

<ol>
<li>在你实现一个<code>ns child</code>角色时，你需要：

<ol>
<li>在实例化的时候调用<code>setNestedScrollingEnabled(true)</code>，启用嵌套滑动机制</li>
<li>在<code>DOWN</code>事件时调用<code>startNestedScroll()</code>方法，它会「找到自己祖上中最近的与自己匹配的<code>ns parent</code>，进行绑定并关闭<code>ns parent</code>的事件拦截机制」</li>
<li>在<code>MOVE</code>事件判断出用户正在进行滑动后

<ol>
<li>先常规操作关闭祖上们全部的事件拦截、拦截自己子 View 的事件</li>
<li>然后调用<code>dispatchNestedPreScroll()</code>方法，传入用户的滑动距离，这个方法会「触发<code>ns parent</code>对滑动的消费，并且把消费结果返回」</li>
<li>然后<code>ns child</code>可以开始自己消费剩下滑动</li>
<li><code>ns child</code>自己消费完后调用<code>dispatchNestedScroll()</code>方法，传入最后没消费完的滑动距离，这个方法会继续「触发<code>ns parent</code>对剩下滑动的消费，并且把消费结果返回」</li>
<li><code>ns child</code>拿到最后没有消费完的滑动，做最后的处理，比如显示 overscroll 效果，比如在 fling 的时候停止<code>scroller</code></li>
</ol></li>
<li>如果你希望惯性滑动也能传递给<code>ns parent</code>，那么在<code>View</code>的<code>computeScroll()</code>方法中，对于每个<code>scroller</code>计算到的滑动距离，与<code>MOVE</code>事件中处理滑动一样，按照这个顺序进行消费：「<code>dispatchNestedPreScroll()</code> -&gt; 自己 -&gt; <code>dispatchNestedScroll()</code> -&gt; 自己」</li>
<li>在<code>UP</code>、<code>CANCEL</code>事件中以及<code>computeScroll()</code>方法中惯性滑动结束时，调用<code>stopNestedScroll()</code>方法，这个方法会「打开<code>ns parent</code>的事件拦截机制，并取消与它的绑定」</li>
</ol></li>
<li>在你实现一个<code>ns parent</code>角色时，你需要：

<ol>
<li>重写方法<code>boolean onStartNestedScroll(View child, View target, int nestedScrollAxes)</code>，通过传入的参数，决定自己对这类嵌套滑动感兴趣，在感兴趣的情况中返回<code>true</code>，<code>ns child</code>就是通过遍历所有<code>ns parent</code>的这个方法来找到与自己匹配的<code>ns parent</code></li>
<li>如果选择了某种情况下支持嵌套滑动，那么在拦截滑动事件前，调用<code>getNestedScrollAxes()</code>，它会返回你某个方向的拦截机制是否已经被<code>ns child</code>关闭了，如果被关闭，你就不应该拦截事件了</li>
<li>开启嵌套滑动后，你可以在<code>onNestedPreScroll</code>和<code>onNestedScroll</code>方法中耐心等待<code>ns child</code>的消息，没错，它就对应了你在<code>ns child</code>中调用的<code>dispatchNestedPreScroll</code>和<code>dispatchNestedScroll</code>方法，你可以在有必要的时候进行自己的滑动，并且把消耗掉的滑动距离通过参数中的数组返回</li>
</ol></li>
</ol>

<p>这么实现的例子可以看 <code>ScrollView</code>，只要打开它的<code>setNestedScrollingEnabled(true)</code>开关，你就能看到嵌套滑动的效果<br/>
@@@</p>

<!--
有人可能会问，为什么感觉写起来有点麻烦啊，比自己实现还要麻烦？就不能一句话导入，两句话使用吗？

1. 因为滑动过程本身就相对复杂，难以找到一个统一的切面插入`NestedScrolling`机制，它作为整体滑动机制的一部分，只能把自己打散然后穿插到整体滑动机制中合适的位置
2. 如果你要写得灵活和健壮，你的代码不会比它少，对于简单的需求，它也不会增加你太多的工作量
-->

<p><code>ns parent</code>还好，但<code>ns child</code>的实现过程看上去有些复杂，光是描述可能还是不够直接，为此我也为<code>ns child</code>准备了一份参考模板：<code>NestedScrollChildSample</code> @@@</p>

<blockquote>
<p>注意</p>

<ol>
<li>虽然模板在IDE里没有报错，但这不是可以运行的代码，这是剔除 <code>NestedScrollView</code> 中关于 <code>ns parent</code> 的部分，得到的可以认为是官方推荐的 <code>NestedScrollingChild</code> 接口实现方式</li>
<li>其中关键是在触摸和滚动时怎么调用 <code>NestedScrollingChild</code> 接口的方法，也就是 <code>onInterceptTouchEvent()</code> 、 <code>onTouchEvent()</code> 、<code>computeScroll()</code> 中大约150行的代码（简化后）</li>
</ol>
</blockquote>

<p>另外，以上都说的是单一角色时的使用情况，有时候你会需要一个 View 扮演两个角色，就需要多注意一些细节，比如对于<code>ns parent</code>，你要时刻注意你也是 <code>ns child</code>，在来生意的时候也照顾一下自己的<code>ns parent</code>，这些可以去看 <code>NestedScrollView</code> 的实现，不在这展开了。</p>

<h2 id="toc_10">3. 历史的消防车滚滚向前</h2>

<p><span id="questions">但是有人就<strong>问</strong>了：</span><em>（<a href="#answers">回到答案</a>）</em></p>

<ol>
<li>我怎么看到别人讲，你必须实现<code>NestedScrollingParent</code>和<code>NestedScrollingChild</code>这两个接口，然后利用上<code>NestedScrollingParent Helper</code>和<code>NestedScrollingChild Helper</code>这两个帮助类，才能实现一个支持嵌套滑动的自定义View啊，而且大家都称赞这是一种很棒的设计呢，怎么到你这就变成了直接加在View和 ViewGroup 里的方法了，这么普通的DISCO嘛？而且题图里也看到有这几个接口的啊，你难道是标题党吗？<del>（赞一个居然还记得题图）</del></li>
<li>为什么不用实现接口也能实现嵌套滑动，又为什么几乎所有实现嵌套滑动的View又都实现了这两个接口呢？</li>
<li>为什么明明嵌套滑动机制在<code>NestedScrollingParent</code>和<code>NestedScrollingChild</code>这两个接口里放了那么多方法，你却只讲9个呢？</li>
<li>为什么接口里的 fling 系列方法你不讲？</li>
<li>为什么有<code>NestedScrollingChild</code>，有<code>NestedScrollingChild2</code>，工作不饱和的同学会发现最近 Google 还增加了<code>NestedScrollingChild3</code>，这都是在干哈？改了些什么啊？</li>
</ol>

<p>别着急，要解释这些问题，还得先来了解下<span id="history_detail">历史</span>，翻翻<a href="https://developer.android.com/studio/releases/platforms"><code>sdk</code></a>和<a href="https://developer.android.com/topic/libraries/support-library/rev-archive"><code>support library</code></a>家的老黄历：<br/>
（嫌弃太长也可以直接<a href="#history_summarize">前往观看小结</a>）<br/>
<del>（事情要从五年前说起...）</del></p>

<h3 id="toc_11">3.1. 第一个版本，2014年9月</h3>

<p>在 <code>Android 5.0 /  API  21 (2014.9)</code> 时， Google 第一次加入了 NestedScrolling 机制。</p>

<p>虽然在<a href="https://developer.android.com/about/versions/android-5.0">版本更新</a>里完全没有提到，但是在<a href="http://androidxref.com/5.0.0_r2/xref/frameworks/base/core/java/android/View/View.java"><code>View</code></a>和<code>ViewGroup</code>的源码里你已经能看到其中的嵌套滑动相关方法。<br/>
而且此时使用了这些方法实现了嵌套滑动效果的View其实已经有不少了，除了我们讲过的<code>ScrollView</code>，还有<code>AbsListView</code>、<code>ActionBarOverlayLayout</code>等，而这些也基本是当时所有跟滑动有关的View了。<br/>
所以，如上文嵌套<code>ScrollView</code>的例子所示，在<code>Android 5.0</code>时大家其实就能通过<code>setNestedScrollingEnabled(true)</code>开关启用View的嵌套滑动效果。</p>

<p>这是 NestedScrolling 机制的第一版实现。</p>

<h3 id="toc_12">3.2. 重构第一个版本，2015年4月</h3>

<p>因为第一个版本的 NestedScrolling 机制是加在 framework 层的 View 和 ViewGroup 中，所以能享受到嵌套滑动效果的只能是<code>Android 5.0</code>的系统，也就是当时最新的系统。<br/>
大家都知道，这样的功能不会太受开发者待见，所以在当时 NestedScrolling 机制基本没有怎么被使用。<em>（所以大家一说嵌套滑动就提后来才发布的<code>NestedScrollView</code>而不不知道<code>ScrollView</code>早就能嵌套滑动也是非常正常了）</em></p>

<p>Google 就觉得，这可不行啊，<del>嵌套滑不动的Bug不能老留着啊</del> 好东西得大家分享啊，于是一狠心，梳理了下功能，重构出来两个接口（<code>NestedScrollingChild</code>、<code>NestedScrollingParent</code>）两个 Helper （<code>NestedScrollingChildHelper</code>、<code>NestedScrollingParentHelper</code>）外加一个开箱即用的<code>NestedScrollView</code>，在 <a href="https://developer.android.com/topic/libraries/support-library/rev-archive#rev22-1-0"><code>Revision 22.1.0 (2015.4)</code></a> 到来之际，把它们一块加入了<code>v4 support library</code>豪华午餐。</p>

<p>这下大伙就开心了，奔走相告：嵌套滑动卡了吗，赶紧上<code>NestedScrollView</code>吧，<code>Android 1.6</code>也能用。<br/>
同时<code>NestedScrollingChild</code>和<code>NestedScrollingParent</code>也被大家知晓了，要自己整个嵌套滑动，那就实现这两接口吧。</p>

<p>随后，在下一个月 <code>Revision 22.2.0 (2015.5)</code>时，Google又隆重推出了 <code>Design Support library</code>，其中的杀手级控件<code>CoordinatorLayout</code>更是把 NestedScrolling 机制玩得出神入化。</p>

<p>NestedScrolling 机制终于走上台前，一时风头无两。</p>

<p>但注意，我比较了一下，这时的 NestedScrolling 机制相比之前放在 View 和  ViewGroup  中的第一个版本，其实完全没有改动，只是把 View 和 ViewGroup 里的方法分成两部分放到接口和 Helper 里了，<code>NestedScrollView</code>里跟嵌套滑动有关的部分也跟<code>ScrollView</code>里的没什么区别，所以此时的 NestedScrolling 机制本质还是第一个版本，只是形式发生了变化。</p>

<p>而 NestedScrolling 机制形式的变化带来了什么影响呢？</p>

<ol>
<li>把 NestedScrolling 机制从 View 和 ViewGroup 中剥离，把有关的 API 放在接口中，把相关实现放在 Helper 里，让每一个普通的低版本的 View 都能享受到嵌套滑动带来的乐趣，这就是它存在的意义啊（误</li>
<li>确实，因为这个机制其实不涉及核心的 framework 层的东西，所以让它脱离 API 版本存在，让低版本系统也能有嵌套滑动的体验，才是导致这个变化的主要原因也是它的主要优点。至于依赖倒置、组合大于继承应该都只是结果。而便于修复 Bug(×2) 什么的 Google 当时大概也没有想到。</li>
<li>同时，这么做肯定也不止有有优点，它也会有缺点，否则一开始就不会直接把机制加到 View 和 ViewGroup 里了，它的主要缺点有：

<ol>
<li><strong>使用麻烦</strong>。这是肯定的，本来放在 View 里拿来就用的方法，现在不仅要实现接口，还要自己去写接口的实现，虽然有 Helper 类进行辅助，但还是麻烦啊</li>
<li><strong>暴露了更多内部的不需要普通使用者关心的 API</strong>。这点我认为比上一点要重要一些，因为它会影响开发者对整个机制的上手速度。本来，如我前文介绍，你只需要知道有这9个方法就行，现在这一改，光 child 里就有9个，parent 里还有8个，接近 double 了。多的这些方法中有的是机制内部用来沟通的（比如<code>isNestedScrollingEnabled()</code>、<code>onNestedScrollAccepted()</code>），有的是设计别扭用得很少的（比如<code>dispatchNestedFling()</code>），有的是需要特别优化细节才需要的（比如<code>hasNestedScrollingParent()</code>），一开始开发者其实完全不用关心。</li>
</ol></li>
</ol>

<h4 id="toc_13">3.2.1. 第一个版本的Bug</h4>

<p><code>Android 1.6</code>也用上了嵌套滑动，老奶奶开心得合不拢嘴。但大家用着用着，新鲜感过去之后，也开始不满足了起来，于是就有了第一版 NestedScrolling 机制的著名Bug：<span id="bug1_1"><strong>「惯性不连续」</strong></span><em>（<a href="#history_summarize">回到小结</a>）</em></p>

<p>什么是惯性不连续？如下图<br/>
<img src="media/15467469615604/2019-01-09_13-51-04%20-1-.gif" alt="" style="width:200px;"/></p>

<p>简单说就是：你在滑动内部 View 时快速抬起手指，内部 View 会开始惯性滑动，当内部 View 惯性滑动到自己顶部时便停止了滑动，此时外部的可滑动 View 不会有任何反应，即使外部 View 可以滑动。<br/>
本来这个体验也没多大问题，但因为你手动滑动的时候，内部滑动到顶部时可以接着滑动外边的 View，这就形成了对比，有对比就有差距，有差距群众就不满意了，你不能在惯性滑动的时候也把里面的滑动传递到外面去吗？<br/>
所以这个问题也不能算是 Bug，只是体验没有做到那么好罢了。</p>

<p>其实 Google 不是没有考虑过惯性，其中关于 fling 的4个 API 更是存在感十足地告诉大家，我就是来处理你们说的这档子事的，但为什么还是有 Bug 呢，那就不得不提这4个 API 的奇葩设计和用法了。</p>

<p>这四个 API 长这样，看名字对应上 scroll 的4个 API 大概能知道是干什么的（但实际上有很大区别，见下文）：</p>

<ol>
<li>ns child：<code>dispatchNestedPreFling</code>、<code>dispatchNestedFling</code></li>
<li>ns parent：<code>onNestedPreFling</code>、<code>onNestedFling</code></li>
</ol>

<p>前面我在讲述的时候默认是让<code>ns child</code>直接消费用户快速抬起时产生的惯性滑动，这没有什么问题，因为我们还在<code>computeScroll</code>方法中把惯性引起的滑动也传递给了<code>ns parent</code>，让父子配合进行惯性滑动。<br/>
但实际上此时的<a href="http://androidxref.com/6.0.0_r1/xref/frameworks/support/v4/java/android/support/v4/widget/NestedScrollView.java#flingWithNestedDispatch"><code>NestedScrollView</code></a>是这么写的：</p>

<pre><code class="language-java">public boolean onTouchEvent(MotionEvent ev) {
    ...
    case MotionEvent.ACTION_UP:
        if (mIsBeingDragged) {
            ...
    
            if ((Math.abs(initialVelocity) &gt; mMinimumVelocity)) {
                flingWithNestedDispatch(-initialVelocity);
            }
    
            stopNestedScroll();
        }
        break;
    ...
}
    
private void flingWithNestedDispatch(int velocityY) {
    final int scrollY = getScrollY();
    final boolean canFling = (scrollY &gt; 0 || velocityY &gt; 0) &amp;&amp; (scrollY &lt; getScrollRange() || velocityY &lt; 0);
    
    if (!dispatchNestedPreFling(0, velocityY)) {
        dispatchNestedFling(0, velocityY, canFling);
        if (canFling) fling(velocityY);
    }
}
    
public void fling(int velocityY) {
    if (getChildCount() &gt; 0) {
        ...
    
        mScroller.fling(getScrollX(), getScrollY(), 0, velocityY, 0, 0, 0, Math.max(0, bottom - height), 0, height/2);
        ViewCompat.postInvalidateOnAnimation(this);
    }
}
    
@Override
public void computeScroll() {
    if (mScroller.computeScrollOffset()) {
        ... // 没有关于把滑动分发给 ns parent 的逻辑
    }
}
</code></pre>

<p>来读一下其中的逻辑</p>

<ol>
<li>首先看 API ，同滑动一样，设计者给惯性（速度）也设计了一套协同消费的机制，但是这套机制与滑动不太一样，或者说完全不同</li>
<li>在用户滑动<code>ns child</code>并快速抬起手指产生惯性的时候，<code>ns child</code>会先问<code>ns parent</code>是否消费此速度

<ol>
<li>如果消费，就把速度全部交出，自己不再消费</li>
<li>如果<code>ns parent</code>不消费，那么将再次把速度交给<code>ns parent</code>，并且告诉它自己是否有消费速度的条件<em>（根据系统类库一贯的写法，如果<code>ns child</code>消费这个速度，<code>ns parent</code>都不会对这个速度做处理）</em>，同时自己在有消费速度的条件时，对速度进行消费</li>
</ol></li>
<li>消费速度是通过使用<code>mScroller</code>进行惯性滑动，但是在<code>computeScroll()</code>中并没有把滑动分发给 <code>ns parent</code> </li>
<li>最后只要抬起手指，就会调用<code>stopNestedScroll()</code>解除与<code>ns parent</code>的绑定，宣告这次协同合作到此结束</li>
</ol>

<p>那么总结一下:</p>

<ol>
<li>惯性的这套协同消费机制只能在惯性滑动前让<code>ns parent</code>有机会拦截处理惯性，它并不能在惯性滑动过程中让<code>ns child</code>和<code>ns parent</code>协同消费惯性引发的滑动，也就是实现不了前面人们期望的惯性连续效果，所以第一版的开发者想用直接传递惯性的方式实现惯性连续可能不是个好主意

<ol>
<li>另外，目前惯性的协同消费机制只会在<code>ns child</code>无法进行滑动的时候起到一定的作用（虽然完全可以用滑动的协同消费机制替代），而在之后的版本中，这个作用基本也没有被用到，它确实被滑动的协同消费机制替代了</li>
</ol></li>
<li>而实现惯性连续的方式其实非常简单，不需要增加新的机制，直接通过滑动的协同消费机制，在<code>ns child</code>进行惯性滑动时，把滑动传递出来，就可以了</li>
<li>所以第一版 NestedScrolling 机制本身是没有问题的，有问题的是那些系统控件使用这个机制的方式不对</li>
<li>所以修复这个Bug也很简单，只是比较繁琐：修改所有作为<code>ns child</code>角色使用了嵌套滑动机制的系统控件，惯性相关的 API 和处理逻辑都可以保留，只要在<code>computeScroll()</code>中把滑动用<code>dispatchNestedPreScroll()</code>和<code>dispatchNestedScroll()</code>方法分发给 <code>ns parent</code>，再更改一下解除与<code>ns parent</code>绑定的时机，放在 fling 结束之后</li>
<li>你自己的<code>ns child</code> View 可以直接改，但系统提供的<code>NestedScrollView</code>、<code>RecyclerView</code>等控件，你就只能提个 issue 等官方修复了，不过也可以拷贝一份出来自己改</li>
</ol>

<h3 id="toc_14">3.3. 第二个版本，2017年9月</h3>

<p><del>Google表示才不想搭理这些人，给你用就不错了哪来那么多事儿？我还要忙着搞AI呢</del> 直到两年多后的2017年9月，<code>Revision 26.1.0</code>才悄咪咪<em>（<a href="https://developer.android.com/topic/libraries/support-library/revisions#26-1-0">更新日志</a>里没有提，但是<a href="https://developer.android.com/reference/android/support/v4/View/NestedScrollingParent2">文档的添加记录</a>里能看到，后来发现作者自己倒是<a href="https://chris.banes.me/2017/06/09/carry-on-scrolling/">写了篇博客</a>说这事，说是<code>Revision 26.0.0-beta2</code>时加的，跟文档里写的不一致，不过这不重要）</em> 更新了一版<code>NestedScrollingChild2</code>和<code>NestedScrollingParent2</code>，并且处理了第一版中系统控件的Bug，这便是第二个版本的 NestedScrolling 机制了</p>

<p>来看看第二版是怎么处理第一版 Bug 的，大牛的救火思路果然比一般人要健壮。</p>

<p>首先看接口是怎么改的：</p>

<ol>
<li><code>ns child</code>在<code>computeScroll</code>中分发滑动给<code>ns parent</code>没有问题（这是关键），但是我要区分开是用户手指移动触发的滑动还是由惯性触发的滑动</li>
<li>于是第二版中给所有<code>NestedScrollingChild</code>中滑动相关的<em>（确切地说是除了「fling相关、滑动开关」外的）</em> 5个方法、所有<code>NestedScrollingParent</code>中滑动相关的<em>（确切地说是除了「fling相关、获取滑动轴」外的）</em> 5个方法，都增加了一个参数<code>type</code>，<code>type</code>有两个取值代表上述的两种滑动类型：<code>TYPE_TOUCH</code>、<code>TYPE_NON_TOUCH</code></li>
<li>所以第二版的两个接口没有增删任何方法，只是给10个方法加了个<code>type</code>参数，并且对旧的接口做了个兼容，让它们的<code>type</code>是<code>TYPE_TOUCH</code></li>
</ol>

<p>改完了接口当然还要改代码了，Helper 类首先要改</p>

<ol>
<li><a href="http://androidxref.com/6.0.0_r1/xref/frameworks/support/v4/java/android/support/v4/View/NestedScrollingChild%20Helper%20.java">第一版的 <code>NestedScrollingChildHelper</code></a> 里边本来持有了一个<code>ns parent</code> 域 <code>mNestedScrollingParentTouch</code>，作为绑定关系，<a href="http://androidxref.com/8.0.0_r4/xref/frameworks/support/core-ui/java/android/support/v4/View/NestedScrollingChild%20Helper%20.java">第二版</a> 又再加了一个<code>ns parent</code> 域 <code>mNestedScrollingParentNonTouch</code>，为什么是两个而不是公用一个，大概是避免对两类滑动的生命周期有过于严格的要求，比如在 <code>NestedScrollView</code> 的实现里，就是先开启<code>TYPE_NON_TOUCH</code>类型的滑动，然后关闭了 <code>TYPE_TOUCH</code> 类型的滑动</li>
<li><code>NestedScrollingChildHelper</code> 里边主要就做了这一点额外的改动，其他的改动都是增加参数后的常规变换，<code>NestedScrollingParentHelper</code> 里就更没有特别的变化了</li>
</ol>

<p>前面在分析第一版 Bug 的时候说过「第一版 NestedScrolling 机制本身是没有问题的，有问题的是那些系统控件使用这个机制的方式不对」，所以这次改动最大的还是那些使用了嵌套滑动机制的系统控件了，我们就以 <code>NestedScrollView</code> 为例来具体看看系统是怎么修复 Bug、建议大家现在应该怎么创建 <code>ns child</code> 角色的。<br/>
相同的部分不说了，在调用相关方法的时候要传入 <code>type</code> 也不细说了，主要的变化基本出现在预期的位置：</p>

<pre><code class="language-java">public boolean onTouchEvent(MotionEvent ev) {
    ...
    case MotionEvent.ACTION_UP:
        if (mIsBeingDragged) {
            ...
    
            if ((Math.abs(initialVelocity) &gt; mMinimumVelocity)) {
                flingWithNestedDispatch(-initialVelocity);
            }
    
            stopNestedScroll(ViewCompat.TYPE_TOUCH);
        }
        break;
    ...
}
    
private void flingWithNestedDispatch(int velocityY) {
    final int scrollY = getScrollY();
    final boolean canFling = (scrollY &gt; 0 || velocityY &gt; 0) &amp;&amp; (scrollY &lt; getScrollRange() || velocityY &lt; 0);
    
    if (!dispatchNestedPreFling(0, velocityY)) {
        dispatchNestedFling(0, velocityY, canFling);
        fling(velocityY); // 华点
    }
}
    
public void fling(int velocityY) {
    if (getChildCount() &gt; 0) {
        startNestedScroll(ViewCompat.SCROLL_AXIS_VERTICAL, ViewCompat.TYPE_NON_TOUCH);
        
        mScroller.fling(getScrollX(), getScrollY(), 0, velocityY, 0, 0, Integer.MIN_VALUE, Integer.MAX_VALUE, 0, 0); 
        
        mLastScrollerY = getScrollY();
        ViewCompat.postInvalidateOnAnimation(this);
    }
}
    
@Override
public void computeScroll() {
    if (mScroller.computeScrollOffset()) {
        final int x = mScroller.getCurrX();
        final int y = mScroller.getCurrY();
    
        int dy = y - mLastScrollerY;
    
        // Dispatch up to parent
        if (dispatchNestedPreScroll(0, dy, mScrollConsumed, null, ViewCompat.TYPE_NON_TOUCH)) {
            dy -= mScrollConsumed[1];
        }
    
        if (dy != 0) {
            final int range = getScrollRange();
            final int oldScrollY = getScrollY();
    
            overScrollByCompat(0, dy, getScrollX(), oldScrollY, 0, range, 0, 0, false);
    
            final int scrolledDeltaY = getScrollY() - oldScrollY;
            final int unconsumedY = dy - scrolledDeltaY;
    
            if (!dispatchNestedScroll(0, scrolledDeltaY, 0, unconsumedY, null, ViewCompat.TYPE_NON_TOUCH)) {
                if (canOverscroll()) showOverScrollEdgeEffect();
            }
        }
    
        ViewCompat.postInvalidateOnAnimation(this);
    } else {
        stopNestedScroll(ViewCompat.TYPE_NON_TOUCH);
    }
}
</code></pre>

<p><code>computeScroll()</code>方法的代码贴得比较多，因为它不仅是这次Bug修复的主要部分，它还是下一次Bug修复要改动的部分。<br/>
不过其实整个逻辑还是很简单的，符合预期，简单说明一下：</p>

<ol>
<li><code>UP</code>时候做的事情没有变，还是在这解除了与<code>ns parent</code>的绑定，但是注明了类型是<code>TYPE_TOUCH</code></li>
<li><code>flingWithNestedDispatch()</code>这个方法先不说</li>
<li>在<code>fling()</code>方法中，调用<code>startNestedScroll()</code>开启了新一轮绑定，不过这时的类型变成了<code>TYPE_NON_TOUCH</code></li>
<li>最多的改动是在<code>computeScroll()</code>方法中，但逻辑很清晰：对于每个<code>dy</code>，都会经过「parent -&gt; child -&gt; parent -&gt; child」这个消费流程，从而实现了惯性连续，解决了 Bug</li>
</ol>

<p>最后的效果是这样：<br/>
<img src="media/15467469615604/2019-01-09_13-58-03%20-1-.gif" alt="" style="width:200px;"/></p>

<p>另外，从这版开始，View和 ViewGroup 里的 NestedScrolling 机制就没有更新过，一直维持着第一个版本的样子。</p>

<h4 id="toc_15">3.3.1. 第二个版本的Bug</h4>

<p>看上去第二个版本改得很漂亮对吧，但这次改动其实又引入了两个问题，至少有一个算是Bug，另一个可以说只是交互不够好，不过这个交互不够好的问题引入的原因却非常令人迷惑。</p>

<p>先说第一个问题：<span id="bug2_1"><strong>「二倍速」</strong></span><em>（<a href="#history_summarize">回到小结</a>）</em></p>

<ol>
<li>我只知道它正好出现在了<code>NestedScrollView</code>中，<code>RecyclerView</code>等类没有这个问题，我极度怀疑它的引入是因为手滑</li>
<li>它的现象是这样：当外部 View 不在顶部、内部 View 在顶部时，往下滑动内部 View 然后快速抬起（制造 fling ）

<ol>
<li>预期效果应该是：外部 View 往下进行惯性滑动</li>
<li>实际上也大概是这样，但有一点点区别：外部 View 往下滑动的速度会比你预想中要快，大概是两倍的速度（反方向也是一样），如下图</li>
</ol></li>
<li>为什么会这样呢？

<ol>
<li>你如果把第二版嵌套滑动机制更新的<code>NestedScrollView</code>跟之前的对比，你会很容易发现<code>flingWithNestedDispatch()</code>中（在我贴出来的代码里），<code>fling(velocityY)</code>前的<code>if (canFling)</code>离奇消失了</li>
<li>但消失不代表是手滑，可能是逻辑使然，于是梳理了一下逻辑，这个 if 判断在新的机制中需要去掉吗？额，并不需要。没有了 if 会让外部 View 同时进行两个 fling，实际体验也确实是这样</li>
</ol></li>
<li>所以解决这个问题很简单，直接把 if 判断补上就好了</li>
<li>不过这个问题在体验上不算明显，不过也不难发现，只是用户可能不知道这是个 Bug 还是 Feature（233</li>
</ol>

<p><img src="media/15467469615604/2019-01-09_14-01-43%20-1-.gif" alt="" style="width:200px;"/></p>

<p>然后是第二个问题：<span id="bug2_2"><strong>「空气马达」</strong></span><em>（<a href="#history_summarize">回到小结</a>）</em></p>

<ol>
<li>这个问题肯定算 Bug 了，所有的嵌套滑动控件都存在，而且体验非常明显</li>
<li>这个问题就比较硬核了，真的是 NestedScrolling 机制的问题，确切地说应该叫缺陷，在第一版中就存在，只是第一版中系统控件的不当的机制使用方式正好不会触发这个问题，但是在第二版后，各个控件改用了新的使用方式，这个问题终于暴露出来了</li>
<li>它的现象是这样：当外部 View 在顶部、内部 View 也在顶部时，往下滑动内部 View 然后快速抬起（制造 fling ），<em>（目前什么都不会发生，因为都滑到顶了，关键是下一步）</em> 你马上滑<strong>外部 View</strong>

<ol>
<li>预期应该是：外部 View 往上滚动</li>
<li>但实际上你会发现：你滑不动它，或是滑上去一点，马上又下来了，像是有一台无形的马达在跟你的手指较劲（反方向也是一样），如下图</li>
</ol></li>
<li>为什么会这样呢？

<ol>
<li>其实我开始也不得要领，只好打日志去看到底谁是那个马达，调试了好一会（当时还闹了个笑话有空再写）才发现原来马达就是内部 View</li>
<li>原因解释起来也是非常简单的：

<ol>
<li>先回头看方法<code>flingWithNestedDispatch()</code>中的这段代码：其中的<code>dispatchNestedPreFling()</code>大部分时候会返回<code>false</code>，于是几乎所有的情况下，内部 View 都会通过<code>fling()</code>方法启动自己<code>mScroller</code>这个小马达</li>
<li>然后在小马达启动后，到<code>computeScroll()</code>方法中，你会看到，（如果你不直接触摸内部View） <strong>除非等到马达自己停止，否则没有外力能让它停下</strong>，于是它会一直向外输出<code>dispatchNestedPreScroll()</code>和<code>dispatchNestedScroll()</code></li>
<li>所以在上面的现象中，即使内外的 View 都在顶部，都无法滑动，内部 View 的小马达还在突突突地工作，只要你把外部 View 滑到不在顶部的位置，它就又会把它给滑下来</li>
<li>所以其实不需要前面说的「当外部View在顶部、内部View也在顶部时」这种场景（这只是最好复现的场景），当以任何方式开启了内部 View 的小马达后，你又不通过直接触摸内部 View 把它关闭时，都能看到这个问题</li>
</ol></li>
</ol></li>
<li>那怎么办？这个问题的症结在哪儿？

<ol>
<li>首先内部 View 的小马达是不能废弃的，没有它，怎么突突突地驱动外部 View 呢？</li>
<li>但也不能任它突突突转个不停，除了用户直接触摸内部 View 让它停止，它还需要有一个停止开关，至少让用户触摸外部 View 的时候也能关闭它，更合理的实现还应该让驱动过程能够反馈，当出现情况无法驱动（比如内外都滑到顶部）时，停下马达</li>
</ol></li>
<li>所以现在需要给驱动过程增加反馈

<ol>
<li><a href="#ns_roles">前文讲过</a>，这个机制中<code>ns child</code>是主动的一方，<code>ns parent</code>完全是被动的，<code>ns parent</code>没法主动通知<code>ns child</code>：啊我被摁住了，啊我撞墙了</li>
<li>但<code>ns parent</code>并不是没办法告知<code>ns child</code>信息，通过方法的返回值和引用类型的参数，<code>ns child</code>仍然可以从<code>ns parent</code>中获取信息</li>
<li>所以只要给 NestedScrolling 机制加一组方法，让<code>ns child</code>询问<code>ns parent</code>是否能够滑动，问题应该就解决了：如果<code>ns parent</code>滑不动了，<code>ns child</code>自己也滑不动，那就赶紧关闭马达吧，<del>节约能源人人有责</del></li>
</ol></li>
<li>咱想得确实美，但咱又吃不上G家的饭， NestedScrolling 机制不是你写的，你怎么给整个机制加个方法？好吧，那只能看看这个 NestedScrolling 机制有什么后门能利用了

<ol>
<li>一尝试就发现可能有戏，询问<code>ns parent</code>是否能够滑动不是有现成的方法吗？</li>
<li><code>dispatchNestedPreScroll()</code>会先让<code>ns parent</code>在<code>ns child</code>之前进行滑动，而且滑动的距离被记录在它的数组参数<code>consumed</code>中，拿到数组中的值<code>ns child</code>就能知道<code>ns parent</code>是否在这时滑动了</li>
<li><code>dispatchNestedScroll()</code>会让<code>ns parent</code>在<code>ns child</code>之后进行滑动，它有没有数组参数记录滑动距离，它只有一个返回值记录是否消费了滑动...不对，这个返回值不是记录是否消费滑动用的，它表示的是<code>ns parent</code>是否能顺利联系上，如果能，就返回<code>true</code>，并不关心它是否消费了滑动。在<code>NestedScrollingChild Helper</code>中你也能看到这个逻辑的清晰实现，同时你也会看到在<code>NestedScrollingParent2</code>中它对应的方法是<code>void onNestedScroll()</code>，没有返回值<em>（考虑过能不能通过<code>dispatchNestedScroll()</code>中<code>int[] offsetInWindow</code>没被使用的数组位置来传递信息，结果也因为 parent 中对应的方法不带这个参数而告终；而且<code>ns parent</code>也无法主动解除自己与<code>ns child</code>的绑定，这条路也不通）</em>。总之，<code>dispatchNestedScroll()</code>无法让<code>ns child</code>得知<code>ns parent</code>对事件的消费情况，此路不通</li>
<li>（其实之后通过把<code>dispatchNestedScroll()</code>的消费结果直接放在<code>ns child</code>的 View 中，用这个后门解决了Bug，但这种方式使用的局限比较大，而且下面要介绍的最新的第三版已经修复了这个问题，我就不多写了，有需要的可以看这里的代码@@@）</li>
</ol></li>
</ol>

<p><img src="media/15467469615604/2019-01-09_14-05-22%20-1-.gif" alt="" style="width:200px;"/></p>

<h3 id="toc_16">3.4. 第三个版本，2018年11月</h3>

<p>第二版的 Bug 虽然比第一版的严重，但好像没有太多人知道，可能这种使用场景还是没有那么多。<br/>
不过时隔一年多，Google 终于是意识到了这个问题，在最近也就是2018年11月5日<code>androidx.core 1.1.0-alpha01</code>的<a href="https://developer.android.com/jetpack/androidx/androidx-rn#2018-nov-core">更新</a>中，给出了最新的修复——<code>NestedScrollingChild3</code>和<code>NestedScrollingParent3</code>，以及一系列系统组件也陆续进行了更新。</p>

<p>这就是第三个版本的 NestedScrolling 机制了，这个版本确实对上面两个 Bug 进行了处理，但可惜的是，第二个 Bug 并没有修理干净 <del>（为 Google 大佬献上一首つづく，期待第四版）</del><br/>
<em>（在本文快要完成的时候正好看到新一任消防员在18年12月3日发了条 <a href="https://twitter.com/sockeqwe/status/1069844582769328128?lang=en">twitter</a> 说已经发布了第三版，结果评论区大家已经在欢乐地期待 <code>NestedScrollingChild42</code> <code>NestedScrollingChildX</code> <code>NestedScrollingParentXSMax</code> <code>NestedScrollingParentFinalFinalFinal</code> <code>NestedScrollingParent2019</code> 了 ）</em></p>

<p>继续来看看在这个版本中，大佬是怎么救火的</p>

<p>照例先看接口，一看接口的改动你可能就笑了，真的是哪里不通改哪里</p>

<ol>
<li>在接口<code>NestedScrollingChild3</code>中，没有增加方法，只是给<code>dispatchNestedScroll</code>方法增加了一个参数<code>int[] consumed</code>，并且把它的<code>boolean</code>返回值改成了<code>void</code>，有了能获取更详细信息的途径，自然就不需要这个<code>boolean</code>了</li>
<li>接口<code>NestedScrollingParent3</code>同样只是改了一个方法，给<code>onNestedScroll</code>增加了<code>int[] consumed</code>参数（它返回值就是 <code>void</code>，没变）</li>
</ol>

<p>下面是<code>NestedScrollingChild3</code>中的对比：</p>

<pre><code class="language-java">// 2
boolean dispatchNestedScroll(
    int dxConsumed, int dyConsumed,
    int dxUnconsumed, int dyUnconsumed, 
    @Nullable int[] offsetInWindow,
    @NestedScrollType int type
);
    
// 3
void dispatchNestedScroll(
    int dxConsumed, int dyConsumed, 
    int dxUnconsumed, int dyUnconsumed,
    @Nullable int[] offsetInWindow, 
    @NestedScrollType int type,
    @NonNull int[] consumed // 这个
);
</code></pre>

<p>再看下 Helper ，<code>NestedScrollingChildHelper</code>除了适配新的接口基本没有改动，<code>NestedScrollingParentHelper</code>也只是增强了一点逻辑的严谨性（大概是被review了233）</p>

<p>最后看用法，还是通过我们的老朋友<code>NestedScrollView</code>来看，改动部分跟预期基本一致：</p>

<pre><code class="language-java">@Override
public void onNestedScroll(View target, int dxConsumed, int dyConsumed,
        int dxUnconsumed, int dyUnconsumed, int type, @NonNull int[] consumed) {
            
    final int oldScrollY = getScrollY();
    scrollBy(0, dyUnconsumed);
    final int myConsumed = getScrollY() - oldScrollY;
    
    if (consumed != null) consumed[1] += myConsumed; // 就加了这一句
    
    final int myUnconsumed = dyUnconsumed - myConsumed;
    mChild Helper .dispatchNestedScroll(0, myConsumed, 0, myUnconsumed, null, type, consumed);
}
    
// ---
    
// onTouchEvent 中逻辑没有变化
private void flingWithNestedDispatch(int velocityY) {
    if (!dispatchNestedPreFling(0, velocityY)) {
        dispatchNestedFling(0, velocityY, true);
        fling(velocityY); // fling 中的逻辑没有变化
    }
}
    
@Override
public void computeScroll() {
    if (mScroller.isFinished()) return;
    mScroller.computeScrollOffset();
    final int y = mScroller.getCurrY();
    
    int unconsumed = y - mLastScrollerY;
    
    // Nested Scrolling Pre Pass
    mScrollConsumed[1] = 0;
    dispatchNestedPreScroll(0, unconsumed, mScrollConsumed, null, ViewCompat.TYPE_NON_TOUCH);
    unconsumed -= mScrollConsumed[1];
    
    final int range = getScrollRange();
    
    if (unconsumed != 0) {
        // Internal Scroll
        final int oldScrollY = getScrollY();
        overScrollByCompat(0, unconsumed, getScrollX(), oldScrollY, 0, range, 0, 0, false);
        final int scrolledByMe = getScrollY() - oldScrollY;
        unconsumed -= scrolledByMe;
    
        // Nested Scrolling Post Pass
        mScrollConsumed[1] = 0;
        dispatchNestedScroll(0, scrolledByMe, 0, unconsumed, mScrollOffset, ViewCompat.TYPE_NON_TOUCH, mScrollConsumed);
        unconsumed -= mScrollConsumed[1];
    }
    
    // 处理最后还有 unconsumed 的情况
    if (unconsumed != 0) {
        if (canOverscroll()) showOverScrollEdgeEffect();
    
        mScroller.abortAnimation(); // 关停小马达
        stopNestedScroll(ViewCompat.TYPE_NON_TOUCH);
    }
    
    if (!mScroller.isFinished()) ViewCompat.postInvalidateOnAnimation(this);
}
</code></pre>

<p>修改最多的还是<code>computeScroll()</code>，不过其他地方也有些变化，简单说明一下：</p>

<ol>
<li>因为<code>onNestedScroll()</code>增加了记录距离消耗的参数，所以<code>ns parent</code>就需要把这个数据记录上并且继续传递给自己的<code>ns parent</code></li>
<li><code>flingWithNestedDispatch()</code>是之前有蜜汁 Bug 的方法，本来我的预期是恢复第一版的写法，也就是把<code>fling(velocityY)</code>前的<code>if (canFling)</code>加回来，结果这下倒好，连<code>canFling</code>也不判断了，<code>dispatchNestedFling(0, velocityY, true)</code>直接传<code>true</code>，<code>fling(velocityY)</code>始终调用。这意味着什么呢？需要结合大部分View的写法来看

<ol>
<li>搜索<code>API  28</code>的代码你就会看到：

<ol>
<li>对于<code>onNestedPreFling()</code>方法，除了<code>ResolverDrawerLayout</code>会在某些情况下消费fling并返回<code>true</code>，以及<code>CoordinatorLayout</code>会象征性地问一遍自己孩子们的<code>Behavior</code>，其它的写法都是直接返回<code>false</code></li>
<li>对于<code>onNestedFling(boolean consumed)</code>方法，所有的写法都是，只要<code>consumed</code>为<code>true</code>，就什么都不会做，这种做法也非常自然</li>
</ol></li>
<li>所以当前的现状是：绝大部分情况下，内部 View 的 fling 小马达都会启动，外部 View 都不会消费内部 View 产生的 fling。这就代表着：惯性的协作机制完全被滑动的协作机制取代了。这也是我不推荐给初学者介绍这组没什么用的接口的原因</li>
<li>但当然，即使名存实亡，但如果你真的有特殊需求需要使用到 fling 的传递机制，你也是可以用的</li>
</ol></li>
<li>最后来看<code>computeScroll()</code>，它基本把我们在讨论怎么修复第二版中 Bug 时的思路实现了：因为能从<code>dispatchNestedPreScroll()</code>和<code>dispatchNestedScroll()</code>得知<code>ns parent</code>消耗了多少这一次分发出去的滑动距离，同时也有自己消耗了多少，两者一合计，如果还有没消耗的滑动距离，那肯定无论内外都滑到头了，于是就该果断就把小马达关停</li>
</ol>

<p>现在的效果是这样的，能看到第二版中的Bug确实解决了<br/>
<img src="media/15467469615604/2019-01-09_14-13-48%20-1-.gif" alt="" style="width:200px;"/></p>

<h4 id="toc_17">3.4.1. 第三个版本的Bug</h4>

<p>那么为什么我还说第二个Bug没有解决彻底呢？</p>

<ol>
<li>对比代码容易看到，第三版中<code>DOWN</code>事件的处理相对第二版没有变化，它没有加入触摸外部 View 后关闭内部 View 马达的机制，更确切地说是没有加入「触摸外部 View 后阻止对内部 View 传递过来的滑动进行消费的机制」</li>
<li>所以只有外部 View 滑动到尽头的时候才能关闭马达，外部 View 没法给内部 View 反馈自己被摁住了</li>
</ol>

<p>虽然现象与「空气马达」类似，但还是按照惯例给它也起个好听的新名字，就叫：...<span id="bug3_1"><strong>「摁不住」</strong></span>吧<em>（<a href="#history_summarize">回到小结</a>）</em></p>

<p>实际体验跟分析结果一样这样，当通过滑动内部 View 触发外部View滑动时，你无法通过触摸外部 View 把它停下来，外部 View 比较长的时候容易复现，如下图（换了一个方向）<br/>
<img src="media/15467469615604/2019-01-09_14-17-17%20-1-.gif" alt="" style="width:200px;"/></p>

<p>不过这个问题只有可以响应触摸的<code>ns parent</code>需要考虑，可以响应触摸的<code>ns parent</code>主要就是<code>NestedScrollView</code>了，所以这个问题主要还是<code>NestedScrollView</code>的问题。而且它也跟机制无关，只是<code>NestedScrollView</code>的用法不对，所以前面说的会有第四版 NestedScrolling 机制可能性也不大，大概只会给<code>NestedScrollView</code>上个普通的更新吧（@@@去issue里给 Google 提了个bug）</p>

<p>而这个问题自己改也非常好改，只需要在<code>DOWN</code>事件后能给<code>ns child</code>反馈自己被摁住了就行，可以用反射，或是直接把<code>NestedScrollView</code>挪出来改，不细说了，实例代码见这里（@@@），可以直接使用哦：）</p>

<h3 id="toc_18">3.5. 小结</h3>

<!--所以那些上来就介绍这17个方法的人，真的是劝退界老前辈了吧-->

<!--fling的传递没有讲，看完下面改动的细节你就懂了（很多博文这里讲得和笼统，跟scroll一样，如果你真这么想，你就错失了一个大瓜，隐约能从这个瓜里看到 Google 工程师救火时的英勇身姿）-->

<p>历史终于讲完了，<span id="history_summarize"><strong>小结一下</strong></span><em>（<a href="#history_detail">回去看详细历史</a>）</em></p>

<ol>
<li>2014年9月，Google 在<code>Android 5.0( API  21)</code>中的 View 和 ViewGroup 中加入了第一个版本的 NestedScrolling 机制，此时能够通过启用嵌套滑动，让嵌套的<code>ScrollView</code>不出现交互问题，但这个机制只有 API 21 以上才能使用</li>
<li>2015年4月，Google 重构了第一个版本的 NestedScrolling 机制，逻辑没有变化，但是把它从 View 和 ViewGroup 中剥离，得到了两个接口（<code>NestedScrollingChild</code>、<code>NestedScrollingParent</code>）和两个 Helper （<code>NestedScrollingChildHelper</code>、<code>NestedScrollingParentHelper</code>），并且用这套新的机制重写了一个默认启用嵌套滑动的<code>NestedScrollView</code>，并把它们都放入了<code>Revision 22.1.0</code>的<code>v4 support library</code>，让低版本的系统也能使用嵌套滑动机制，不过此时的第一版机制有<a href="#bug1_1">「惯性不连续」</a>的 Bug</li>
<li>2017年9月，Google 在<code>Revision 26.1.0</code>的<code>v4 support library</code>中发布了第二个版本的 NestedScrolling 机制，增加了接口<code>NestedScrollingChild2</code>、<code>NestedScrollingParent2</code>，主要是给原本滑动相关的方法增加了一个参数<code>type</code>，表示了两种滑动类型<code>TYPE_TOUCH</code>、<code>TYPE_NON_TOUCH</code>。并且使用新的机制重写了嵌套滑动相关的控件。这次更新解决了第一个版本中「惯性不连续」的Bug，但也引入了新的Bug：<a href="#bug2_1">「二倍速」</a>（仅<code>NestedScrollView</code>）和<a href="#bug2_2">「空气马达」</a></li>
<li>2018年11月，Google 给已经并入<code>AndroidX</code> 家族的 NestedScrolling 机制更新了第三个版本，具体版本是<code>androidx.core 1.1.0-alpha01</code>，增加了接口<code>NestedScrollingChild3</code>、<code>NestedScrollingParent3</code>，改动只是给原来的<code>dispatchNestedScroll()</code>和<code>onNestedScroll()</code>增加了<code>int[] consumed</code>参数。并且后续把嵌套滑动相关的控件用新机制进行了重写。这次更新解决了第二个版本中 <code>NestedScrollView</code>的「二倍速」Bug，同时期望解决「空气马达」Bug，但是没有解决彻底，还遗留了<a href="#bug3_1">「摁不住」</a>Bug</li>
</ol>

<p>所以<a href="#questions">前面的问题</a>大家应该都有了<span id="answers"><strong>答案</strong></span>：</p>

<ol>
<li>使用接口和 Helper 是为了兼容低版本和容易升级，并不是 NestedScrolling 机制用起来最方便的样子。所以为了便于理解，我就直接说调用 View 和 ViewGroup 的方法，但真正用的时候你最好还是在 Helper 的帮助下实现它最新的接口，然后再调用你实现的这些方法，因为 View 和 ViewGroup 的方法对 API 的版本要求高，自己的版本又很低。放心很简单的，因为方法名跟 View 和 ViewGroup 中的都一样，Helper 的使用也很直接，就不举例子了。</li>
<li>常用的方法也就是这9个了，剩下的8个不用急着去了解，其中 fling 相关方法有点凉凉的味道，然后第二版机制和第三版机制并没有增加新的方法。</li>
<li>第二版和第三版都是在修 Bug  <del>，恩，还没修完。</del></li>
</ol>

<h2 id="toc_19">4.总结</h2>

<p>如果你没有跳过地看到这里，关于 NestedScrolling 机制，我相信现在无论是使用、还是原理、甚至<del>八卦</del>历史，你都了解得一清二楚了，否则我只能怀疑<del>你的</del>我的语文<del>老师</del>表达水平了。</p>

<p>而关于代码的设计，你大概也能学到一点，Google 工程师三入火场英勇救火的身影应该给你留下了深刻的印象。</p>

<p>最后关于使用多说两句：</p>

<ol>
<li>如果你需要目前最好的嵌套滑动体验，不管是直接用系统 View 还是自定义 View ，直接用最新的AndroidX 吧，并且自定义的时候注意使用3系列</li>
<li>如果你的项目暂时不方便切换 AndroidX，那么就升级到最新的v4吧，注意自定义的时候用2系列</li>
<li>如果你的项目真的追求极致体验，而且正好用到了嵌套的<code>NestedScrollView</code>，认为第三版的bug也会影响到你宝贵而敏感的用户，那就请不客气地implemention我的项目@@@吧 :)</li>
</ol>

<!--（你也可以使用我基于2的机制魔改的`NestedScrollView`）-->

<!--当然其实代码不多，你直接自己魔改也行-->

<!--
类似判定滑动手势，拦截滑动、让父View不拦截滑动，消费滑动，协调父View一块消费滑动，还是得你来做，然后在恰当的时候调用，不过基类里加了渐变的方法

于是Google在View和Viewgorup中加入了一些方法，通过这些方法
-->

<!--
与一般的介绍不同，我不直接介绍这个机制的两个著名接口和两个著名` Helper `，而是继续从原理入手。

任何View都可以通过实现xx和xx接口（用1就行了，后面再解释）来声明自己支持 NestedScrolling 机制，实现了不同的接口代表自己在机制中扮演什么角色（但是，你可以也可以同时扮演两个角色）
-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【透镜系列】看穿 > 触摸事件分发]]></title>
    <link href="http://blog.rubitree.com/15456255866253.html"/>
    <updated>2018-12-24T12:26:26+08:00</updated>
    <id>http://blog.rubitree.com/15456255866253.html</id>
    <content type="html"><![CDATA[
<p><img src="media/15456255866253/2019-01-02_01-18-46%20-2-.gif" alt=""/></p>

<span id="more"></span><!-- more -->

<hr/>

<p></br><br/>
目录：</p>

<ul>
<li>
<a href="#toc_0">引子</a>
</li>
<li>
<a href="#toc_1">1.试造轮子</a>
<ul>
<li>
<a href="#toc_2">1.1.第一次试造</a>
</li>
<li>
<a href="#toc_3">1.2.第二次试造</a>
</li>
<li>
<a href="#toc_4">1.3.第三次试造</a>
</li>
<li>
<a href="#toc_5">1.4.第四次试造</a>
</li>
<li>
<a href="#toc_6">1.5.第五次试造</a>
</li>
<li>
<a href="#toc_7">1.6.总结</a>
</li>
</ul>
</li>
<li>
<a href="#toc_8">2.测试轮子</a>
</li>
<li>
<a href="#toc_9">3.实践</a>
<ul>
<li>
<a href="#toc_10">3.1.选题</a>
</li>
<li>
<a href="#toc_11">3.2.需求分析</a>
</li>
<li>
<a href="#toc_12">3.3.需求实现</a>
<ul>
<li>
<a href="#toc_13">3.3.2.使用 NestedScrolling 机制实现悬停布局</a>
</li>
<li>
<a href="#toc_14">3.3.3.使用外部 View 主导手动实现悬停布局</a>
</li>
</ul>
</li>
</ul>
</li>
<li>
<a href="#toc_15">4.附录</a>
</li>
</ul>


<h2 id="toc_0">引子</h2>

<p>事件分发，我想大部分人都能说几句，哦，三大方法，哦，那段经典伪代码，哦，责任链...<br/>
但如果要让你完完整整捋一遍，你可能就开始支支吾吾了，只能想到啥说啥</p>

<p>这块的东西确实麻烦，说出来不怕吓到你，事件流到底怎么流与这些因素都有关系：是什么事件类型（<code>DOWN/MOVE/UP/CANCEL</code>）、所在的View种类（<code>Activity/ViewGroup/View</code>）、在哪个回调方法（<code>dispatch()/onIntercept()/onTouch()</code>）、回调方法给不同的返回值（<code>true/false/super.xxx</code>），甚至对当前事件的不同处理还会对同一事件流中接下来的事件造成不同影响<br/>
比如我可以问：重写某个<code>ViewGroup</code>里的<code>dispatchTouchEvent</code>方法，对<code>MOVE</code>事件返回<code>false</code>，会怎么影响接下来的事件分发？</p>

<p>于是就有人对这些情况分门别类进行总结，得到了很多规律，也画出了纷繁复杂的事件分发流程图（@@@换图）：<br/>
<img src="media/15456255866253/6C9609F1-7EEB-41B3-8FEC-F4F041377253.png" alt="" style="width:250px;"/>× N     <img src="media/15456255866253/45107265-0557-4E55-9FEB-EA54AB9E7E20.png" alt="" style="width:330px;"/>  × N<br/>
甚至还有类似题图那样的动态流程图（是的，吸引你进来的题图居然是反面教材，我也很心疼啊，画了我半个下午，结果最后并没有太大的帮助）</p>

<p>这些规律和流程图确实是对的，而且某种意义上也是非常清晰的，能帮助你在调试bug的时候找到一点方向<br/>
你或许可以奋发图强，把这些流程图和规律背下来，在需要的时候一通叽里呱啦背完大家大眼瞪小眼<br/>
但它们并不能让你真正理解事件分发是什么样子，面对「是什么、为什么、怎么办」三连，你只能抱拳告辞</p>

<!--这样的所谓的规则、规律之类的它是什么样的东西我能给你写一打-->

<!--这显然不太行，真正理解的人不是这个样子，你得把握其背后的逻辑，你得对其是什么样以及为什么是这样都了如指掌-->

<!--但事件分发真的有那么复杂吗？真的有必要那么复杂吗？显然不是，不就分发个事件吗..-->

<p>那要怎么理解事件分发呢？如果你去请教大牛，大牛说，这简单啊，去看<code>View</code>和<code>ViewGroup</code>这几个方法的源码，看懂你就会了<br/>
大牛说得没毛病，不过我们菜鸡可能还是很懵逼，这几个方法的源码没有长到没法看的程度，但一堆其他的细节也把基本的逻辑涂抹地面目全非，所以这几个方法不是不能看，而且最后一定要看，只是不太适合一开始就直接看</p>

<p>那要看什么呢？看下面这份代码，它把源码中与事件分发相关的内容剥离了出来，至少有这两个优点：</p>

<ol>
<li>相比源码，这份代码足够短足够简单，那些跟事件分发无关的东西通通不要来干扰我

<ol>
<li>长度总共不超过150行，剔除了所有跟事件分发无关的代码，并且把一些因为其他细节导致写得比较复杂的逻辑，用更简单直接的方式表达了</li>
</ol></li>
<li>相比那段经典的事件分发伪代码（见附录），这份代码又足够详细，详细到能告诉你所有你需要知道的事件分发的具体细节

<ol>
<li>那段经典伪代码只能起到提纲挈领的作用，而这份麻雀代码虽然极其精简但它五脏俱全，全到可以直接跑</li>
<li>你可以用它进行为伪布局，然后触发触摸事件，如果在回调中打印日志，它打印出的事件分发过程与你使用系统控件真实布局时事件分发的过程是一模一样的（后文会提供一个方便的事件分发日志打印工具）</li>
</ol></li>
</ol>

<!--
好吧，虽然这很精辟，但是看了它，你能知道在不同的函数返回不同的值代表什么意思吗？会怎么影响后续的事件流?
你不知道，只能去看源码
但是源码这都是些什么啊，怎么这么多flag，还有assceeiblity，touchtarget又是什么？
所以你需要一份代码，它要足够详细，详细到能告诉你所有你需要知道的具体的行为，它又要足够简单，那些跟事件分发无关的东西通通不要来干扰我
这份代码就是为了满足这个要求而生的
-->

<p>先开门见山直接把小麻雀贴出来，如果能直接看明白，那是最好的，如果不想看也可以先跳过，后文会带你一步步把它看明白，进而看穿事件分发</p>

<pre><code class="language-kotlin">// 本文代码基本都是Kotlin（@@@java版本可以看仓库）

interface ViewParent {
    fun requestDisallowInterceptTouchEvent(isDisallowIntercept: Boolean)
}

open class MView {
    var parent: ViewParent? = null

    open fun dispatch(ev: MotionEvent): Boolean {
        // 源码里没有这么直接但区别不大，主要会考虑是否设置了onTouchListener和是否enable
        return onTouch(ev)
    }

    open fun onTouch(ev: MotionEvent): Boolean {
        return false
    }
}

open class MViewGroup(private val child: MView) : MView(), ViewParent {
    private var isChildNeedEvent = false
    private var isSelfNeedEvent = false
    private var isDisallowIntercept = false

    init {
        child.parent = this // 这里只是示意，实际中不建议这么写，会造成提前发布未构造完成的实例
    }

    override fun dispatch(ev: MotionEvent): Boolean {
        var handled = false

        if (ev.actionMasked == MotionEvent.ACTION_DOWN) {
            clearStatus()

            if (!isDisallowIntercept &amp;&amp; onIntercept(ev)) {
                isSelfNeedEvent = true
                handled = onTouch(ev)
            } else {
                handled = child.dispatch(ev)
                if (handled) isChildNeedEvent = true

                if (!handled) { // 这里没有用 if else 是因为这样写上下一致，更清晰
                    handled = onTouch(ev)
                    if (handled) isSelfNeedEvent = true
                }
            }
        } else {
            // 这里 isSelfNeedEvent 条件判断应该放在 isChildNeedEvent 前面
            // 因为两个都为真的情况只能是自己之后通过 onIntercept 抢了控制权，那这之后的控制权就不会去 child 那儿了
            if (isSelfNeedEvent) {
                handled = onTouch(ev)
            } else if (isChildNeedEvent) {
                if (!isDisallowIntercept &amp;&amp; onIntercept(ev)) {
                    isSelfNeedEvent = true

                    val cancel = MotionEvent.obtain(ev)
                    cancel.action = MotionEvent.ACTION_CANCEL
                    handled = child.dispatch(cancel)
                    cancel.recycle()
                } else {
                    handled = child.dispatch(ev)
                }
            }
            // 这里不用再 else 了，因为如果 isSelfNeedEvent 和 isChildNeedEvent 都不为 true，上面不会再发事件下来了
        }

        if (ev.actionMasked == MotionEvent.ACTION_UP
            || ev.actionMasked == MotionEvent.ACTION_CANCEL) {
            clearStatus()
        }

        return handled
    }

    private fun clearStatus() {
        isChildNeedEvent = false
        isSelfNeedEvent = false
        isDisallowIntercept = false
    }

    override fun onTouch(ev: MotionEvent): Boolean {
        return false
    }

    open fun onIntercept(ev: MotionEvent): Boolean {
        return false
    }

    override fun requestDisallowInterceptTouchEvent(isDisallowIntercept: Boolean) {
        this.isDisallowIntercept = isDisallowIntercept
        parent?.requestDisallowInterceptTouchEvent(isDisallowIntercept)
    }
}

/**
 * 这里的大逻辑类似 MViewGroup，但细节很多不同，主要因为没有 onIntercept，会简单一些
 */
open class MActivity(private val childGroup: MViewGroup) {
    private var isChildNeedEvent = false
    private var isSelfNeedEvent = false

    open fun dispatch(ev: MotionEvent): Boolean {
        var handled = false

        if (ev.actionMasked == MotionEvent.ACTION_DOWN) {
            clearStatus()

            handled = childGroup.dispatch(ev)
            if (handled) isChildNeedEvent = true

            if (!handled) {
                handled = onTouch(ev)
                if (handled) isSelfNeedEvent = true
            }
        } else {
            // 这里 isSelfNeedEvent 和 isChildNeedEvent 不会同时为真，顺序无所谓
            if (isSelfNeedEvent) {
                handled = onTouch(ev)
            } else if (isChildNeedEvent) {
                handled = childGroup.dispatch(ev)
            }

            if (!handled) handled = onTouch(ev)
        }

        if (ev.actionMasked == MotionEvent.ACTION_UP
            || ev.actionMasked == MotionEvent.ACTION_CANCEL) {
            clearStatus()
        }

        return handled
    }

    private fun clearStatus() {
        isChildNeedEvent = false
        isSelfNeedEvent = false
    }

    open fun onTouch(ev: MotionEvent): Boolean {
        return false
    }
}
</code></pre>

<ol>
<li>小麻雀在模拟布局的时候做了一些简化：View的父子关系通过构造器建立，而且是独生子女，一个父容器中只有一个子元素</li>
<li>感觉有点乱是不是，没有想象中那么简单啊，它是不是对的呢，你写的是代码还是bug啊？没事，让我们来测试一下（为了避免引子部分过长，测试部分放在正文后面）</li>
</ol>

<p>这段不长的代码能让你相对容易地对事件分发具体是什么样有所了解<br/>
但讲道理，它还是有点复杂，而且看完你也不一定能理解它为什么是这样，这也是读别人代码的困难之处：没有思路<br/>
所以能不能再简单一点呢？</p>

<p>能！我理想中的可读代码应该是长这样的：要实现的需求 -&gt; 所使用的方案 -&gt; 操作的细节 -&gt; 具体的代码<br/>
所以本着己所不欲勿施于人的朴实道理，下面我将假设我们要从头造一个事件分发的框架，先从最简单的需求开始思考方案编写代码，然后不断增加需求并继续思考方案编写代码，最后得到上面这段基本逻辑与Android源码接近的麻雀代码</p>

<h2 id="toc_1">1.试造轮子</h2>

<h3 id="toc_2">1.1.第一次试造</h3>

<p>我们先实现一个最简单的需求：Activity中有一堆层层嵌套的View，有且只有最里边那个View要处理事件，比如点击事件<br/>
<img src="media/15456255866253/15463677874030.jpg" alt="" style="width:350px;"/></p>

<p>思考方案：</p>

<ol>
<li>首先事件从哪儿来，肯定得从父亲那来，因为子View被包裹在里面，没有直接与外界通信的办法，而实际中<code>Activity</code>连接着根View<code>DecorView</code>，它是通往外界的桥梁，能接收到屏幕硬件发送过来的触摸事件</li>
<li>所以事件是从<code>Activity</code>开始，一层一层从<code>ViewGroup</code>传到最里边的子View</li>
<li>这时只需要一个从外向里传递事件的<code>passEvent(ev)</code>方法，父亲一层层往里调，能把事件传递过去，就完成了需求</li>
</ol>

<p>示意图<br/>
<img src="media/15456255866253/15463678459112.jpg" alt="" style="width:400px;"/></p>

<p>麻雀代码：</p>

<pre><code class="language-kotlin">open class MView {
    open fun passEvent(ev: MotionEvent) {
        // do sth
    }
}
    
class MViewGroup(private val child: MView) : MView() {
    override fun passEvent(ev: MotionEvent) {
        child.passEvent(ev)
    }
}
</code></pre>

<ol>
<li>暂时把<code>Activity</code>当成<code>MViewGroup</code>处理也没有问题</li>
<li>为什么是<code>MViewGroup</code>继承<code>MView</code>而不是反过来，跟事件分发没有关系，这里就按照习惯来</li>
</ol>

<h3 id="toc_3">1.2.第二次试造</h3>

<p>然后我们增加一条需求，让情况复杂一点：<code>Activity</code>中有一堆层层嵌套的View，有好几个叠着的View能处理事件<br/>
<img src="media/15456255866253/15463678689560.jpg" alt="" style="width:350px;"/></p>

<p>同时需要增加一条设计原则：<strong>用户的一次操作，只能被一个View真正处理（消费）</strong></p>

<ol>
<li>要求这条原则是为了让操作的反馈符合用户直觉</li>
<li>很容易理解，正常情况下人只会想一次就做一件事

<ol>
<li>比如一个列表条目，列表可以点击进入详情，列表上还有个编辑按钮，点击可以编辑条目

<ol>
<li>这是一个上下两个View都能点击的场景，但用户点一个地方，肯定只想去做一件事，要么进入详情，要么是编辑条目，如果你点编辑结果跳了两个页面，那肯定是不合适的</li>
</ol></li>
<li>再比如在一个可点击Item组成的列表里（比如微信的消息界面），Item可以点击进入某个聊天，列表还能滑动上下查看

<ol>
<li>如果你让Item和列表都处理事件，那在你滑动的时候，你可能得跳一堆你不想去的聊天页面</li>
</ol></li>
</ol></li>
</ol>

<!--（@@@可能有好事者会举手问，你个乡巴佬没见过coordarylayout吗。首先，其实还是一个View消费，一个View消费对开发者的好处是，减少代码的耦合，coordarylayout是一个View消费事件作出自己的反应后，其他相关的依赖View会作出相应的变换，另外其实这是用在开发者确实需要几个View配合作出符合用户直觉的效果的场景，而不是你瞎几把写出的大家乱搞的场景）-->

<p>如果使用第一次试造的框架，要遵守这条原则，就需要在每一个可以处理事件的View层级，判断出自己要处理事件后，不继续调用<code>child</code>的<code>passEvent</code>方法了，保证只有自己处理了事件<br/>
但如果真这样实现了，在大部分场景下会显得怪怪的，因为处理事件的顺序不对</p>

<ol>
<li>比如还是上面的列表，当用户点击按钮想编辑条目的时候，点击事件先传到条目，如果你在条目中判断需要事件，然后把事件消费了不传给子View，用户就永远点不开编辑条目了</li>
<li>而且换个角度看更加明显，用户肯定希望点哪，哪儿最靠上、离手指最近的东西被触发</li>
</ol>

<p>所以新增需求的一个得分点是：<strong>找到那个适合处理事件的View</strong>，而我们当前的答案是：<strong>那个最里面的View适合处理事件</strong></p>

<p>这就不能是等<code>parent</code>不处理事件了才把事件传给<code>child</code>，应该反过来，你需要事件的处理顺序是从里向外：里边的<code>child</code>不要事件了，才调用<code>parent</code>的<code>passEvent</code>方法把事件传出来<br/>
于是得加一条向外的通道，只能在这条向外的通道上处理事件，前面向里的通道什么都不干，只管把事件往里传<br/>
所以这时你有了两条通道，改个名字吧，向里传递事件是<code>passIn</code>方法，向外传递并处理事件是<code>passOut</code>方法</p>

<p>示意图<br/>
<img src="media/15456255866253/15463678930105.jpg" alt="" style="width:400px;"/></p>

<p>麻雀代码：</p>

<pre><code class="language-kotlin">open class MView {
    var parent: MView? = null

    open fun passIn(ev: MotionEvent) {
        passOut(ev)
    }

    open fun passOut(ev: MotionEvent) {
        parent?.passOut(ev)
    }
}

class MViewGroup(private val child: MView) : MView() {
    init {
        child.parent = this // 示意写法
    }

    override fun passIn(ev: MotionEvent) {
        child.passIn(ev)
    }
}
</code></pre>

<p>这段代码没有问题，非常简单，但是它对需求意图的表达不够清晰，增加了框架的使用难度</p>

<ol>
<li>如前所述，我们希望<code>passIn</code>的时候只传递事件，希望在<code>passOut</code>的时候每个View决定是否要处理事件，并进行处理，而且在处理事件后，不再调用<code>parent</code>的<code>passOut</code>方法把事件传出来</li>
<li>你会发现，这其中包含了两类职责，一类是事件传递控制逻辑，另一类是事件处理钩子</li>
<li>其中事件传递控制逻辑基本不会变化，事件处理的钩子中可能做任何事情</li>
<li>我们需要把不同职责的代码分开，更需要把变化的和不变的分开，减少框架使用者的关注点</li>
</ol>

<p>于是我把事件传递控制逻辑放在<code>dispatch</code>方法中，把<code>onTouch</code>方法作为事件处理钩子，而且钩子有一个返回值，表示钩子中是否处理了事件</p>

<pre><code class="language-kotlin">open class MView {
    open fun dispatch(ev: MotionEvent): Boolean {
        return onTouch(ev)
    }

    open fun onTouch(ev: MotionEvent): Boolean {
        return false
    }
}

class MViewGroup(private val child: MView) : MView() {
    override fun dispatch(ev: MotionEvent): Boolean {
        var handled = child.dispatch(ev)
        if (!handled) handled = onTouch(ev)

        return handled
    }

    override fun onTouch(ev: MotionEvent): Boolean {
        return false
    }
}
</code></pre>

<p>这样写完，你会发现：</p>

<ol>
<li>控制逻辑集中在<code>dispatch</code>中，一目了然</li>
<li><code>onTouch</code>单纯是一个钩子，框架使用者只需要关心这个钩子和它的返回值，不用太关心控制流程</li>
<li>另外，连<code>parent</code>也不需要了</li>
</ol>

<h3 id="toc_4">1.3.第三次试造</h3>

<p>上文的实现看上去已经初具雏形了，但其实连开始提的那条原则都没实现完，因为原则要求一次操作只能有一个View进行处理，而我们实现的是一个触摸事件只能有一个View进行处理<br/>
这里就涉及到一次触摸操作和一个触摸事件的区别</p>

<ol>
<li>假设还没有触摸事件的概念，我们要怎么区分一次触摸操作呢？

<ol>
<li>把触摸操作细分一下，大概有按下动作、抬起动作、与屏幕接触时的移动和停留动作</li>
<li>很容易想到，要区分两次触摸操作，可以通过按下和抬起动作进行区分，按下动作开始了一次触摸操作，抬起动作结束了一次触摸，按下和抬起中间的移动和停留都属于这一次触摸操作，至于移动和停留是否要区分，目前没有看到区分的必要，可以都作为触摸中来处理</li>
</ol></li>
<li>于是在一次触摸操作中就有了三种动作的类型：<code>DOWN/UP/ING</code>，其中<code>ING</code>有点不够专业，改个名字叫<code>MOVE</code>吧</li>
<li>而每个触摸动作会在软件系统中产生一个同样类型的触摸事件</li>
<li>所以最后，一次触摸操作就是由一组从<code>DOWN</code>事件开始、中间是多个<code>MOVE</code>事件、最后结束于<code>UP</code>事件的事件流组成</li>
</ol>

<p>于是设计原则更确切地说就是：<strong>一次触摸产生的事件流，只能被一个View消费</strong></p>

<p>在上次试造的基础上把一个事件变成一个组事件流，其实非常简单：处理<code>DOWN</code>事件时跟前面处理一个事件时一样，但需要同时记住<code>DOWN</code>事件的消费对象，后续的<code>MOVE/UP</code>事件直接交给它就行了</p>

<p>麻雀代码：</p>

<pre><code class="language-kotlin">open class MView {
    open fun dispatch(ev: MotionEvent): Boolean {
        return onTouch(ev)
    }

    open fun onTouch(ev: MotionEvent): Boolean {
        return false
    }
}

class MViewGroup(private val child: MView) : MView() {
    private var isChildNeedEvent = false

    override fun dispatch(ev: MotionEvent): Boolean {
        var handled = false
        
        if (ev.actionMasked == MotionEvent.ACTION_DOWN) {
            clearStatus()
        
            handled = child.dispatch(ev)
            if (handled) isChildNeedEvent = true

            if (!handled) handled = onTouch(ev)
        } else {
            if (isChildNeedEvent) handled = child.dispatch(ev)
            if (!handled) handled = onTouch(ev)
        }
        
        if (ev.actionMasked == MotionEvent.ACTION_UP) {
            clearStatus()
        }
            
        return handled
    }
    
    private fun clearStatus() {
        isChildNeedEvent = false
    }

    override fun onTouch(ev: MotionEvent): Boolean {
        return false
    }
}
</code></pre>

<ol>
<li>增加了一个<code>isChildNeedEvent</code>状态，对是子View是否处理了<code>DOWN</code>事件进行记录</li>
<li>在收到<code>DOWN</code>事件的最开始和收到<code>UP</code>事件的最后，重置状态</li>
</ol>

<p>此时框架使用者还是只需要关心<code>onTouch</code>钩子，在需要处理事件时进行处理并返回<code>true</code>，其他事情框架都做好了</p>

<h3 id="toc_5">1.4.第四次试造</h3>

<p>上面的框架已经能完成基本的事件分发工作了，但下面这个需求，你尝试一下用现在框架能实现吗？<br/>
需求：<strong>在可滑动View中有一个可点击View，需要让用户即使按下的位置是可点击View，再进行滑动时，也可以滑动外面的的可滑动View</strong><br/>
<img src="media/15456255866253/15463679356863.jpg" alt="" style="width:380px;"/><br/>
这个需求其实非常常见，比如所有「条目可点击的滑动列表」就是这样的（微信/QQ聊天列表）</p>

<p>假如使用上面的框架：</p>

<ol>
<li>可滑动View会先把事件传到里边的可点击View</li>
<li>可点击View一看来事件了，我又能点击，那舍我其谁啊</li>
<li>然后外面的可滑动View就永远无法处理事件，也就无法滑动</li>
</ol>

<p>所以直接使用现在的模型去实现的「条目可点击的滑动列表」，它会永远滑动不了</p>

<p>那怎么办呢？</p>

<ol>
<li>难道要让里面的可点击View去感知一下（层层往上找），自己是不是被一个能消费事件的View包裹？是的话自己就不消费事件了？

<ol>
<li>这肯定是不行的，先不说子View层层反向遍历父亲是不是个好实现，至少不能外面是可以滑动的，里边View的点击事件就全部失效</li>
</ol></li>
<li>或者我们调整<code>dispatch</code>方法在传入事件过程中的人设，让它不是只能往里传递事件，而是在自己能消费事件的时候把事件给自己

<ol>
<li>这肯定也是不行的，跟第一个办法的主要问题一样</li>
</ol></li>
</ol>

<p>直接想实现觉得到处是矛盾，找不到突破口，那就从头开始吧，从什么样的触摸反馈是用户觉得自然的出发，看看这种符合直觉的反馈方案是否存在，找出来它是什么，再考虑我们要怎么实现</p>

<ol>
<li>当用户面对一个滑动View里有一个可点击View，当他摸在可点击View上时，他是要做什么？</li>
<li>显然，只有两个可能性，要么用户想点这个可点击View，要么用户想滑动这个可滑动View</li>
<li>那么，当用户刚用手指接触的时候，也就是<code>DOWN</code>事件刚来的时候，能判断用户想干什么吗？很抱歉，不能</li>
<li>所以，客观条件下，你就是不可能在<code>DOWN</code>事件传过来的时候，判断出用户到底想做什么，于是两个View其实都不能确定自己是否要消费事件</li>
</ol>

<p><del>我*，这不傻*了吗，还搞什么GUI啊，大家都用命令行吧</del><br/>
等等，不要着急，GUI还是得搞的，不搞没饭吃的我跟你讲，所以你还是得想想，想尽办法去做到</p>

<p>你先忘记前面说的原则，你想想，不考虑其他因素，也不是只能用<code>DOWN</code>事件，只要你能判断用户的想法就行，你有什么办法</p>

<ol>
<li>办法肯定是有的，你可以多等一会，看用户接下来的行为能匹配哪种操作模式

<ol>
<li>点击是这样：用户先<code>DOWN</code>，然后<code>MOVE</code>很小一段，也不会MOVE出这个子View，关键是比较短的时间就<code>UP</code></li>
<li>滑动是这样：用户先<code>DOWN</code>，然后开始<code>MOVE</code>，这时候可能会MOVE出这个子View，也可能不，但关键是比较长的时间也没有在<code>UP</code>，一直是在<code>MOVE</code></li>
</ol></li>
<li>所以你的结论是，<strong>只有<code>DOWN</code>不行，还得看接下来的事件流，得走着瞧</strong></li>
<li>再多考虑个长按的情况，总结就是：

<ol>
<li>如果在某个时间内<code>UP</code>，就是点击里边的View</li>
<li>如果比较长的时间<code>UP</code>，但没怎么<code>MOVE</code>，就是长按里边的View</li>
<li>如果在比较短的时间<code>MOVE</code>比较长的距离，就是滑动外面的View</li>
</ol></li>
</ol>

<p>看上去这个方案很不错，安排得明明白白，但我们现有的事件处理框架实现不了这样的判断方案，存在以下冲突点：</p>

<ol>
<li>因为你无法在<code>DOWN</code>的时候判断当前事件流的归属，所以一开始子View和父View都只能返回<code>false</code>，但为了能对后续事件做判断，你又希望事件继续流过它们，这就与当前的框架冲突了</li>
<li>然后事件流了一会，子View和父View可能都会对事件的归属做出自己的判断，然后就看谁先下手消费事件，下手早的就需要通知另一方你下手晚了，我先要了，但问题来了：

<ol>
<li>如果子View先下手，就要通知父View别要事件了，这比较简单，就是返回<code>true</code>，不与当前框架冲突</li>
<li>如果父View要了事件，要通知子View别要了，目前的框架是做不到的，做的话需要调整dispatch在传入事件过程中的人设，需要能在往里传递事件前加一个拦截，能够看情况直接给自己的onTouch处理</li>
</ol></li>
</ol>

<p>所以要实现这个判断方案，就肯定要对现在的事件处理框架进行修改，而且看上去一不小心就会大改</p>

<ol>
<li>仔细想想，大概有这样两个改动相对小的思路：

<ol>
<li>思路一：

<ol>
<li>当事件走到可滑动父View的时候，它先处理事件，并且把事件攒着</li>
<li>当攒了几个事件，判断出不是自己要的时候，再把事件一股脑给子View，触发里边的点击事件</li>
</ol></li>
<li>思路二：

<ol>
<li>当事件走到到可滑动父View的时候，它先把事件往里传，里边可能会处理事件，可能不会，可滑动父View都先不关心</li>
<li>但可滑动父View也不是放手不管，它开始暗中观察

<ol>
<li>假如里边处理事件，它就会绷紧神经准备伺机而动，先观察事件是不是符合触发自己消费事件的模式，一旦发现符合条件的事件模式，它就把事件拦截下来，即使里边在处理，它也不往里<code>disptach</code>了，而是直接给自己的<code>onTouch</code></li>
<li>假如里边不处理事件，那啥问题没有，它直接处理事件就好了</li>
</ol></li>
</ol></li>
</ol></li>
<li>两个思路总结一下：

<ol>
<li>思路一：外面的父View先拦事件，如果判断拦错了，再把事件往里发</li>
<li>思路二：外面的父View先不拦事件，在判断应该拦的时候，突然把事件拦下来</li>
</ol></li>
<li>这两个思路看似都要对当前框架做改变，看似差不多，但其实还是有比较明显的优劣的

<ol>
<li>思路一问题比较明显：

<ol>
<li>父View把事件拦下来了，然后发现拦错了再给子View，但其实子View又并不一定能消费事件，这不就是白做一步吗</li>
<li>等到子View不处理事件，又把事件们还给父View，它还得继续处理事件</li>
<li>整个过程不仅繁琐，而且会让开发者感觉到别扭</li>
<li>所以这个思路是不行的，还得是把事件先给子View</li>
</ol></li>
<li>思路二就相对正常多了，只有一个问题（下一节再讲，你可以猜一猜，这里我先当没发现），而且框架要做的改变也很少：

<ol>
<li>父View在往里<code>dispatch</code>事件前，增加一个分析拦截方法，开发者可以覆写这个方法，加入自己的事件模式分析代码，并且可以在确定要拦截的时候进行拦截

<ol>
<li>把分析拦截逻辑抽成一个方法非常合理：什么时候拦，什么时候不拦，内里的逻辑很多，但对外暴露的API可以很小，非常适合抽出去</li>
</ol></li>
<li>在确定自己要拦截事件的时候，即使里边在一开始消费了事件，也不把事件往里传了，直接给自己的<code>onTouch</code></li>
</ol></li>
</ol></li>
</ol>

<p>示意图：<br/>
<img src="media/15456255866253/15463679714860.jpg" alt="" style="width:400px;"/></p>

<p>于是使用思路二，能写出以下代码：</p>

<pre><code class="language-kotlin">open class MView {
    open fun dispatch(ev: MotionEvent): Boolean {
        return onTouch(ev)
    }

    open fun onTouch(ev: MotionEvent): Boolean {
        return false
    }
}

class MViewGroup(private val child: MView) : MView() {
    private var isChildNeedEvent = false
    private var isSelfNeedEvent = false

    override fun dispatch(ev: MotionEvent): Boolean {
        var handled = false

        if (ev.actionMasked == MotionEvent.ACTION_DOWN) {
            clearStatus()
            
            if (onIntercept(ev)) {
                isSelfNeedEvent = true
                handled = onTouch(ev)
            } else {
                handled = child.dispatch(ev)
                if (handled) isChildNeedEvent = true

                if (!handled) {
                    handled = onTouch(ev)
                    if (handled) isSelfNeedEvent = true
                }
            }
        } else {
            if (isSelfNeedEvent) {
                handled = onTouch(ev)
            } else if (isChildNeedEvent) {
                if (onIntercept(ev)) {
                    isSelfNeedEvent = true
                    handled = onTouch(ev)
                } else {
                    handled = child.dispatch(ev)
                }
            }
        }

        if (ev.actionMasked == MotionEvent.ACTION_UP) {
            clearStatus()
        }
        
        return handled
    }

    private fun clearStatus() {
        isChildNeedEvent = false
        isSelfNeedEvent = false
    }

    override fun onTouch(ev: MotionEvent): Boolean {
        return false
    }

    open fun onIntercept(ev: MotionEvent): Boolean {
        return false
    }
}
</code></pre>

<p>写的过程中增加了一些对细节的处理：</p>

<ol>
<li>不仅是在<code>DOWN</code>事件的<code>dispatch</code>前需要拦截，在后续事件中，也需要加入拦截，否则无法实现中途拦截的目标</li>
<li>在某一个事件判断拦截之后，还需要在后续事件中再判断一次是否要拦截吗？

<ol>
<li>完全不需要，我们希望的就是在一次触摸中，尽可能只有1个对象去消费事件，决定是你了，那就不要变</li>
<li>所以增加一个<code>isSelfNeedEvent</code>记录自己是否拦截过事件，如果拦截过，后续事件直接就交给自己处理</li>
</ol></li>
<li>在后续事件时，子View没有处理事件，外面也不再处理了，同样因为只能有一个View处理，（Actvity会处理这样的事件，后面会提到）</li>
</ol>

<p>这一下代码是不是看上去瞬间复杂了，但其实只是增加了一个事件拦截机制，对比上一次试造的轮子，会更容易理解（要是Markdown支持代码块内自定义着色就好了）<br/>
而且对于框架的使用者来说，关注点一样非常少</p>

<ol>
<li>重写<code>onIntercept</code>方法，判断什么时候需要拦截事件，需要拦截时返回<code>true</code></li>
<li>重写<code>onTouch</code>方法，如果处理了事件，返回<code>true</code></li>
</ol>

<h3 id="toc_6">1.5.第五次试造</h3>

<p>上面的处理思路虽然实现了需求，但可能会导致一个问题：里边的子View接收了一半的事件，可能都已经开始处理并做了一些事情，父View忽然就不把后续事件给它了，会不会违背用户操作的直觉？甚至出现更奇怪的现象？</p>

<!--但会造成一个非常明显的与原则违背的情况，那就是可能不止一个View会消费到事件，两个View，三个View，甚至极端情况多个View都有可能
（因为两个和多个是一样的，下文只用两个View的情况举例）-->

<p>这个问题确实比较麻烦，分两类情况讨论</p>

<ol>
<li>里边的View接收了一半事件，但还没有开始处理，或者在进行可以被取消的处理

<ol>
<li>比如对于一个可点击的View，View的默认实现是只要被touch了，就会有<code>pressed</code>状态，如果你设置了对应的<code>background</code>，你的View就会有高亮效果</li>
<li>这种高亮即使被中断也没事，不会让用户感觉到奇怪，不信你自己试试微信的聊天列表</li>
<li>但一个值得注意的点是，如果你只是直接不发送<code>MOVE</code>事件了，这会有问题，就这个按下高亮的例子，如果你只是不传<code>MOVE</code>事件了，那谁来告诉里边的子View取消高亮呢？所以你需要在中断的时候也传一个结束事件

<ol>
<li>但是，你能直接传一个<code>UP</code>事件吗？也是不行的，因为这样就匹配了里边点击的模式了，会直接触发一个点击事件，这显然不是我们想要的</li>
<li>于是外面需要给一个新的事件，这个事件的类型就叫取消事件好了<code>CANCEL</code></li>
</ol></li>
<li>总结一下，对于这种简单的可被取消情况，你可以这样去处理：

<ol>
<li>在确定要拦截的时候，在把真正的事件转发给自己的<code>onTouch</code>的同时，另外生成一个新的事件发给自己的子View，事件类型是<code>CANCEL</code>，它将是子View收到的最后一个事件</li>
<li>子View可以在收到这个事件后，对当前的一些行为进行取消</li>
</ol></li>
</ol></li>
<li>里边的View接收了一半事件，已经开始处理了，而且最好不要去取消，或者取消了会显得很怪

<ol>
<li>这个时候，事情会复杂一些，而且这个场景发生的远比你想象中的多，形式也多种多样，不处理好的后果也比只是让用户感觉上奇怪要严重得多，可能会有的功能会实现不了，下面举两个例子

<ol>
<li>在<code>ViewPager</code>里有三个page，page里是<code>ScrollView</code>，<code>ViewPager</code>可以横向滑动，page里的<code>ScrollView</code>可以竖向滑动

<ol>
<li>如果按前面逻辑，当<code>ViewPager</code>把事件给里边<code>ScrollView</code>之后，它也会偷偷观察，如果你一直是竖向滑动，那没话说，<code>ViewPager</code>不会触发拦截事件</li>
<li>但如果你竖着滑着滑着，手抖了，开始横滑（或者只是斜滑），<code>ViewPager</code>就会开始紧张，想「组织终于决定是我了吗？真的假的，那我可就不客气了」，于是在你斜滑一定距离之后，忽然发现，你划不动<code>ScrollView</code>了，而<code>ViewPager</code>开始动</li>
<li>原因就是<code>ScrollView</code>的竖滑被取消了，<code>ViewPager</code>把事件拦下来，开始横滑</li>
<li>这个体验还是比较怪的，会有种过于灵敏的感觉，会让用户只能小心翼翼地滑动</li>
</ol></li>
<li>在一个<code>ScrollView</code>里有一些按钮，按钮有长按事件，长按再拖动就可以移动按钮

<ol>
<li>（更常见的例子是一个列表，里边的条目可以长按拖动）</li>
<li>同样按前面的逻辑，当你长按后准备拖动按钮时，你怎么保证不让<code>ScrollView</code>把事件拦下来呢？</li>
</ol></li>
</ol></li>
<li>所以这类问题是一定要解决的，但要怎么解决呢

<ol>
<li>还是先从业务上看，从用户的角度看，当里边已经开始做一些特殊处理了，外面应不应该把事件抢走？

<ol>
<li>不应该对吧，OK，解决方针就是不应该让外边的View抢事件</li>
</ol></li>
<li>所以接下来的问题是：谁先判断出外边的View不该抢事件，里边的子View还是外边的父View？然后怎么不让外边的View抢？

<ol>
<li>首先，肯定是里边的View做出判断：这个事件，真的，外边的View你最好别抢，要不用户不开心了</li>
<li>然后里边就得告知外边，你别抢了，告知可以有几个方式

<ol>
<li>外边抢之前问一下里边，我能不能抢</li>
<li>里边在确定这个事件不能被抢之后，从<code>dispatch</code>方法返回一个特别的值给外边（之前只是<code>true</code>和<code>false</code>，现在要加一个）</li>
<li>里边通过别的方式通知外边，你不要抢</li>
</ol></li>
<li>讲道理，我觉得三个方式都行，但第三个方式最为简单直接，而且不用改之前的大逻辑，Android也使用了这个方式，父View给子View提供了一个方法<code>requestDisallowInterceptTouchEvent</code>，子View调用它改变父View的一个状态，然后父View每次在准备拦截前都会判断这个状态，当然这个状态只对当前事件流有效</li>
<li>然后，这个情况还得再注意一点，它应该是向外递归的，也就是，在复杂的情况中，有可能有多个上级在暗中观察，当里边的View决定要处理事件而且不准备交出去的时候，外面所有的暗中观察的父View都应该把脑袋转回去</li>
</ol></li>
</ol></li>
</ol></li>
</ol>

<!--但如果你竖着滑着滑着，手抖了，开始横滑（或者只是斜滑），`ViewPager`就会开始紧张，想「主人你这是要临幸我吗？真的假的，那我可就不客气了」，于是在你斜滑一定距离之后，忽然发现，你划不动`ScrollView`了，而`ViewPager`开始动-->

<p>所以，连同上一次试造，总结一下</p>

<ol>
<li>对于多个可消费事件的View进行嵌套的情况，怎么判定事件的归属会变得非常麻烦，无法立刻在<code>DOWN</code>事件时就确定，只能在后续的事件流中进一步判断</li>
<li>于是在没判断归属的时候，先由里边的子View消费事件，外面暗中观察，然后两方同时对事件类型做进一步匹配，并准备在匹配成功后对事件归属进行抢拍</li>
<li>抢拍是先抢先得

<ol>
<li>父亲先抢到，发个<code>CANCEL</code>事件给儿子就完了</li>
<li>儿子先抢到，就得大喊大叫，撒泼耍赖，爸爸们行行好吧，最后得以安心处理事件</li>
</ol></li>
</ol>

<p>另外有几个值得一提的地方：</p>

<ol>
<li>这种先抢先得的方式感觉上有点乱来是吧，但也没有更好的办法了，一般都是调试者自己根据实际用户体验调整，让父亲或儿子，在最适合的时机准确及时地抢到应得的事件</li>
<li>父View在拦截下事件后，把接下来的事件传给<code>onTouch</code>，<code>onTouch</code>只会收到后半部分的事件，这样会不会有问题呢？

<ol>
<li>确实直接给后半部分会有问题，所以一般情况是，在没拦截的时候就做好如果要处理事件的一些准备工作，以便之后拦截事件了，只使用后半部分事件也能实现符合用户直觉的反馈</li>
</ol></li>
</ol>

<!--（@@@上面第一点这块是这样吗？）-->

<!--1. 源码对于在可滑动View中的子View这种情况，还进一步做了一处体验上的优化：
    - 正常里边的子View在按下就会直接显示按下状态，只是只有在马上抬起时才表现为点击，如果只是`MOVE`不抬起，那就是滑外面了，就取消按下状态
    - 这样可行，但Android觉得这个体验还是不够好，于是会让里边的子View感知自己是不是在一个可滑动View里边，如果是的话，它不会下按下直接显示按下状态，而是稍微晚那么一点点显示出啦，提升了一点用户体验-->

<p>到现在，代码就跟一开始贴出的麻雀一模一样了：</p>

<pre><code class="language-kotlin">interface ViewParent {
    fun requestDisallowInterceptTouchEvent(isDisallowIntercept: Boolean)
}

open class MView {
    var parent: ViewParent? = null

    open fun dispatch(ev: MotionEvent): Boolean {
        return onTouch(ev)
    }

    open fun onTouch(ev: MotionEvent): Boolean {
        return false
    }
}

open class MViewGroup(private val child: MView) : MView(), ViewParent {
    private var isChildNeedEvent = false
    private var isSelfNeedEvent = false
    private var isDisallowIntercept = false

    init {
        child.parent = this
    }

    override fun dispatch(ev: MotionEvent): Boolean {
        var handled = false
        
        if (ev.actionMasked == MotionEvent.ACTION_DOWN) {
            clearStatus()
            
            // add isDisallowIntercept
            if (!isDisallowIntercept &amp;&amp; onIntercept(ev)) {
                isSelfNeedEvent = true
                handled = onTouch(ev)
            } else {
                handled = child.dispatch(ev)
                if (handled) isChildNeedEvent = true

                if (!handled) {
                    handled = onTouch(ev)
                    if (handled) isSelfNeedEvent = true
                }
            }
        } else {
            if (isSelfNeedEvent) {
                handled = onTouch(ev)
            } else if (isChildNeedEvent) {
                // add isDisallowIntercept
                if (!isDisallowIntercept &amp;&amp; onIntercept(ev)) {
                    isSelfNeedEvent = true

                    // add cancel
                    val cancel = MotionEvent.obtain(ev)
                    cancel.action = MotionEvent.ACTION_CANCEL
                    handled = child.dispatch(cancel)
                    cancel.recycle()
                } else {
                    handled = child.dispatch(ev)
                }
            }
        }
        
        if (ev.actionMasked == MotionEvent.ACTION_UP 
            || ev.actionMasked == MotionEvent.ACTION_CANCEL) {
            clearStatus()
        }
        
        return handled
    }
    
    private fun clearStatus() {
        isChildNeedEvent = false
        isSelfNeedEvent = false
        isDisallowIntercept = false
    }

    override fun onTouch(ev: MotionEvent): Boolean {
        return false
    }

    open fun onIntercept(ev: MotionEvent): Boolean {
        return false
    }

    override fun requestDisallowInterceptTouchEvent(isDisallowIntercept: Boolean) {
        this.isDisallowIntercept = isDisallowIntercept
        parent?.requestDisallowInterceptTouchEvent(isDisallowIntercept)
    }
}
</code></pre>

<p>这次改动主要是增加了发出<code>CANCEL</code>事件和<code>requestDisallowInterceptTouchEvent</code>机制</p>

<ol>
<li>在发出<code>CANCEL</code>事件时有一个细节：没有在给child分发<code>CANCEL</code>事件的同时继续把原事件分发给自己的<code>onTouch</code>

<ol>
<li>这是源码中的写法，不是我故意的，可能是为了让一个事件也只能有一个View处理，避免出现bug</li>
</ol></li>
<li>实现<code>requestDisallowInterceptTouchEvent</code>机制时，增加了<code>ViewParent</code>接口

<ol>
<li>不使用这种写法也行，但使用它从代码整洁的角度看会更优雅，比如避免反向依赖，而且这也是源码的写法，于是直接搬来了</li>
</ol></li>
</ol>

<p>虽然目前整个框架的代码有点复杂，但对于使用者来说，依然非常简单，只是在上一版框架的基础上增加了：</p>

<ol>
<li>如果View判断自己要消费事件，而且执行的是不希望被父View打断的操作时，需要立刻调用父View的<code>requestDisallowInterceptTouchEvent</code>方法</li>
<li>如果在<code>onTouch</code>方法中对事件消费并且做了一些操作，需要注意在收到<code>CANCEL</code>事件时，对操作进行取消</li>
</ol>

<p>到这里，事件分发的主要逻辑已经讲清楚了，不过还差一段Activity中的处理，其实它做的事情类似ViewGroup，只有这几个区别：</p>

<ol>
<li>不会对事件进行拦截</li>
<li>只要有子View没有处理的事件，它都会交给自己的<code>onTouch</code></li>
</ol>

<p>所以补上Activity的麻雀：</p>

<pre><code class="language-kotlin">open class MActivity(private val childGroup: MViewGroup) {
    private var isChildNeedEvent = false
    private var isSelfNeedEvent = false

    open fun dispatch(ev: MotionEvent): Boolean {
        var handled = false

        if (ev.actionMasked == MotionEvent.ACTION_DOWN) {
            clearStatus()

            handled = childGroup.dispatch(ev)
            if (handled) isChildNeedEvent = true

            if (!handled) {
                handled = onTouch(ev)
                if (handled) isSelfNeedEvent = true
            }
        } else {
            if (isSelfNeedEvent) {
                handled = onTouch(ev)
            } else if (isChildNeedEvent) {
                handled = childGroup.dispatch(ev)
            }

            if (!handled) handled = onTouch(ev)
        }

        if (ev.actionMasked == MotionEvent.ACTION_UP
            || ev.actionMasked == MotionEvent.ACTION_CANCEL) {
            clearStatus()
        }

        return handled
    }

    private fun clearStatus() {
        isChildNeedEvent = false
        isSelfNeedEvent = false
    }

    open fun onTouch(ev: MotionEvent): Boolean {
        return false
    }
}
</code></pre>

<h3 id="toc_7">1.6.总结</h3>

<p>到这里，我们终于造好了一个粗糙但不劣质的轮子，源码的主要逻辑与它的区别不大，具体区别大概有：<code>TouchTarget</code>机制、多点触控机制、<code>nested scroll</code>、处理各种<code>listener</code>、结合View的状态进行处理等，相比主要逻辑，它们就没有那么重要了，之后有空会写关于多点触控和<code>TouchTarget</code>的内容<del>（看！热腾腾的坑！）</del></p>

<p>所以回头看，你会发现事件分发其实很简单，它的关键不在于「不同的事件类型、不同的View种类、不同的回调方法、方法不同的返回值」对事件分发是怎么影响的<br/>
关键在于<strong>「它要实现什么功能？对实现效果有什么要求？使用了什么解决方案？」</strong>，从这个角度，就能清晰而且简单地把事件分发整个流程梳理清楚</p>

<p>事件分发要实现的功能是：让合适的View去消费触摸事件，对用户的操作进行反馈，使之符合用户的直觉</p>

<p>从用户的直觉出发能得到这么两个要求</p>

<ol>
<li>用户的一次操作只有一个View去消费</li>
<li>让消费事件的View跟用户的意图一致</li>
</ol>

<p>第二个要求是最难的，如果有多个View都可以消费触摸事件，怎么判定哪个View更适合消费，并且把事件交给它<br/>
于是简单但有效地使用了一套先到先得的策略，让多个可消费触摸事件的View拥有近乎平等的竞争消费者的资格：它们都能接收到事件，并在自己判定应该消费事件的时候去发起竞争申请，申请成功后事件就全部由它消费</p>

<h2 id="toc_8">2.测试轮子</h2>

<p>可能有人会问，听你纸上谈兵了半天，你讲的真的跟源码一样吗，这要是不对我不是亏大了<br/>
问的好，所以接下来我会使用一个测试事件分发的日志测试框架对这个小麻雀进行简单的测试，而且后面还会有实践部分真刀真枪地把上面讲过的东西练起来<br/>
@@@</p>

<h2 id="toc_9">3.实践</h2>

<p>实际上进行事件分发的实践时，会包括两方面内容：</p>

<ol>
<li>一方面是就是控制事件的分发。这也是本文讲的主要内容，这NestedScrolling部分基本得靠自己对事件分发的认识然后自己手写</li>
<li>另一方面是对事件的处理。核心内容是手势的识别，比如识别用户的操作是单击、双击、长按、滑动，这部分也可以自己手写，不会太难，但一般场景中我们都可以使用SDK提供的十分好用的帮助类<code>GestureDetector</code>，它用起来非常方便</li>
</ol>

<p>所以下面的实践虽然会包含这两方面，但关键是怎么控制事件的分发，对手势的识别不是重点，我也会选择比较简单的</p>

<h3 id="toc_10">3.1.选题</h3>

<p>前面说了，事件分发的难点是有多个View都可以消费触摸事件的情况，这种情况一般被称为冲突，比如以前常见的<code>ScrollView</code>嵌套滑动冲突。除此之外，我们也提到过点击和滑动的冲突，但系统早就在<code>View</code>和<code>ViewGroup</code>里把这种情况给处理好了，要了解的同学可以直接去看源码。当然也还有很多其他类型的冲突，但下面还是准备讲跟滑动有关的冲突，它相对更加常见，虽然现在<code>NestedScrolling</code>机制已经把同向滑动冲突处理得非常优秀了，但某些场景下这种机制也会有一些小缺点，在下面要讲的例子里你就能看到它的小缺点们</p>

<!--
前面说了，事件分发的难点是有多个View都可以消费触摸事件的情况，这种情况一般被称为冲突，比如以前常见的`ScrollView`嵌套滑动冲突。除此之外，我们也提到过点击和滑动的冲突，但系统早就在`View`和`ViewGroup`里把这种情况给处理好了，要了解的同学可以直接去看源码。当然也还有很多其他类型的冲突，但下面还是准备讲跟滑动有关的冲突，它相对更加常见一些，虽然现在`NestedScrolling`机制已经把同向滑动冲突处理得非常优秀了，但某些场景下它也会有一些小缺点，而且滑动冲突的场景可以非常丰富，处理起来非常灵活，比较值得一讲

3.1.方向不同的嵌套滑动

这是一个非常常见的情况，处理起来也比较容易

3.2.方向相同的嵌套滑动

3.3.可滑动View中的长按拖动

3.4.悬停布局
-->

<p>所以最后本文选择的实践例子是：悬停布局<br/>
你叫它粘性布局、悬浮布局、折叠布局都行，总之它理想的效果应该是这样：<br/>
<img src="media/15456255866253/2019-01-03_00-03-20%20-1-.gif" alt="" style="width:320px;"/></p>

<p>用文字描述是这样：</p>

<ol>
<li>页面内容分为Header、悬停区和内容区，其中内容区可以左右滑动，有多个Tab页，而且每个Tab页是允许上下滑动的</li>
<li>用户向上滑动时，先折叠Header，当Header全部折叠收起后，悬停区悬停不动，内容区向上滑动</li>
<li>用户向下滑动时，先把内容区向下滑动，然后展开Header，悬停区顺势下移</li>
<li>其中内容区的滑动和Header的收起展开在用户连续滑动时应该表现为连续的，甚至在用户滑动中快速抬起时，滑动的惯性也需要在两个动作间保持连续</li>
</ol>

<p>在当前这个时间点（2019.1.1），这个例子还有不少实际意义，因为它虽然是比较常见的一个交互效果，但现在市场上的主流APP，居然是这样的...（饿了么v8.9.3）<br/>
<img src="media/15456255866253/2019-01-02_03-26-12%20-2-.gif" alt="" style="width:300px;"/><br/>
这样的...（知乎v5.32.2）<br/>
<img src="media/15456255866253/2019-01-02_03-48-02%20-1-.gif" alt="" style="width:300px;"/><br/>
这样的...（腾讯课堂v3.24.0.5）<br/>
<img src="media/15456255866253/2019-01-02_04-13-04%20-1-.gif" alt="" style="width:300px;"/><br/>
这样的...（哔哩哔哩v5.36.0）<br/>
<img src="media/15456255866253/2019-01-02_04-01-41%20-1-.gif" alt="" style="width:300px;"/><br/>
&lt;!--（可以加上个奇怪的个人主页@@@）--&gt;<br/>
<img src="media/15456255866253/15463731835178.jpg" alt=""/></p>

<p>其中哔哩哔哩的视频详情页和美团（没有贴图）算是做得最好的，滑动连续惯性也连续，但也存在两个小瑕疵：在Header部分上下滑动时你可以同时进行左右滑动；在惯性滑动没有停止的时候无法进行左右滑动<br/>
而腾讯课堂的问题是最普遍的：惯性不连续<br/>
最奇葩是饿了么的店铺首页和知乎的Live详情页，都是创收的页面啊，居然能自带鬼畜，好吧，也是心大<br/>
其他还有一些千奇百怪的bug就不举例了</p>

<p>所以，就让我们来看看，这个功能实现起来是不是真有那么难<br/>
&lt;!--（然而并不难，下面会有50行的类哔哩哔哩的实现以及100行的无bug实现@@@去掉这句）--&gt;</p>

<h3 id="toc_11">3.2.需求分析</h3>

<p>如果内容区只有一个Tab页，一种简单直接的实现思路是：页面整个就是一个滑动控件，悬停区域会在滑动过程中不断调整自己的位置，实现悬停的效果<br/>
它的实现非常简单，效果也完全符合要求，不举例了，可以自己试试</p>

<p>但这里的需求是有多个Tab页，它用一整个滑动控件的思路是无法实现的，需要用多个滑动控件配合实现</p>

<ol>
<li>先看看有哪些滑动控件：每个Tab页内肯定是独立的滑动控件，要实现Header的展开收起，可以把整个容器作为一个滑动控件</li>
<li>这就变成了一个外部滑动控件和一组内部滑动控件进行配合，看上去有点复杂，但实际上在一次用户滑动过程中，只有一个外部滑动控件和一个内部滑动控件进行配合</li>
<li>配合过程是这样的（可以回头看下前面的理想效果动态图）：

<ol>
<li>用户上滑，外部滑动控件先消费事件进行上滑，直到滑动到Header的底部，外部滑动控件滑动结束，把滑动事件交给内部滑动控件，内部滑动控件继续滑动</li>
<li>用户下滑，内部滑动控件先消费事件进行下滑，直到滑动到内部控件的顶部，内部滑动控件滑动结束，把滑动事件交给外部滑动控件，外部滑动控件继续滑动</li>
<li>当用户滑动过程中快速抬起进行惯性滑动的时候，也需要遵循上面的配合规律</li>
</ol></li>
</ol>

<p>乍一听你可能觉得这个需求不太对劲，确实，从大的角度看，用户的一次触摸操作，却让多个View先后对其进行消费，它违背了我们最初的原则，也超出了Android触摸事件处理框架提供的功能：父View没用完的事件子View继续用，子View没用完的事件父View继续用</p>

<p>但具体到这个需求中</p>

<ol>
<li>首先，两个滑动控件配合消费事件的期望效果是，同内容区只有一个Tab页一样，让用户感知上认为自己在滑动一整个控件，只是其中某个部分会悬停，它并没有违背用户的直觉。所以，经过精心设计，多个View消费同一个事件流，也是可以符合用户直觉的，在这个领域表现最突出的就是<code>CoordinatorLayout</code>了，它就是用来帮助开发者去实现他们精心设计的多个View消费同一个事件流的效果的</li>
<li>然后，由于滑动反馈的简单性，让多个滑动控件的滑动进行配合也是能够做到的。你可以自己实现，也可以借助API 21（已加入V4兼容包）开始提供的<code>NestedScrolling</code>机制，它提供了一种优雅解决嵌套滑动问题的方案，方案的核心就是让多个滑动控件配合滑动，所以使用它也能实现这里的需求，另外<code>CoordinatorLayout</code>让多个滑动控件配合对同一个事件流进行消费也是使用了<code>NestedScrolling</code>机制</li>
</ol>

<p>OK，既然需求提得没问题，而且我们也能实现，那下面就来看看具体要怎么实现</p>

<h3 id="toc_12">3.3.需求实现</h3>

<p>可能有同学马上就举手了：我知道我知道，用<code>CoordinatorLayout</code>！<br/>
对，当前这个效果最常见的实现方式就是使用基于<code>CoordinatorLayout</code>的<code>AppBarLayout</code>全家桶，这是它的自带效果，通过简单配置就能实现，而且还附送更多其他特效，非常酷炫，前面看到的效果比较好的哔哩哔哩视频详情页就是用它实现的<br/>
而<code>AppBarLayout</code>实现这个功能的方式其实是使用了<code>CoordinatorLayout</code>提供的<code>NestedScrolling</code>机制，如果你嫌弃<code>AppBarLayout</code>全家桶太重了，只想单独实现悬停功能，如前文所述，你也可以直接使用<code>NestedScrolling</code>机制去实现</p>

<p>这里就先使用<code>NestedScrolling</code>机制来实现出一个类似哔哩哔哩这样效果的悬停布局吧</p>

<h4 id="toc_13">3.3.2.使用 NestedScrolling 机制实现悬停布局</h4>

<p>如果有对<code>NestedScrolling</code>机制还不是很了解的同学，可以参考我的另一篇篇透镜<a href="http://blog.rubitree.com/15467469615604.html">《看穿 &gt; NestedScrolling 机制》</a></p>

<p><code>NestedScrolling</code>机制帮我们做了太多事情，我们只需要实现一个简单的 <code>ns parent</code> 就好了<br/>
代码简单得我都不想多说了，关键代码就是这些，完整代码可以看这里：</p>

<p>另外，第一版的<code>NestedScrolling</code>机制惯性不连续，第二版虽然也有其他Bug，但是已经不会影响到这个项目中的体验了，所以能用第三版机制最好，用第二版也没问题</p>

<p>实现效果是这样：</p>

<h4 id="toc_14">3.3.3.使用外部 View 主导手动实现悬停布局</h4>

<p>上面使用<code>NestedScrolling</code>机制的实现非常简单，而且效果也不错<br/>
但如果你要追求更好的效果和体验，这个通用的机制可能就做不到了</p>

<!--比如上面我们看到的哔哩哔哩视频页，能看到与`ViewPager`有点不太配合
同时对于@@@类似美团这样头图特别长的页面，滑动头图不会带动整个下面滑动，也是比较影响体验的一件事

那怎么办，对于

但如果我们要做这些事情，别忘了我们也可以手动去做

手动做还是有两种思路，一种是判断是否拦截事件，另一种是就是拦截然后外部控制-->

<h2 id="toc_15">4.附录</h2>

<p>4.1.事件分发经典伪代码</p>

<pre><code class="language-java">public boolean dispatchTouchEvent(MotionEvent event) {
    boolean consume = false;
    if (onInterceptTouchEvent(event)) {
        consume = onTouchEvent(event);
    } else {
        consume = child.dispatchTouchEvent(event);
    }
    return consume;
}
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【透镜系列】看穿 > Canvas变换]]></title>
    <link href="http://blog.rubitree.com/15444051477462.html"/>
    <updated>2018-12-10T09:25:47+08:00</updated>
    <id>http://blog.rubitree.com/15444051477462.html</id>
    <content type="html"><![CDATA[
<p><img src="media/15444051477462/flip.gif" alt=""/><br/>
<img src="media/15444051477462/stear.gif" alt=""/><br/>
<img src="media/15444051477462/STE3.gif" alt=""/></p>

<span id="more"></span><!-- more -->

<hr/>

<p>目录：</p>

<ul>
<li>
<a href="#toc_0">引子</a>
</li>
<li>
<a href="#toc_1">1、二维空间中图形变换的朴素表示</a>
<ul>
<li>
<a href="#toc_2">1.1.图形变换的本质</a>
</li>
<li>
<a href="#toc_3">1.2.常见变换的变换函数</a>
</li>
</ul>
</li>
<li>
<a href="#toc_4">2、变换的矩阵表示</a>
<ul>
<li>
<a href="#toc_5">2.1.常见变换的矩阵表示</a>
</li>
<li>
<a href="#toc_6">2.2.变换叠加 与 仿射变换的线性表示</a>
<ul>
<li>
<a href="#toc_7">2.2.1.变换叠加</a>
</li>
<li>
<a href="#toc_8">2.2.2.线性变换和仿射变换</a>
</li>
<li>
<a href="#toc_9">2.2.3.通过线性变换来表示仿射变换</a>
</li>
</ul>
</li>
<li>
<a href="#toc_10">2.3.使用矩阵表示变换的缺点</a>
</li>
</ul>
</li>
<li>
<a href="#toc_11">3、变换的叠加</a>
<ul>
<li>
<a href="#toc_12">3.1.另一种叠加新变换的方式</a>
</li>
<li>
<a href="#toc_13">3.2.小鱼叠加的数学表示</a>
</li>
<li>
<a href="#toc_14">3.3.小鱼叠加的第一个问题</a>
</li>
<li>
<a href="#toc_15">3.4.小鱼叠加的第二个问题</a>
</li>
</ul>
</li>
<li>
<a href="#toc_16">4、Canvas变换</a>
<ul>
<li>
<a href="#toc_17">4.1.Canvas绘制模型</a>
</li>
<li>
<a href="#toc_18">4.2.不好用的Canvas变换API 和 神奇操作</a>
</li>
<li>
<a href="#toc_19">4.3.通过Matrix对Canvas进行变换</a>
</li>
</ul>
</li>
<li>
<a href="#toc_20">5、带偏移中心的操作</a>
<ul>
<li>
<a href="#toc_21">小千叠加一个带偏移中心的旋转操作</a>
</li>
<li>
<a href="#toc_22">小鱼叠加一个带偏移中心的旋转操作</a>
</li>
</ul>
</li>
<li>
<a href="#toc_23">二维Canvas变换实践</a>
</li>
<li>
<a href="#toc_24">6、Camera与准三维变换模型</a>
<ul>
<li>
<a href="#toc_25">理解</a>
</li>
<li>
<a href="#toc_26">实践</a>
</li>
</ul>
</li>
<li>
<a href="#toc_27">在iOS和HTML5中的Canvas变换</a>
</li>
</ul>


<hr/>

<h2 id="toc_0">引子</h2>

<ol>
<li><p><code>Canvas</code>变换是我们开发自定义控件时非常熟悉的操作，<code>Canvas</code>提供的变换操作有：平移、缩放、旋转、错切。对<code>Canvas</code>进行变换后，再在<code>Canvas</code>上进行绘制，绘制出的图形就能体现出刚才变换的效果</p>

<ol>
<li><p>比如往 \(X\) 轴和 \(Y\) 轴的正方向平移100像素：</p>

<pre><code>canvas.translate(100f, 100f)
canvas.drawBitmap(image)
</code></pre>

<p><img src="media/15444051477462/15449657481603.gif" alt=""/><br/>
（注：图中每一个小方格间距50像素，每两个小方格间有一个刻度，代表100像素，后文示例的坐标系均是如此，不再重复说明）</p></li>
</ol></li>
<li><p>但在我们要实现一些稍微复杂的连续变换时，比如不使用带偏移中心的API，把图形绕<code>(200, 200)</code>顺时针旋转90度；或是使用<code>Camera</code>进行连续变换以实现绕图片的中线翻转；或者其他更复杂的需求时，你会发现，按照正常思路，往往无法得到你想要的效果</p></li>
<li><p>于是你可能会被告知：把代码当成是倒着执行的，所以你先正着写，再把操作顺序倒过来，就能实现你的需求了</p>

<p>但是这样为什么能实现需求？为什么代码是倒着执行的？正着倒着是相对什么来的，为什么正着我也能写出好几种变换顺序？为什么有的时候代码又是正着执行的？为什么有的时候这个方法还是没有实现预期的效果？这些问题可能还是很让你头大</p></li>
<li><p>然后你可能也听说过，对<code>Canvas</code>进行变换还可以通过操作<code>Matrix</code>实现，但是具体怎么做，它的<code>preXXX</code>和<code>postXXX</code>操作到底代表了什么意思，你可能不是很明白</p></li>
<li><p>最后你可能还知道可以通过<code>Camera</code>进行三维变换，但是变换的效果往往出乎你的预料</p></li>
<li><p>所以本文的目标就是要把这些问题分析清楚，让你真正理解<code>Canvas</code>变换究竟是怎么运作的，以及为什么这么运作，通过理解它们，你就能使用<code>Canvas</code>容易地实现那些简单的需求，甚至如题图那样看上去复杂的效果也不会难到你</p></li>
</ol>

<!--。如果你确定对于这些问题你都理解得非常清楚，那看到这就该干嘛干嘛去吧~-->

<!--
另外注意

1. 本文的讲述方式是说来话长，以引导读者一步步更好地进行理解，所以有人可能会嫌弃太长了，另外还有一个长话短说的版本，可以看这里@@@
2. 理解本文甚至需要一点点矩阵知识，但只需要一点点而已了；甚至有少量的公式，但是小学数学水平就能看懂了；然后你就能得到上面所有问题的答案并完全理解，成为一个`Canvas`变换专家（233
3. 警告，你可能需要过很久才能看到下一句代码，对，前面很长的篇幅我都是在~~空口说白话~~讲原理
-->

<!--
真的承认了，其实正常很多操作都是相对的
save clip都可以放后篇

关键是这几个类：先就是Canvas
然后讲到直接操作Matrix就有了Matrix
再讲到Camera，就只有Camera了

列出它们的api就行了

然后例子就是
- 一次基本变换，直接绘制

-->

<h2 id="toc_1">1、二维空间中图形变换的朴素表示</h2>

<h3 id="toc_2">1.1.图形变换的本质</h3>

<ol>
<li>一切都要从图形变换的本质说起

<ol>
<li>图形变换的本质是一个函数： \( f(\{P\}) \) ，这里称之为变换函数</li>
<li>在二维空间中，它可以按维度拆分成两个函数 \( ( f(\{x\}), f(\{y\}) ) \)</li>
</ol></li>
<li><p>为什么就是个函数了？</p>

<ol>
<li><p>如果你还记得初中学的<a href="https://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B0">函数定义</a>：「在数学中，函数是两个集合间的一种对应关系：输入值集合中的每项元素皆能对应唯一一项输出值集合中的元素」<br/>
<img src="media/15444051477462/15444059731047.png" alt=""/></p></li>
<li><p>所以在这里</p>

<ol>
<li>\(\{P\}\) 就是输入值的集合，也就是初始的二维图形的所有点的位置集合

<ol>
<li>（在本文中，变换特指图形的变换，变换只影响点的位置，不影响点的内容(颜色)，所以 \(\{P\}\) 只是位置的集合）</li>
</ol></li>
<li>而 \( f(\{P\}) \) 是输出值的集合，也就是变换后的二维图形的所有点的位置集合</li>
</ol></li>
<li><p>在二维空间中，点的位置用 \(x,y\) 表示更为直观，所以下面都会用这样两个函数 \( ( f(\{x\}), f(\{y\}) )  \) 表示变换，它也可以简单写为 \( ( f(x), f(y) )  \) </p></li>
</ol></li>
<li><p>误区</p>

<ol>
<li>不要以为变换用两个简单的函数 \(  ( f(x), f(y) )  \) 表达，就认为变换只能做一些简单的事情

<ol>
<li>因为 \(f(x)\) 不仅可以是 \(x+1\)、\(2x\)，也可以是 \(x^2\)、\(sinx\)，甚至它可以是一个大型分段函数，针对每一个像素的初始 \(x\) 值，都有专门的结果值对应（\(f(y)\)同理）</li>
<li>所以，你可以用这两个函数表达出任何你能想到的变换</li>
</ol></li>
</ol></li>
</ol>

<h3 id="toc_3">1.2.常见变换的变换函数</h3>

<p>接下来我们看一下常见的变换如何用变换函数 \( ( f(x), f(y) ) \) 表示</p>

<ol>
<li><p>平移</p>

<ol>
<li>平移可以说是最简单的变换了</li>
<li><p>当需求是希望把图形在 \(X\) 轴正方向移动 \(dx\)，在 \(Y\) 轴正方向移动 \(dy\) 时，当它们都为100像素时，如图 <br/>
<img src="media/15444051477462/15449657481603.gif" alt=""/></p></li>
<li><p>使用一点点解析几何的知识，我们就能得到它的变换函数：</p>

<p>\( \begin{cases} f(x_0) = x_0 + dx \\ f(y_0) = y_0 + dy \end{cases} \)</p></li>
</ol></li>
<li><p>缩放</p>

<ol>
<li>通过指定一个缩放中心、\(X\) 轴方向、\(Y\) 轴方向上的缩放系数，可以实施一次缩放变换</li>
<li><p>当缩放中心是原点时</p>

<ol>
<li><p>设 \(X\) 轴方向的缩放系数是 \(s_x\)，\(Y\) 轴方向上的缩放系数是 \(s_y\) ，当它们都为1.5倍时，效果如图 <br/>
 <img src="media/15444051477462/15449664893887.gif" alt=""/></p></li>
<li><p>同样使用一点点解析几何的知识，我们就能得到它的变换函数：</p>

<p>\( \begin{cases} f(x_0) = x_0 * s_x \\ f(y_0) = y_0 * s_y \end{cases} \)</p></li>
</ol></li>
<li><p>对于缩放中心不是原点的情况，我们暂时不作讨论，因为我们不认为其属于常用变换（实际上是因为不属于线性变换），后续讲变换叠加的时候会再讲到</p></li>
</ol></li>
<li><p>旋转</p>

<ol>
<li>通过指定一个旋转中心和一个旋转角度，就可以实施一次旋转变换</li>
<li><p>同样，此处我们暂时只讨论旋转中心是原点的情况，当旋转角度 \(θ\) 为 45° 时，效果如图<br/>
<img src="media/15444051477462/15449665966241.gif" alt=""/></p></li>
<li><p>这里的推导过程稍微有一点点复杂<sup id="fnref1"><a href="#fn1" rel="footnote">1</a></sup>，但对于本文的讨论来说不是很重要，这里直接看结果，它的变换函数是：</p>

<p>\( \begin{cases} f(x_0) = x_0 cosθ - y_0 sinθ \\ f(y_0) = x_0 sinθ + y_0 cosθ \end{cases} \)</p></li>
</ol></li>
<li><p>错切</p>

<ol>
<li>错切是一种使对象形状发生变化的变换，经过错切的对象好像是由已经相互滑动的内部夹层组成</li>
<li>单方向错切的基本操作是（以\(X\)轴方向的错切举例，\(Y\)轴方向同理）：

<ol>
<li>让图像所有点的\(y\)坐标保持不变，而对应的\(x\)坐标按比例发生平移</li>
<li>而且平移的距离与该点的\(y\)坐标（其实就是该点到\(X\)轴的距离）成正比，这样就能实现倾斜的效果</li>
</ol></li>
<li><p>当\(X\)轴方向的错切比例为1.5时，效果如图<br/>
<img src="media/15444051477462/15449667611322.gif" alt=""/></p></li>
<li><p>容易从单方向的错切推广到两个方向的错切，假设 \(X\) 轴方向的错切比例为 \(s_x\)，\(Y\) 轴方向上的错切比例为 \(s_y\)，同样使用一点点解析几何的知识，我们就能得到它的变换函数：</p>

<p>\( \begin{cases} f(x_0) = x_0 + s_x * y_0 \\ f(y_0) = s_y* x_0 + y_0 \end{cases} \)</p></li>
</ol></li>
</ol>

<h2 id="toc_4">2、变换的矩阵表示</h2>

<h3 id="toc_5">2.1.常见变换的矩阵表示</h3>

<p>能看到，对于上面举例的四种常见变换，它的变换函数都是比较简单的，对于这类简单的变换函数，还可以有另一种表示方式 —— 矩阵</p>

<ol>
<li>（为什么使用矩阵表示变换呢？这样有什么好处？理应把原因写在这，但因为现在我们对于这种表示方法还没有具体认识，直接写原因可能不容易理解，所以下面我会边介绍矩阵表示边讲它的好处）</li>
</ol>

<p>在用矩阵表示变换之前，我们需要先考虑怎么表示点</p>

<ol>
<li>二维坐标系中的点是 \((x,y)\) ，它通常用一个列向量表示

<ol>
<li>（用行向量也是一样的，只是习惯问题，虽然会涉及到后续计算上的差别，但原理是一样的，据我所知<code>iOS</code>就是用的行向量）</li>
</ol></li>
<li>列向量就是一个<code>2*1</code>的矩阵

<ol>
<li>比如 \(P(x, y)\) 可以表示为 \( P = \begin{bmatrix} x \\ y \end{bmatrix} \)</li>
</ol></li>
</ol>

<p>于是四种常见变换可以这样用矩阵表示：</p>

<ol>
<li>平移

<ol>
<li>只需要一点点线性代数基础就能知道，平移变换函数 \[ \begin{cases} f(x_0) = x_0 + dx \\ f(y_0) = y_0 + dy \end{cases} \] 可以写成矩阵加法的形式：\[ \begin{bmatrix} x \\ y \end{bmatrix} = \begin{bmatrix} x_0 \\ y_0 \end{bmatrix} + \begin{bmatrix} dx \\ dy \end{bmatrix}\] 或（其中 \(T\) 为平移矩阵） \[ P = P_0 + T \]</li>
<li>这样就用矩阵表示了二维平移变换函数</li>
</ol></li>
<li>缩放

<ol>
<li>同样，缩放变换函数 \[ \begin{cases} f(x_0) = x_0 * s_x \\ f(y_0) = y_0 * s_y \end{cases} \] 可以写成矩阵乘法的形式 \[ \begin{bmatrix} x \\ y \end{bmatrix} = \begin{bmatrix} s_x &amp; 0 \\ 0 &amp; s_y \end{bmatrix} · \begin{bmatrix} x_0 \\ y_0 \end{bmatrix}\] 或（其中 \(S\) 是缩放矩阵） \[ P = S · P_0 \]</li>
</ol></li>
<li>旋转

<ol>
<li>同样，旋转变换函数 \[ \begin{cases} f(x_0) = x_0 cosθ - y_0 sinθ \\ f(y_0) = x_0 sinθ + y_0 cosθ \end{cases} \] 可以写成矩阵形式 \[ \begin{bmatrix} x \\ y \end{bmatrix} = \begin{bmatrix} cosθ &amp; -sinθ \\ sinθ &amp; cosθ \end{bmatrix} · \begin{bmatrix} x_0 \\ y_0 \end{bmatrix}\] 或（其中 \(R\) 是旋转矩阵） \[ P = R · P_0 \]</li>
</ol></li>
<li>错切

<ol>
<li>同样，错切变换函数 \[ \begin{cases} f(x_0) = x_0 + s_x * y_0 \\ f(y_0) = s_y * x_0 + y_0 \end{cases} \] 可以写成矩阵形式 \[ \begin{bmatrix} x \\ y \end{bmatrix} = \begin{bmatrix} 1 &amp; s_x \\ s_y &amp; 1 \end{bmatrix} · \begin{bmatrix} x_0 \\ y_0 \end{bmatrix}\] 或（其中 \(R\) 是旋转矩阵） \[ P = R · P_0 \]</li>
</ol></li>
</ol>

<p>于是你会发现，上面四个用变换函数表示时各不相同的基本变换，都可以统一表示成一种矩阵形式：\[ P = M_1 · P_0 + M_2 \]</p>

<ol>
<li>\(M_1\) 是一个<code>2*2</code>的矩阵，它在平移时是单位矩阵，在缩放、旋转和错切中包含了缩放、旋转和错切的信息</li>
<li>\(M_2\) 是一个<code>2*1</code>的矩阵，在缩放和旋转的时候是0矩阵，在平移时包含了平移的信息</li>
</ol>

<p>这就体现了使用矩阵表示的第一个好处：<strong>方便地把各种基本操作用统一的数据格式（矩阵）和统一的运算（矩阵乘法和加法）表达</strong> （真是一个很棒的抽象）</p>

<h3 id="toc_6">2.2.变换叠加 与 仿射变换的线性表示</h3>

<h4 id="toc_7">2.2.1.变换叠加</h4>

<p>下面我们考虑多个变换叠加的场景</p>

<ol>
<li>表现叠加最直观的例子应该是「先平移、后旋转、再平移」

<ol>
<li>比如这是一个先把图像的中点平移到原点，顺时针旋转45°后移回原位置的操作</li>
<li><img src="media/15444051477462/rotate_move_rotate.gif" alt=""/></li>
</ol></li>
<li>但因为旋转变换的变换函数有一点点复杂，用它进行计算会不太直观，所以下面我们用「先缩放、后平移、再缩放」的变换来举例

<ol>
<li>这是一个先放大1.2倍，然后平移到\((100,100)\)，最后再放大1.2倍的操作

<ol>
<li><img src="media/15444051477462/scale_move_scale.gif" alt=""/></li>
</ol></li>
<li>先用函数表示，非常简单（只用x举例）：\[ \begin{eqnarray*} x_1 = x_0 * s_1 \\ x_2 = x_1 + dx = x_0 * s_1 + dx \\ x_3 = x_2 * s_2 = (x_0 * s_1 + dx)*s_2 \end{eqnarray*} \]</li>
<li>用矩阵表示也很容易：\[ \begin{eqnarray*} P_1 = S_1 · P_0 \\ P_2 = P_1 + T = S_1 · P_0 + T \\ P_3 = S_2 · P_2 = S_2 · ( S_1 · P_0 + T ) \end{eqnarray*} \]</li>
<li>这两种表示是等价的</li>
</ol></li>
<li>推广一下这个示例，我们能得到

<ol>
<li>变换叠加可以表示为：

<ol>
<li>变换函数：\(x_n = f_n ( f_{n-1} ( ... ( f_2 ( f_1 ( x_0 ) ) ) ... ) )\)</li>
<li>变换矩阵：\(P_n = F_n ( F_{n-1} ( ... ( F_2 ( F_1 ( P_0 ) ) ) ... ) )\) （\(F\) 表示矩阵运算函数）</li>
</ol></li>
<li>容易得到其中的通项公式：

<ol>
<li>变换函数：\(x_n = f_n ( x_{n-1} )\)</li>
<li>变换矩阵：\(P_n = F_n ( P_{n-1} )\)</li>
</ol></li>
</ol></li>
<li>但这种叠加变换的方式，在计算时会比较麻烦，因为我们必须一步步地计算变换的坐标：

<ol>
<li>首先将坐标位置缩放，然后将缩放后的坐标平移，最后将平移后的坐标缩放

<ol>
<li>（注意，即使上面对 \(P_3\) 的表达式进行进一步矩阵运算，得到：\(P_3 = S_2 · S_1 · P + S_2 · T\) ，整个运算过程并没有得到多少简化，甚至更为麻烦，因为多了一次变换）</li>
</ol></li>
<li>当变换的只是一个坐标点的时候，这种运算上的浪费还可以接受，但往往我们要变换的是一个非常大图形，包含成千上万的坐标点，再遇到变换叠加次数更多的时候，这种浪费会被放大到无法接受</li>
</ol></li>
<li>能想象更有效率的方式是将所有的变换先进行计算，得到一个总变换矩阵，通过使用总变换矩阵对初始坐标进行变换，就能直接从初始坐标算到最后的结果坐标，消除了中间坐标的计算</li>
<li>真的能做到这点吗？能，你会发现，当你不考虑平移的时候，就真的能够做到

<ol>
<li>我们用「先缩放、后旋转、再缩放」进行举例</li>
<li>此时它的矩阵形式可以表达成这样：\( P_3 = S_2 · ( R · (S_1 · P_0) ) \)</li>
<li>因为矩阵乘法是有结合律的，也就是：\( P_3 = (S_2 · R · S_1) · P \)</li>
<li>于是你完全可以先把前面三个变换矩阵的结果算出来，最后对初始坐标进行一次变换</li>
</ol></li>
<li>但如果考虑平移，就做不到了，所以我们希望有一种方法，能够消除平移导致的矩阵加法，在介绍这种方法之前，让我们先来学习图形学中两个简单的概念，线性变换和仿射变换，以方便后文的描述</li>
</ol>

<h4 id="toc_8">2.2.2.线性变换和仿射变换</h4>

<p>简单描述如下：</p>

<ol>
<li>上面只使用矩阵乘法就能表达的变换（旋转、缩放、错切等），在图形学中被称为「线性变换」

<ol>
<li>线性变换都可以表示为：\(P = M · P_0\)</li>
<li>你能发现线性变换的一些共同点（其实也是判别是否是线性变换的标准）

<ol>
<li>变换前是直线的，变换后依然是直线</li>
<li>变换后的网格线平行且等距分布</li>
<li>变换前后原点的位置保持不变</li>
</ol></li>
</ol></li>
<li>所以显然，平移不属于线性变换，因为它的原点位置会发生改变，但有一个条件更宽松的概念包括 所有的线性变换+平移变换，它叫「仿射变换」

<ol>
<li>仿射变换允许使用矩阵乘法和加法进行表达，它可以用矩阵表示成这样：\(P = M · P_0 + T\)</li>
<li>它的共同点或者说要求是这样：（少了原点保持不变这一条）

<ol>
<li>变换前是直线的，变换后依然是直线</li>
<li>变换后网格线平行且等距分布</li>
</ol></li>
<li>所以平移是属于仿射变换的</li>
</ol></li>
</ol>

<p>对于线性变换和仿射变换大概了解这些就够了，不过「学有余力」的同学可以继续跟我一块探索下这两个概念的由来，学没有余力的同学可以直接跳到下一小节，不会对后文的理解有影响</p>

<!--（自己找的资料，标记了来源，仅供参考）-->

<p><strong>线性变换</strong></p>

<ol>
<li>首先看下它的英文<code>Linear Transformation</code>，并没有出现奇葩翻译的情况，线性还是线性</li>
<li>然后线性变换怎么看都跟矩阵有不清不楚的关系，于是我们来看下线性代数是怎么说的

<ol>
<li>在线性代数中，「线性变换」这个概念源于「线性空间」，由此又会引出现代数学中的一个重要基础概念「空间」，这里不细讲，有兴趣的同学可以进一步阅读孟岩老师的经典文章<a href="https://blog.csdn.net/myan/article/details/647511">《理解矩阵》</a>，用我的理解总结一下就是：<strong>『空间由「一组能够运动的对象集合」和「统一的运动规则」组成』</strong>，运动是空间中某个对象变成空间中另一个对象的过程，它也被称为变换，所以<strong>「线性变换」就是「线性空间」中的运动</strong></li>
<li>那么线性空间是一个什么样的空间呢？其中的运动又是什么样的？

<ol>
<li>线性空间中的对象：通过选取基和坐标的办法，都可以表示成一个同维度的向量</li>
<li>线性空间中的运动：都可以找到一个同维度的矩阵来描述

<ol>
<li>描述方式是：用代表那个运动的矩阵，乘以代表原对象的向量，使原对象发生对应运动，得到另一个结果对象</li>
</ol></li>
<li>线性空间可以用原文的一句话总结：在线性空间中选定基之后，用向量刻画对象，用矩阵刻画对象的运动，用矩阵与向量的乘法施加运动</li>
</ol></li>
<li>所以线性变换就是乘与同维度的矩阵，这也跟上面的简单描述一致，但似乎还是没有跟「线性」扯上关系，印象中线性好像是 \(y = kx + b\) 一类的东西，那让我们继续往下看</li>
</ol></li>
<li>在<a href="https://zh.wikipedia.org/wiki/%E7%B7%9A%E6%80%A7%E9%97%9C%E4%BF%82">线性关系的维基词条</a>中，对「线性」这个词的辨析写得非常清楚

<ol>
<li>在现代学术界中，线性关系一词存在两种不同的定义

<ol>
<li>在初等数学中（主要是与方程组及一次函数有关的理论）：

<ol>
<li>若某数学函数或数量关系的函数图形呈现为一条直线或线段，那么这种关系就是一种线性的关系</li>
</ol></li>
<li>在高等数学中（尤其是纯数学比如代数学和数学分析学）：

<ol>
<li>如果一种运算同时满足特定的「可加性」和「齐次性」（马上讲到），则称这种运算是线性的</li>
</ol></li>
</ol></li>
<li>于是如果称一个数学函数 \(f(x)\) 为线性的，可以有两种含义：

<ol>
<li>初等数学：可以表示为 \(f(x)=kx+b\) 的形式（其中\(k,b\)为常数）</li>
<li>高等数学：\(f(x)\) 需要满足以下条件（其中\(a\)为常数）

<ol>
<li>可加性：\(f(x_1 + x_2) = f(x_1) + f(x_2)\)</li>
<li>齐次性：\(f(ax) = af(x)\)</li>
</ol></li>
</ol></li>
<li>初等数学的定义很好理解，因为从小我们就是这么学过来的，但高等数学的定义是怎么跟线性扯上关系的呢？

<ol>
<li>基于「可加性」和「齐次性」条件，可以推广出一个等价条件：对于任何向量 \({x_{1},\ldots ,x_{m}}\) 和标量 \({a_{1},\ldots ,a_{m}}\)，要求方程 \({ f(a_{1}x_{1}+\cdots +a_{m}x_{m})=a_{1}f(x_{1})+\cdots +a_{m}f(x_{m})}\) 成立</li>
<li><del>从这个等价条件中，大概能看出一点线性的影子吧（误）</del></li>
</ol></li>
<li>这种术语间的细微差异如果不注意的话，就容易引起混淆，比如对于函数 \(f(x) = 3x + 1\)，它属于初等数学定义中的线性函数，但不属于高等数学定义中的线性函数</li>
<li>那么线性变换是使用了初等数学还是高等数学中的定义呢？

<ol>
<li>在<a href="https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E6%98%A0%E5%B0%84">线性映射的维基词条</a>中，能看到清晰的线性变换的两个约束条件，它与高等数学中的定义一致</li>
</ol></li>
</ol></li>
<li>到这里，对于线性变换的理解应该算是非常清晰了，虽然通过矩阵乘法能迅速判断某个变换是否属于线性变换，但我们仍然可以用线性变换的两个条件考察一下前文的四个基本变换，看看平移为什么不满足这两个条件，看看缩放、旋转、错切为什么满足这两个条件

<ol>
<li>平移

<ol>
<li>平移的变换函数为 \( \begin{cases} f(x_0) = x_0 + dx \\ f(y_0) = y_0 + dy \end{cases} \) ，我们考察一个维度 \(X\) 就行了</li>
<li>在真正拿起笔算之前，你的直觉可能会先一步产生疑惑，好像平移变换也符合线性条件：

<ol>
<li>可加性：\(x\) 移动5再移动10，跟直接移动15的结果是一样的</li>
<li>齐次性：\(x\) 移动3次5，跟移动15的结果也是一样的</li>
</ol></li>
<li>但实际上，当你简单计算一下，你就会发现原来不是这样：

<ol>
<li>如果平移变换符合可加性，那么有：\( f(15) = f(10 + 5) = f(10) + f(5) \)</li>
<li>等式左侧等于 \(15 + dx\) ，等式右侧等于 \(10 + dx + 5 + dx = 15 + 2dx \)，显然左侧和右侧并不相等，右侧多了一个 \(dx\)</li>
</ol></li>
<li>那为什么我们一开始的直觉会产生错误？其实是因为：可加性并不是「\(x\) 移动5再移动10」，「\(x\) 移动5再移动10」的表达式是：\(f(f(x_0, 5), 10) \)</li>
<li>齐次性是类似的，为了节省篇幅，不对其进行分析</li>
</ol></li>
<li>缩放和旋转为什么满足条件？同样为了节省篇幅，不对其进行分析，「学有余力」的同学可以自行推导，下面再简单推导一下错切为什么能满足条件，因为它看上去不太像能满足条件的样子

<ol>
<li>错切的变换函数为 \( \begin{cases} f(x_0) = x_0 + s_x * y_0 \\ f(y_0) = s_y * x_0 + y_0 \end{cases} \)，也是考察一个维度 \(X\) </li>
<li>如果错切变换符合可加性，那么有：\( f(15) = f(10 + 5) = f(10) + f(5) \)</li>
<li>等式左侧等于 \(15 + s_x * y_0\) ，等式右侧等于 \(10 + s_x * y_0 + 5 + s_x * y_0 = 15 + 2 * s_x * y_0 \)，<del>诶，我就说，其实错切看着就不能满足条件吧，果然</del></li>
<li>其实不是这样的，注意到 \(y_0\) 在不同的 \(x_0\) 的条件下值是不一样的，所以应该是：左侧等于 \(15 + s_x * y_{15}\) ，右侧等于 \(10 + s_x * y_{10} + 5 + s_x * y_5 = 15 + s_x * (y_{10} + y_5) \)，而我们已经假设错切变换符合可加性，于是有 \(y_{10} + y_5 = y_{15}\)，所以右侧可以进一步得到 \( = 15 + s_x * y_{15}\) ，它与左侧的结果是一致的，所以假设成立</li>
<li>齐次性是类似的，为了节省篇幅，不对其进行分析</li>
</ol></li>
</ol></li>
</ol>

<p><strong>仿射变换</strong></p>

<ol>
<li>这么怪的翻译就一定得看看它的英文：<code>Affine Transformation</code>，<code>Affine</code>的中文翻译居然就是仿射，不过还有另一个意思「姻亲」，大概理解是关系特别近，它的<a href="https://en.wikipedia.org/wiki/Affine_transformation">英文维词条</a>中提到，这个单词来自拉丁语 <code>affinis</code>，是「与......相关联」的意思，还是没有明确的含义</li>
<li>在数学中，仿射变换同样也是「仿射空间」中的运动，但是「仿射空间」的数学定义不太好理解，英文维基中说「所有欧几里德空间都是仿射的」，欧几里得几何我知道，但「欧几里德空间」又是什么呢？是「具有了内积的线性空间」，内积又是什么？以及这些概念之间的转换要怎么直观的理解？这要探究下去真的是离题太远</li>
<li>所以总得来看，直接基于我们已经清楚的「线性变换」来理解，还是最方便的：

<ol>
<li>仿射变换 = 线性变换 + 平移变换</li>
<li>仿射变换就是不要求变换前后原点保持不变的线性变换</li>
</ol></li>
</ol>

<h4 id="toc_9">2.2.3.通过线性变换来表示仿射变换</h4>

<p>所以前面希望「消除平移导致的矩阵加法」换个说法就是：怎么把仿射变换表示成线性变换。这样对于包括平移在内的四种基本操作，都能像线性变换一样，消除中间坐标的运算</p>

<p>这种表示的方法简单说就是：增加一个维度</p>

<ol>
<li>先简要描述这个转化过程，非常简洁巧妙：

<ol>
<li>关键：\(\overrightarrow{P} = M · \overrightarrow{P_0} + \overrightarrow{T}\) 可以写成 \( \begin{bmatrix} \overrightarrow{P} \\ 1 \end{bmatrix} = \begin{bmatrix} M &amp; \overrightarrow{T} \\ 0 &amp; 1 \end{bmatrix} · \begin{bmatrix} \overrightarrow{P_0} \\ 1 \end{bmatrix} \) 

<ol>
<li>它们在数学上是等价的</li>
<li>（这里为了清晰，<code>2*1</code>的矩阵写成了向量的形式）</li>
</ol></li>
<li>左边的式子是仿射变换的形式，右边的式子则得到了线性变换的形式，这样就完成了一个巧妙的转化</li>
<li>其中可以看到

<ol>
<li>这里同时 把二维坐标位置扩展成了三维列向量、把二维变换矩阵扩展成了三维矩阵</li>
<li>「二维坐标位置扩展成的三维列向量」在图形学中被称为齐次坐标，新加入的维度信息被称为齐次参数，它只需要是一个非零值，最方便的做法是把它设置为1

<ol>
<li>（@@@拓展内容，可以再补充一点，是搜索的网页里有）为什么叫齐次，齐次在很多地方都有这个概念，它的英文单词是xx，表示同等的概念，在这里它就表示...</li>
<li>然后使用齐次有很多作用，这里表示移动是一个，另外，它还能表示投影空间，投影空间是一个平行线能相交的空间</li>
</ol></li>
<li>我们只需要关注初始的 \(\overrightarrow{P_0}\) 和变换后的 \(\overrightarrow{P}\)，忽略第三个维度中1的信息，它的存在只是起到类似辅助线的效果</li>
</ol></li>
</ol></li>
<li>尝试形象地理解一下这种转化方式

<ol>
<li>在三维空间中的线性变换原则应该跟二维空间的线性变换原则一致</li>
<li>想象对一个三维正立方体施加线性变换， \(\begin{bmatrix} \overrightarrow{P_0} \\ 1 \end{bmatrix} \) 可以认为是变换前三维立方体与 \(z=1\) 平面上的相交面，这个初始的相交面的中心是原点，而 \(\begin{bmatrix} \overrightarrow{P} \\ 1 \end{bmatrix} \) 则是变换后三维立方体与 \(z=1\) 平面上的相交面，它的中心就可以不是原点，可以发生偏移</li>
<li>当我们忽略掉第三个维度的1，也就是把 \(z=1\) 平面当成我们观察的二维平面，你就会观察到二维图形在三维线性变换后，实现了平移效果</li>
<li>所以增加一个维度后，就可以在高维度通过线性变换表示低维度的仿射变换</li>
<li>可以参考<a href="https://zh.wikipedia.org/wiki/%E4%BB%BF%E5%B0%84%E5%8F%98%E6%8D%A2">仿射变换的维基词条</a>中的动图，生动的表现了这一过程：<img src="media/15444051477462/15449693706857.gif" alt=""/></li>
</ol></li>
<li>而这也是图形学中的标准做法：n维坐标用n+1维列向量表示，n维变换操作用一个n+1维矩阵表示</li>
</ol>

<p>于是当我们增加一个维度，使用齐次坐标表示位置，把2维仿射变换写成3维线性变换后，我们就可以把所有的常见变换（平移、旋转、缩放、错切）表示成矩阵相乘的形式：\(P = M · P_0\)，也就能<strong>在多个变换叠加时，消除中间坐标的运算</strong>，这就是使用矩阵表示变换的第二个优点了</p>

<h3 id="toc_10">2.3.使用矩阵表示变换的缺点</h3>

<ol>
<li>前面介绍了矩阵表示变换的两大优点，你可能不禁表示无脑支持矩阵表示，但在这之前，你可以想一想它有什么缺点和局限</li>
<li>矩阵神奇地把操作变成数据，优雅而且便利，本身没有缺点，它唯一的遗憾是：「不是所有的变换都能用它表示」</li>
<li>更确切地说，本文介绍的矩阵表示法所能表示的变换只是整个变换集合中非常有限的一小部分

<ol>
<li>这很容易理解，比如给你一个没有表情头像，要求你用矩阵表示一个把这个头像的嘴角翘起来眼睛眯起来的变换，你肯定是做不到的，所以大部分复杂的变换矩阵都无法表示</li>
<li>然后如果你用过PS的话，你可能记得里面有一种自由度更大的图片变形操作，它会把整张图片变成一个网格，你可以在网格上添加锚点，然后控制锚点的相对偏移，实现对局部变形的控制<img src="media/15444051477462/15449700435777.jpg" alt="" style="width:300px;"/></li>
<li>（@@@另外，canvas好像还有一个方法，能做到更为灵活的变换，但是用起来会更加不直观）</li>
</ol></li>
<li>但矩阵也不是只能表示上文提到的4种基本变换

<ol>
<li>在只是使用二维变换矩阵的时候，它就能表示更多的变换了，在使用了三维变换矩阵后，它能表示的变换就更丰富了，甚至能一定程度呈现三维的效果</li>
<li>上面的4种基本变换只是其中比较常见而且有名字的变换模式，其他有名字的变换还有反射变换<sup id="fnref2"><a href="#fn2" rel="footnote">2</a></sup></li>
<li>然后还有更多叫不出来但确实效果不一样的变换，比如你多个变换叠加得到的复合变换，比如你用随机数构造一个矩阵表示的变换，它都是矩阵能表示的变换</li>
</ol></li>
</ol>

<h2 id="toc_11">3、变换的叠加</h2>

<p>诶，前面不是讲了叠加吗？怎么还要讲？别着急，讲肯定是因为有新东西</p>

<h3 id="toc_12">3.1.另一种叠加新变换的方式</h3>

<ol>
<li><p>我们从另一个角度来看前面的叠加操作，这个角度是：叠加的效果</p>

<ol>
<li><p>比如前面举例「先缩放、后平移、再缩放」这个变换时</p>

<ol>
<li><p>我们默认这个变换的效果是这样：<br/>
<img src="media/15444051477462/scale_move_scale.gif" alt=""/></p></li>
<li><p>这是符合我们直觉的，于是我们基于这个效果写出了变换叠加的表达式： \( x_3 = (x_0 * s_1 + dx)*s_2 \) 或 \( P_3 = S_2 · ( S_1 · P_0 + T ) \)</p></li>
</ol></li>
<li><p>但是只有这一种符合直觉的变换叠加效果吗？有没有其他的？</p></li>
</ol></li>
<li><p>下面就用一个例子让你体会另一种符合直觉的变换（以下场景中的非重要部分都是虚构，只为重要部分服务）</p>

<ol>
<li>小鱼驾着一辆马车在大街上走着（为什么是马车，这不重要），他要去小千家，但不知道小千家在哪儿，于是小鱼用微信问小千</li>
<li>可小千就是不说自己家的地址，而是说：你给我分享你的位置吧，然后你边走我边告诉你怎么走，你之前说我是路痴，我一定要证明给你看，我不仅自己不会迷路，我还能教别人不迷路</li>
<li>好吧，小鱼也没有办法，谁叫自己之前嘴贱，于是给小千分享了自己的位置，小千一看，好家伙，有点距离啊，小鱼在左下角往上走，自己家在右上角，不过还好，只要拐两个弯就到了<img src="media/15444051477462/15449710439194.jpg" alt="" style="width:300px;"/></li>
<li>于是小千告诉小鱼，你先往上走，走过两个红绿灯，右拐</li>
<li>小鱼想，上是哪儿，不就是往前吗，OK，于是往前走了2个红绿灯，然后右拐</li>
<li>小千说，对的，你走得很对，那么我们就可以开始往右走，再过4个红绿灯</li>
<li>小鱼又想，往右走，那其实是继续往前走吧，OK，于是，于是往前走了4个红绿灯</li>
<li>小千说，好的好的，就快到了，你继续往上走吧，再过2个红绿灯，就到了我家</li>
<li>小鱼想，嘿，啥玩意，还往前走2个红绿灯，刚直接说走5个红绿灯不就完了吗，真费劲诶这人，于是直接往前走</li>
<li>小千正在自恋地佩服自己指挥得力，谁再说自己路痴自己跟谁急，然后马上看到小鱼走错了路，不禁毫不留情地鄙视起小鱼来了：嘿，这家伙，还说自己路痴，结果听我指挥也能听错。不过走错了就到不了自己家了，于是小千赶紧喊道：停停停，你走错了，我让你往上走的，你咋就愣是往右走呢？</li>
<li>小鱼正慢悠悠驾着马，听到这话也生气了，说：我咋就走错了，你不让我继续往前走吗？我就往前走，哪里往右拐了啊？</li>
<li>...（好了，太蠢了，编不下去了，重点说完了，剩下剧情自己脑补吧）</li>
</ol></li>
<li><p>虽然蠢，但这个例子生动地表现了另一种符合直觉的变换叠加的模式：</p>

<ol>
<li>你变换的不仅是一个图形，图形上也可以有一个坐标系，从图形角度来看，参照自己的坐标系来进行变换是更加自然的一件事</li>
<li>图形上的坐标系会随着图形的变换一起变换，我把它称为相对坐标系，把图形外不变的坐标系称为绝对坐标系。除了一开始图形在原点时，两个坐标系是重合的，在经过一次变换后，相对坐标系就基本完全与绝对坐标系不同了</li>
<li>在上面的例子里，小千是参照地图的坐标系来指挥小鱼，她使用了地图坐标系的上下左右来告诉小鱼怎么进行变换，但小鱼参照了自己坐标系的前后左右来执行小千的指令，小鱼自己的相对坐标系是随着自己状态的改变一起改变的，所以面对小千的第三条指令，两个坐标系的偏差导致小鱼执行的变换完全跟小千希望他做的变换不同</li>
<li>我们可以把小千「参考绝对坐标系叠加新的变换」的变换叠加模式简称为「绝对变换叠加模式」，把小鱼「参考相对坐标系叠加新的变换」的变换叠加模式简称为「相对变换叠加模式」，两种模式都是符合直觉的变换叠加模式，只不过参考的坐标系不同</li>
</ol></li>
<li><p>不过这两个名字可能造成理解上的混淆</p>

<ol>
<li><p>绝对变换叠加模式和相对变换叠加模式，都是相对（基于）当前相对坐标系的状态来叠加新的变换，都是相对进行变换，并不是前者是进行绝对变换，后者进行相对变换</p>

<ol>
<li>比如我们知道 <code>moveTo</code> 和 <code>moveBy</code> 的区别，但这里两种叠加模式都是 <code>moveBy</code> 的效果
<img src="media/15444051477462/15449719679048.png" alt="" style="width:300px;"/></li>
</ol></li>
<li><p>它两的区别在于：在哪个坐标系实现变换的效果</p>

<ol>
<li>首先，变换本身的作用效果都是固定的，用哪种叠加得到的都是一样的效果</li>
<li>然后，使用两种叠加模式叠加一个变换的过程也是一样的：对变换前的相对坐标系进行变换，得到变换后的相对坐标系</li>
<li>那为什么还有两种叠加的区别，而且看上去用两种方式叠加同一个变换的效果是不一样的？（后面会有更多变换效果不一样的例子）</li>
<li>因为使用不同的叠加，它就会在不同的坐标系实现变换的效果，你需要分别在不同的坐标系观察，才能发现变换的效果是一样的

<ol>
<li>在两种叠加模式中，都可以认为有3个坐标系：绝对坐标系、变换前的相对坐标系、变换后的相对坐标系</li>
<li>当使用「绝对变换叠加模式」叠加变换时，是为了在「绝对坐标系」中实现变换的效果，使用「相对变换叠加模式」叠加变换时，是为了在「变换前的相对坐标系」中实现变换的效果</li>
<li>所以你必须在绝对坐标系中观察以「绝对变换叠加模式」叠加了一个变换的「变换前后的相对坐标系」 和 在变换前的相对坐标系中观察以「相对变换叠加模式」叠加了同一个变换的「变换前后的相对坐标系」，才能发现它们的变换效果是一样的</li>
</ol></li>
</ol></li>
<li><p>举个简单的例子</p>

<ol>
<li>初始时相对坐标系与绝对坐标系是重合的，然后让相对坐标系绕原点顺时针旋转90度

<ol>
<li>下一步如果使用「绝对变换叠加模式」叠加一个沿 \(X\) 轴正方向移动100的变换

<ol>
<li><img src="media/15444051477462/15449731027758.gif" alt=""/></li>
<li>在绝对坐标系中观察，变换后的相对坐标系就是变换前的相对坐标系沿着 \(X\) 轴正方向移动100得到的</li>
<li>但是在变换前的相对坐标系中观察，变换后的相对坐标系是变换前的相对坐标系沿着 \(Y\) 轴负方向移动100得到的</li>
</ol></li>
<li>下一步如果使用「相对变换叠加模式」叠加一个沿 \(X\) 轴正方向移动100的变换

<ol>
<li><img src="media/15444051477462/15449730418724.gif" alt=""/></li>
<li>在变换前的相对坐标系中观察，变换后的相对坐标系就是变换前的相对坐标系沿着 \(X\) 轴正方向移动100得到的</li>
<li>但是在绝对坐标系中观察，变换后的相对坐标系就是变换前的相对坐标系沿着 \(Y\) 轴正方向移动100得到的</li>
</ol></li>
</ol></li>
<li>所以能看到

<ol>
<li>在不同的坐标系中观察同一个变换，效果是不一样的</li>
<li>使用不同的叠加方式，在同一个坐标系中观察同一个变换，效果也是不一样的</li>
<li>而在叠加方式对应的坐标系中观察同一个变换，效果就是一样的了</li>
</ol></li>
</ol></li>
<li><p>所以为了不引起不必要的误解，下面我会使用更专用的名词称呼这两个概念：用「小千叠加」表示绝对变换叠加，用「小鱼叠加」表示相对变换叠加</p></li>
</ol></li>
<li><p>既然有两种变换的叠加模式，那什么时候用小鱼什么时候用小千呢？</p>

<ol>
<li>很简单，就看需求是什么

<ol>
<li>如果需求是让你做一系列参考绝对坐标系的操作，那就适合用小千叠加</li>
<li>如果需求是让你做一系列参考相对坐标系的操作，那就适合用小鱼叠加</li>
<li>甚至需求可能让你进行一系列混合着参考相对坐标系和绝对坐标系的操作，你也只需要在对应的位置使用对应的叠加方式即可（@@@这里想通了有局部绝对叠加，你只要在合适的地方插入右乘就行了，后面举例子的时候可以用这个）</li>
</ol></li>
<li>继续用小鱼和小千的例子举例

<ol>
<li>如果小千让小鱼先前往 \((100,200)\) ，再顺时针旋转30度，再前往 \((300,150)\) ，再旋转 10 度，再前往... ，这样，如果使用小鱼叠加给小鱼这个相对坐标系叠加变换，就需要额外的计算，而使用小千叠加，就可以直接得到需要做的变换了（需要用到后面会讲的带偏移中心的基本变换，先不用在意）</li>
<li>如果小千让小鱼先往前走400米，再左偏前20度直走150米，然后向左后方直走300米... ，这样，如果使用小千叠加给小鱼这个相对坐标系叠加变换，也会需要额外的计算，而使用小鱼叠加，就可以直接得到需要做的变换了</li>
</ol></li>
</ol></li>
</ol>

<p>所以总结一下，还有另一种符合直觉的叠加新变换的方式：参考相对坐标系叠加新的变换，小鱼叠加</p>

<!--你可能会觉得小鱼叠加不那么常用，但在很多场景中它会是第一选择：比如在游戏开发中，当第一人称的游戏人物接收到玩家向左前方移动的指令时，游戏引擎要如何对人物的视角和位置进行变换呢？当然得参考人物身上的相对坐标系进行变换了（具体做法可能差别比较大，但原理就是这样）。然后后边会讲`Canvas`绘制的模型，会讲到更具体的使用小鱼叠加的理由-->

<h3 id="toc_13">3.2.小鱼叠加的数学表示</h3>

<p>既然有了一种新的变换叠加模式，那当然得看看怎么用变换函数或变换矩阵来表达这种叠加模式</p>

<ol>
<li>用「缩放+平移」举一个简单的例子：先放大2倍，再往 \(X\) 轴正方向平移100，写出 \(x\) 的变换函数（为了简便，忽略 \(y\) ，只考虑 \(x\) ）（不用「旋转+平移」举例还是因为旋转变换函数稍微有些复杂，避免增加额外的理解成本）

<ol>
<li><img src="media/15444051477462/15449790793133.gif" alt=""/></li>
<li>一开始的位置是 \(x_0\)，然后变换完是 \(x\) ... 诶，现在有两个坐标系，它们是哪个坐标系的 \(x\) ？</li>
<li>不知道，那就都试试看，如果是绝对的坐标系里的 \(x\)

<ol>
<li>先放大2倍，那就是 \(x = 2*x_0\) ，这没问题</li>
<li>然后再平移100... 诶，这里怎么平移呢，是 \(x = 2*x_0 + 100\) 吗？想想就觉得不太对，我们形象一点去想这个场景：

<ol>
<li>放大2倍之后，整个相对坐标系都变大了两倍</li>
<li>然后参考这个相对坐标系移动100</li>
<li>但相对坐标系里的100其实是个放大的版本，相当于外面绝对坐标系的200</li>
</ol></li>
<li>所以平移之后的结果应该是 \(x = 2*x_0 + 200\)</li>
<li>这个2能不能提出来呢？试试：\(x = 2*(x_0 + 100)\)</li>
<li>这不就像参考绝对坐标系，先移动100，再放大两倍，是一样的效果呢？确实是一样的效果</li>
<li>这时，你可能会察觉到一点点奇怪，为什么我明明是先放大、再平移，但是一参考相对坐标系，就有点像先平移、再放大呢？把这个问题暂时放放，我们先看如果 \(x\) 是相对坐标系中的 \(x\) 时的情况</li>
</ol></li>
<li>如果 \(x\) 是相对坐标系中的 \(x\) 

<ol>
<li>先放大两倍，\(x = 2 * x_0\)，没问... 诶？不对， \(x\) 应该没有变化，\(x = x_0\)，因为相对坐标系同步变换了，或者说图像的变换是因为相对坐标系变换所以变换了，图像在相对坐标系中没！有！变！化！</li>
<li>所以如果把 \(x\) 当成相对坐标系的 \(x\) 的话，没有意义</li>
</ol></li>
<li>所以在这个例子中，变换函数是：\(x = 2*(x_0 + 100)\)，而 \(x\) 和 \(x_0\) 只能是变换前后点在绝对坐标系中的位置</li>
</ol></li>
<li>然后还可以看「旋转+平移」的例子，你会发现也是一样的， \(x_0\) 和 \(x\) 还是点在绝对坐标系中的位置，变换顺序也像把用小千叠加的操作反过来，具体分析就略过了</li>
<li>所以我们能得到小鱼叠加的变换函数是：\(x_n = f_1 ( f_2 ( ... ( f_{n-1} ( f_n ( x_0 ) ) ) ... ) )\)</li>
</ol>

<h3 id="toc_14">3.3.小鱼叠加的第一个问题</h3>

<ol>
<li>小鱼叠加的变换函数第一眼看上去感觉还行，不就是小千叠加的变换函数反过来写吗

<ol>
<li>来对比一下小千叠加的变换函数：\(x_n = f_n ( f_{n-1} ( ... ( f_2 ( f_1 ( x_0 ) ) ) ... ) )\)</li>
</ol></li>
<li>然后你可能会慢慢意识到一点特别，然后眼睛越眯越小，眉头越皱越紧，不对，完全不对啊，完全不对

<ol>
<li>你想想看，无论是小鱼叠加还是小千叠加，变换叠加的过程都应该是：

<ol>
<li>先有一个原始图形，然后对其进行第一步变换，得到变换后的图形，然后对这个图形叠加第二步变换，得到变换后的图形，再对这个图形叠加第三步变换...</li>
</ol></li>
<li>但如果是按照小鱼叠加的变换函数，做不到啊，比如在叠加第二步变换的时候，我拿到第一步变换的结果，要如何在原图形变换成这个结果前，插入第二步的变换呢？</li>
<li>所以没有办法，完全没有办法</li>
</ol></li>
<li>更能佐证这个变换函数不太对劲的现象是：你无法写出它的通项公式！（所以你看上面我很明智的没去写）

<ol>
<li>你可以用小千叠加的变换函数的通项公式作为参考：\(x_n = f_n ( x_{n-1} )\)</li>
<li>无论怎么挣扎，你就是没法写，它无法简单地去递推</li>
</ol></li>
<li>同样，用矩阵表示时只能写出这样的变换矩阵：\(P_n = F_1 ( F_2 ( ... ( F_{n-1} ( F_n ( P_0 ) ) ) ... ) )\) ，而无法写出通项公式</li>
</ol>

<!-- （@@@这里如果可能的话，可以问下晓晓） -->

<p>所以你会担心无法让计算机进行小鱼叠加，但这可能吗？<br/>
当然不可能，<del>否则我讲大半天这玩意干嘛</del> 否则图形学应用中的那么多小鱼叠加是怎么实现的</p>

<ol>
<li>一个最简单的实现方案可以是这样：

<ol>
<li>每次进行变换后，不止把变换后的图形传递给下一次变换，而且还把当前的变换跟之前做过的变换合并在一起，得到一个总变换，也传递给下一次变换</li>
<li>于是下一次变换时，可以先把图形使用总变换的逆变换变回原图形，然后对原图形进行这次新的变换，再把进行了新变换的原图形再次使用总变换进行变换，最后把这次新变换合并进总变换中</li>
<li>这样的变换函数大概可以写成这样（不严谨，就表达个意思）：\(x_n = f_n ( f_{n-1} ( ... ( f_2 ( f_1 ( x_0 ), f_1 ), f_1f_2 ) ... ), f_1...f_{n-1} )\)，\(f_n\) 中就会进行上面描述的复杂操作</li>
<li>你会发现这是一个类似小千叠加的变换函数，于是通项公式也可以写了，它包含两个表达式，其中 \(S_n\) 表示n次小鱼叠加得到的总变换：\( \begin{cases} x_n = S_{n-1} ( f_n ( {S_{n-1}}^{-1}( x_{n-1} ) ) ) \\ S_n = f_n(S_{n-1}) \end{cases} \)</li>
</ol></li>
<li>但你可能小声嘀咕，这效率会不有点感人，小鱼叠加真的是这么实现的吗？</li>
<li>确实不是（<del>诶，别打我，等一下，听我解释</del>

<ol>
<li>首先，目前为止，我们主要讨论的是线性变换（包括仿射变换使用齐次矩阵扩展后），线性变换与一般的变换不同，它在叠加时有一些特殊的性质，前面点到为止，这里继续往下讲

<ol>
<li>所有的线性变换都可以写成矩阵相乘的形式，所以当所有的变换都是线性变换时

<ol>
<li>小千叠加可以写成这样：\(P_n = M_n · M_{n-1} · ... · M_2 · M_1 · P_0\)，于是通项公式是：\( \begin{cases} P_n = S_n · P_0 \\ S_n = M_n · S_{n-1} \end{cases} \)</li>
<li>而小鱼叠加可以写成这样：\(P_n = M_1 · M_2 · ... · M_{n-1} · M_n · P_0\)，然后此时你会发现现在居然能写出通项公式了：\( \begin{cases} P_n = S_n · P_0 \\ S_n = S_{n-1} · M_n \end{cases} \)

<ol>
<li>为什么这个时候能写通项公式呢？因为此时变换都是矩阵相乘的形式，而矩阵相乘有宝贵的结合律，所以可以容易地调整结合顺序，于是可以容易地把新的变换插入到所有旧变换和原图形之间左乘</li>
</ol></li>
</ol></li>
<li>然后进一步观察两个通项公式，你马上会发现它们非常像，然后你会注意到：

<ol>
<li>小千叠加模式下，叠加一个新变换，就是左乘旧的总变换矩阵（\(A\)左乘\(B\)在线性代数中表示成 \(A·B\)，也就是\(A\)从左边乘上\(B\)，右乘同理）</li>
<li>小鱼叠加模式下，叠加一个新变换，就是右乘旧的总变换矩阵</li>
</ol></li>
<li>为什么两种叠加模式正好对应上矩阵的左乘右乘？

<ol>
<li>其中并没有神奇的巧合，从两者的变换函数上能看出，本质上两种叠加模式的区别是变换的嵌套顺序，只是在线性变换时所有的变换都能写成矩阵相乘的形式，而矩阵的结合律能把变换的嵌套顺序变成乘法的先后顺序，所以就对应了矩阵的左乘右乘</li>
<li>然后需要注意的是，矩阵相乘没有交换律，所以一般不能随意颠倒左乘右乘的顺序

<ol>
<li>但对于两个基本变换是同一类型的特殊情况，是可以交换相乘顺序的，例如两个连续的 移动/旋转/缩放 可以颠倒变换顺序，最后的效果也是相同的</li>
<li>另外 旋转 和 一致缩放（\(s_x = s_y\)时）间也是可以交换的（可以自己证明）</li>
</ol></li>
</ol></li>
</ol></li>
<li>但以上的性质以及小鱼叠加通项公式看上去并不能直接用在我们的变换中，因为小鱼叠加模式不是基于上一步的变换结果进行变换，而是基于总变换矩阵和原始图形。不过，实际上计算机中就是基于后者的：

<ol>
<li>计算机中对图形变换的操作流程跟上面一直默认的流程不一样</li>
<li>虽然从本文开始到现在，一直默认的变换操作流程是：我先有一个图形，然后对图形去进行变换操作，得到想要的变换后的样子</li>
<li>但实际上并不是这样，这个流程只是为了直观而简化的版本，到目前为止这个简化版本都不会引起理解上的偏差，所以不要慌</li>
<li>想必了解<code>Canvas</code>的人就知道真正的流程是什么，不知道的也别着急，下面马上就会讲到<code>Canvas</code>模型，会详细说，这里简要描述计算机中实际对图形变换的操作流程：「先累积总变换，在渲染图形的时候直接获取当前的总变换对要渲染的原图形进行变换」，这就跟小鱼叠加的通项公式一致了，说明这个通项公式是有实际使用价值的</li>
</ol></li>
</ol></li>
<li>所以，当你要添加一个新变换，直接把它添加到总变换中就行了，之后在需要绘制的时候，再用总变换对原图形进行变换计算

<ol>
<li>对比上面最简单的方案，实际中变换和原图形直接就是分离的，你不需要做繁琐的来回变换，运算也非常简单</li>
</ol></li>
</ol>

<h3 id="toc_15">3.4.小鱼叠加的第二个问题</h3>

<p>好，确认完小鱼叠加是可操作的之后，你可能马上会产生第二个疑惑：「参考相对坐标系叠加新的变换」的变换叠加模式是怎么跟「变换顺序颠倒」或者说「新变换插入到最前」联系到一起的，它的效果为什么是这样？是不是不太符合直觉？（注意到我这里直接使用了小鱼叠加的全称，你就不用回头去找它了）</p>

<ol>
<li>我有一个自以为非常能贯通直觉的例子，不知道能不能贯通你的，可以体会一下：<strong>纸团比喻</strong>

<ol>
<li>你面前有一张纸，上面画满了横平竖直的网格线，你可以把网格看成这张纸上的坐标系，初始时纸的坐标系跟真实坐标系是重合的（@@@直接用手机拍图）</li>
<li>然后你对纸叠加了一个团操作，不管是小千叠加还是小鱼叠加，得到的效果都是一样的，这张纸被揉成一团，纸上的坐标系也被揉成一团了</li>
<li>下一步就有区别了，如果需求希望你用小千叠加模式叠加一个折叠操作，你应该马上就能知道要怎么操作，你会把这个纸团强行从中间弯折，得到一个弯折的纸团，有点丑，但这就是需求希望的效果，也符合你的直觉</li>
<li>如果需求希望你用小鱼叠加模式叠加一个折叠操作，也就是参考那个被揉成一团的坐标系，叠加一个折叠操作，你应该能比较容易地想到，进行这个操作之后应该得到一个双层的纸团，这是符合直觉的</li>
<li>而这时再看这个双层的纸团，你就会发现这就是先把纸折叠、然后再揉成团得到的效果，这就像在揉成团之前插入了一个折叠操作，所以这种效果也是可以符合直觉的</li>
</ol></li>
<li>不知道这个例子大家还满意不，另外说一下，上面那个小千指挥小鱼寻路的例子不太适合用来理解这个，小鱼叠加的先旋转再移动，就跟小千叠加的先移动再旋转一样吗？事实是这样，但可能不太符合大部分人的直觉</li>
</ol>

<p>到这里 <del>好吧，我知道，完全用不着到这里</del>，你可能会抱怨：说好的讲<code>Canvas</code>变换呢，怎么我都听你叨叨半小时了，<code>Canvas</code>在哪儿呢？这不是标题党吗？而且讲了这么久，一句代码都没有，你要空手套白狼吗？TICSMTC!</p>

<p>哈哈，别着急，这就讲到了，前面的内容都是必要的准备工作，有了扎实的理论基础 ，再讲<code>Canvas</code>，你就能享受水到渠成的快感 <del>(并不</del></p>

<h2 id="toc_16">4、Canvas变换</h2>

<p>终于开始讲 <code>Canvas</code> 变换了，先看<code>Canvas</code>提供的变换相关API：</p>

<pre><code>canvas.translate(float dx, float dy)
canvas.scale(float scaleX, float scaleY, float centerX, float centerY)
canvas.rotate(float degrees, float centerX, float centerY)
canvas.skew(float sx, float sy)
</code></pre>

<p>API非常简单，就是四个基本变换，我们已经非常熟悉了，但它们在<code>Canvas</code>上具体生效的方式 以及 变换与绘制的关系 还需要结合<code>Canvas</code>的绘制模型进行理解</p>

<!--
canvas图层
canvas离屏缓冲
发现了，图层就是离屏缓冲，而且就1个方法savelayer新建图层，共用restore方法合并图层
然后clippath的工作非常正常啊，完全不会有什么问题，用不着图层，之前可能想岔了
然后图层的用的唯一场景可能就是xfmode了，然后还有绘制一些不变的背景（之后可以再看看）

所以canvas用我这个模型完全没问题
-->

<h3 id="toc_17">4.1.Canvas绘制模型</h3>

<p>接下来要建立的<code>Canvas</code>绘制理论模型可能跟你之前的理解有些不太一样，不妨尝试下这个模型，它能解释很多问题，示意图如下：<br/>
<img src="media/15444051477462/IMG_20181224_143956.jpg" alt="" style="width:500px;"/></p>

<ol>
<li>首先<code>Canvas</code>不适合按英文原意理解成画布，它应该理解成画尺，一把2D的尺子

<ol>
<li>现实中的尺子是直尺，它是1D的，能够度量1个维度的尺寸，并且利用它绘制从0到10的直线</li>
<li>而2D的尺子是1D尺子的增强版，就像一把交叉的十字尺或者是一块标有坐标系的透明塑料片，可以称它为面尺（本文中画尺会和<code>Canvas</code>混用），你不仅可以用它绘制从 \((1,1)\) 到 \((5,10)\) 的直线，而且可以用它画二维图形，比如画圆画五角星</li>
</ol></li>
<li>所以所有使用 <code>canvas.draw</code> 绘制的内容，都是参考画尺的坐标系进行绘制的

<ol>
<li>比如你要绘制从 \((1,1)\) 到 \((5,10)\) 的直线，你就需要在画尺坐标系上找到 \((1,1)\) 和 \((5,10)\) 的位置，然后画一条线把这两个位置连接起来</li>
</ol></li>
<li>我们知道，用笔在直尺上画线，线不是画在尺上，而是落在下面的纸上

<ol>
<li>用画尺也是一样的，所以画尺的下面还有一张画纸，为了跟<code>Canvas</code>的翻译名区分，我们称它为基板</li>
<li>所有使用 <code>canvas.draw</code> 绘制的内容，会最终落在基板上</li>
</ol></li>
<li>我们还知道，可以对<code>Canvas</code>进行变换。而所有对<code>Canvas</code>的变换，其实是对画尺进行变换

<ol>
<li>也就是这把2D的尺子还可以被变换被扭曲，被扭曲之后的画尺，其上的坐标系也会被扭曲，但扭曲之后的坐标系也是可以继续使用的，上面的刻度仍然可以用来绘制内容</li>
<li>只是这时候绘制的内容落在基板上看上去也是扭曲的，你可以想象一把弯曲的直尺也能用来画线，但是画的线是歪歪扭扭的，这就是你对<code>Canvas</code>进行变换后，再在<code>Canvas</code>上进行绘制的效果</li>
<li>另外，很容易理解，这种变换不会对之前的绘制起作用，只会对变换之后使用画尺进行的绘制起作用</li>
</ol></li>
<li>而最后你看到的屏幕就是这块基板上某个区域的内容

<ol>
<li>比如你的手机是 <code>1920*1080</code> 的屏幕，最后看到的内容就是这块基板上 \(0 ≤ x ≤ 1080, 0 ≤ y ≤ 1920\) 的区域</li>
</ol></li>
</ol>

<p>所以你会看到，这就是前面简要描述<code>Canvas</code>绘制模型时说「先累积总变换，在渲染图形的时候直接获取当前的总变换对要渲染的原图形进行变换」的全貌了</p>

<ol>
<li>调用一系列<code>Canvas</code>的变换API，对画尺进行任意扭曲</li>
<li>调用<code>Canvas</code>的绘制API，参考扭曲的画尺，在基板上进行绘制</li>
</ol>

<p>总变换累积在画尺上，在扭曲的画尺上绘制图形，本质上就是把总变换作用于要绘制的图形，两者的效果是一致的<br/>
正是由于这种实现方式，不管是小千叠加还是小鱼叠加，这个绘制模型都是能够做到的</p>

<h3 id="toc_18">4.2.不好用的Canvas变换API 和 神奇操作</h3>

<p>然后你会发现，基于这个Canvas绘制模型，绘制很自然就是参考相对坐标系进行的，否则的话你希望施加在图像上的变换就不起作用了<br/>
于是，<code>Canvas</code>也自然地选择了参考相对坐标系进行变换叠加，也就是小鱼叠加，这从概念上讲非常一致，不是吗？所以上面<code>Canvas</code>提供的变换API都是右乘变换矩阵，也就是 \(S_n = S_{n-1} · M_n\)</p>

<p>等等，不是，记得前面说，是参考相对坐标系进行叠加还是参考绝对坐标系进行叠加，应该取决于需求，需求从哪个角度出发，你就最好使用这个角度进行变换叠加，否则不好操作</p>

<ol>
<li>所以<code>Canvas</code>这种一刀切的方式实际上并没有那么自然，甚至会让人觉得，怎么那么难用呢？</li>
<li>于是就有人发明了一套神奇的操作，用<code>Canvas</code>提供的小鱼叠加的API，实现小千叠加的效果

<ol>
<li>操作方式是：用小千叠加的思路，倒着使用小鱼叠加的API，实现「正着用小千叠加的API」同样的效果</li>
</ol></li>
</ol>

<p>举个例子，需求是：把<code>Canvas</code>沿绝对坐标系的 \(X\) 轴负方向移动100， \(Y\) 轴负方向移动100，然后绕绝对坐标系的原点顺时针旋转45度，再沿绝对坐标系的 \(X\) 轴正方向移动100， \(Y\) 轴正方向移动100</p>

<ol>
<li><p>如果直接使用小鱼叠加的API，你可能会这么写： </p>

<pre><code>canvas.translate(-100,-100)
canvas.rotate(45) 
canvas.translate(100,100) 
</code></pre>

<p>但它的效果是这样：<br/>
<img src="media/15444051477462/15449805823985.gif" alt=""/></p>

<p>为什么是这个效果，前面理解了这里就很简单，因为你是小千叠加的思路在调用小鱼叠加的API，肯定不对了</p></li>
<li><p>当然，你可以真正用小鱼叠加的思路来写，但那样就会比较麻烦，而且碰到更复杂的用小千叠加思路描述的需求，就更麻烦了。本来你换用小千叠加的API来操作就什么问题都没有了，但<code>Canvas</code>的变换方法只有小鱼叠加</p></li>
<li><p>于是神奇操作就来了，来用小鱼叠加的API实现小千叠加的思路吧，方法非常简单，把上面的调用顺序倒过来就行了，也就是 </p>

<pre><code>canvas.translate(100,100) 
canvas.rotate(45) 
canvas.translate(-100,-100)
</code></pre>

<p>这样一操作，效果真的预想中一样了<br/>
<img src="media/15444051477462/15449807824073.gif" alt=""/></p></li>
</ol>

<p>为什么神奇操作有神奇效果呢？原因在于线性变换可以用矩阵表示</p>

<ol>
<li>线性变换最终都会变成矩阵作用在<code>Canvas</code>上，前文已经讲述过：

<ol>
<li>小千叠加线性变换的矩阵表达式为：\(P_n = M_n · M_{n-1} · ... · M_2 · M_1 · P_0\)</li>
<li>小鱼叠加线性变换的矩阵表达式为：\(P_n = M_1 · M_2 · ... · M_{n-1} · M_n · P_0\)</li>
</ol></li>
<li><p>在这个需求中，最自然的办法是使用小千叠加的思路调用小千叠加的API：</p>

<p>（假设这里的q系列操作是<code>Canvas</code>提供的小千叠加的API）</p>

<pre><code>canvas.qTranslate(-100,-100) 
canvas.qRotate(45) 
canvas.qTranslate(100,100)
</code></pre>

<p>这套操作的效果用矩阵表示是 \(P_n = M(100,100) · R(45) · M(-100,-100) · P_0\)</p></li>
<li><p>而前面错误的做法中，使用小千叠加的思路调用小鱼叠加的API，操作的效果用矩阵表示是 \(P_n = M(-100,-100) · R(45) · M(100,100) · P_0\)</p></li>
<li><p>如果我们基于这个错误做法，还是小千叠加的思路和小于叠加的API，只是把调用顺序反过来，用矩阵表示就是 \(P_n = M(100,100) · R(45) · M(-100,-100) · P_0\)，这就跟「使用小千叠加的思路调用小千叠加的API」得到的矩阵表达式一致了，就是我们要的效果</p></li>
</ol>

<p>所以神奇操作确实是有效的，但我并不建议你在不清楚其底层原理之前就到处使用，因为基于以上的原理，你会发现使用这套操作有一些前提，如果前提不满足，就无法实现你要的效果</p>

<ol>
<li>前提一：需求是使用小千叠加描述的

<ol>
<li>很显然这是必要条件，假如需求是用小鱼叠加描述的，让你参考相对坐标系叠加新的变换，就可以直接顺序调用<code>Canvas</code>的API了，而不应该把调用顺序反过来</li>
</ol></li>
<li>前提二：进行这套操作之前<code>Canvas</code>不能叠加过其他变换

<ol>
<li>比如在上面的例子中，如果<code>Canvas</code>已经进行了一次 \(R(50)\) 的变换

<ol>
<li>使用小千叠加的思路调用小千叠加的API，得到正确变换的矩阵表达式应该是：\(P_n = M(100,100) · R(45) · M(-100,-100) · R(50) · P_0\)</li>
<li>如果使用小千叠加的思路调用小鱼叠加的API，操作的效果用矩阵表示是 \(P_n = R(50) · M(-100,-100) · R(45) · M(100,100) · P_0\) ，这显然是不对的</li>
<li>而使用神奇操作，把上面的调用顺序倒转，操作的效果用矩阵表示是 \(P_n = R(50) · M(100,100) · R(45) · M(-100,-100) · P_0\) ，这显然也是不对的</li>
</ol></li>
<li>这时候怎么使用神奇操作都实现不了，只能通过下面要介绍的<code>Matrix</code>来做</li>
</ol></li>
<li>前提三：变换必须是线性变换

<ol>
<li>这条不那么重要，因为我们使用API对<code>Canvas</code>的操作都是线性变换，但它确实是神奇操作能够使用的前提，因为只有线性变换才能用矩阵相乘表示</li>
</ol></li>
</ol>

<!--所以既然使用神奇操作也得理解这么多底层原理，那为什么不能直接从底层原理出发呢？而且理解了底层原理，你也不用强迫自己适应这种代码倒过来执行的反直觉的工作方式了。不过如果你已经习惯了倒过来执行的操作，而且觉得自己维护`Matrix`太麻烦，你仍然可以继续使用神奇操作，了解了底层原理之后你也会用得更放心了（@@@这里可以重新表述）-->

<p>神奇操作并不是银弹，有的需求不该用它，有的需求它无法实现，所以即使是用神奇操作，还是需要了解更多底层原理的<br/>
既然神奇操作的思路那么绕，还有很多事情做不了，没有什么更好的解决方案吗？有的，那就是<code>Matrix</code></p>

<h3 id="toc_19">4.3.通过Matrix对Canvas进行变换</h3>

<p>虽然<code>Canvas</code>提供的小鱼叠加的API确实在不合适的场景中不方便使用，但也不是不能理解它这么提供的原因（与绘制时的参考坐标系一致；大部分需求是小鱼类型的），而且值得庆幸的是，<code>Canvas</code>其实也提供了小千叠加的API，那就是直接操作 <code>Matrix</code></p>

<p>先来总览一下相关的API：</p>

<pre><code>// Canvas 相关 API
canvas.setMatrix(Matrix matrix)
canvas.getMatrix(): Matrix  // Deprecated after 14

canvas.concat(Matrix matrix)


// Matrix 相关 API
matrix.setValues(float[] values)
matrix.getValues(float[] values)
matrix.preConcat(Matrix other)
matrix.postConcat(Matrix other)

matrix.setRotate() / setScale() / setSkew() / setTranslate()
matrix.preRotate() / preScale() / preSkew() / preTranslate()
matrix.postRotate() / postScale() / postSkew() / postTranslate()

matrix.set(Matrix src)
matrix.reset()
</code></pre>

<ol>
<li>首先看<code>Canvas</code>的API，很清晰，其中的<code>setMatrix</code>和<code>getMatrix</code>直接为你打开了一扇通向<code>Matrix</code>的大门，你完全可以在需要的时候把<code>Canvas</code>的<code>Matrix</code>拿出来操作一番，然后再放回去，不要太方便</li>
<li>于是我们来看看<code>Matrix</code>，可以怎么操作它呢？

<ol>
<li>首先，这里的<code>Matrix</code>是<code>android.graphics</code>包中的，不是Matlab中的，它的数据结构是专门用来服务二维图形变换的，所以它就是一个大小固定为<code>3x3</code>的矩阵</li>
<li>然后你能想到的最基础的操作，应该就是new一个自己想要的矩阵吧，比如<code>new Matrix([1,2,3],[4,5,6],[7,8,9])</code>，9个元素安排地明明白白

<ol>
<li>但很抱歉，<code>Matrix</code>没有这样的构造方法，它的构造方法只有<code>Matrix()</code>创建一个单位阵，和<code>Matrix(Matrix src)</code>创建一个现有矩阵的拷贝</li>
<li>那怎么得到一个想要的矩阵呢？只需要多做一步，在矩阵创建出来后使用<code>setValues(float[] values)</code>方法进行赋值就好了，<code>Matrix</code>会取传入数组的前9个元素给矩阵赋值

<ol>
<li>同样你也可以通过<code>getValues(float[] values)</code>把矩阵中的数据用数组取出来</li>
<li>这两个操作都很简单，唯一值得一提的是：矩阵内部是使用以某种结构组织的int类型对数据进行存储和计算的，所以在get和set时都会经历一个转换过程，这会导致你set进去和get出来的两个float数组可能不完全相同</li>
</ol></li>
</ol></li>
<li>往下继续，图形变换里的矩阵是用来做乘法的，那它一定得有乘法操作的API

<ol>
<li>确实没错，<code>Matrix</code>原汁原味地给你提供了两个乘法API，左乘<code>postConcat(Matrix other)</code>和右乘<code>preConcat(Matrix other)</code></li>
<li>很多人会对左乘是<code>post</code>右乘是<code>pre</code>感到疑惑

<ol>
<li>通常意义上「post」是后的的意思，后一般是右边，正好跟左乘的「左」相反，个人理解原因是：把新的变换矩阵「左乘」之前的总变换矩阵，它实现的效果是小千叠加，也就是「新变换添加到最后」，所以它被称为「post」操作，也就是<strong>使用了操作的作用效果对操作命名</strong></li>
<li>同样把新的变换矩阵「右乘」之前的总变换矩阵，它实现的效果是小鱼叠加，也就是「新变换插入到最前面进行」，所以它被称为「pre」操作</li>
</ol></li>
</ol></li>
<li>OK，到这里其实就完全够了，你已经可以用上面两组API实现对<code>Canvas</code>小千或小鱼叠加任何基本变换了：

<ol>
<li><code>canvas.getMatrix()</code>取出<code>Canvas</code>当前的矩阵</li>
<li>通过已经推导出来的「基本变换的矩阵表示」创建出任何基本变换的变换矩阵（<code>new Matrix()</code>+<code>setValues(...)</code>）</li>
<li>对取出的<code>Canvas</code>矩阵 左乘<code>postConcat</code>/右乘<code>preConcat</code> 基本变换矩阵</li>
<li><code>canvas.setMatrix()</code>把操作完的<code>Canvas</code>矩阵放回去，收工！</li>
</ol></li>
<li>你应该马上能发现其中有大量模板代码，我们可以做一些抽取操作

<ol>
<li>首先创建基本变换的变换矩阵肯定可以封装成4个方法，而不是每次都去翻一下公式

<ol>
<li>这4个方法<code>Matrix</code>已经给你封装好了，它们是上面的<code>setXXX</code>系列方法，虽然不是<code>generateXXX</code>系列，但也差不多</li>
</ol></li>
<li>然后创建和点乘两个操作是在是太亲密了，他们当然可以封装到一起

<ol>
<li>这8个方法<code>Matrix</code>也给你封装好了，它们是上面的<code>postXXX</code>和<code>preXXX</code>系列方法，真是一瞌睡就送来枕头</li>
</ol></li>
<li>最后，这整个4步操作是不是也可以封装到一起

<ol>
<li>当然可以，而且官方库也送来枕头了，不过枕头只有半个，这半个就是你用过的<code>Canvas</code>的4个小鱼叠加的基本变换，另外半个还得你自己造，不过这也是我们探索<code>Matrix</code>的最初目的，前面我们只能在翻身的时候顺手把官方给的半个枕头也翻过来假装有个好枕头，现在我们终于可以自己动手把剩下的半个枕头给补起来了</li>
</ol></li>
</ol></li>
</ol></li>
</ol>

<p>使用 <code>Kotlin</code> 的扩展函数（真香），缝出这半个枕头花不了你五分钟的时间，甚至<code>skew</code>这个角缝得比官方送的还好看</p>

<pre><code class="language-kotlin">fun Canvas.postTranslate(dx: Float, dy: Float) {
    matrix = matrix.apply { postTranslate(dx, dy) }
}

fun Canvas.postRotate(degrees: Float, px: Float = 0f, py: Float = 0f) {
    matrix = matrix.apply { postRotate(degrees, px, py) }
}

fun Canvas.postSkew(kx: Float, ky: Float, px: Float = 0f, py: Float = 0f) {
    matrix = matrix.apply { postSkew(kx, ky, px, py) }
}

fun Canvas.postScale(sx: Float, sy: Float, px: Float = 0f, py: Float = 0f) {
    matrix = matrix.apply { postScale(sx, sy, px, py) }
}
</code></pre>

<p>使用这半个枕头，4.2节的例子可以这么写（需求是：把<code>Canvas</code>沿绝对坐标系的 \(X\) 轴负方向移动100， \(Y\) 轴负方向移动100，然后绕绝对坐标系的原点顺时针旋转45度，再沿绝对坐标系的 \(X\) 轴正方向移动100， \(Y\) 轴正方向移动100）</p>

<pre><code>canvas.postTranslate(-100,-100) 
canvas.postRotate(45) 
canvas.postTranslate(100,100)
</code></pre>

<p>别给我整那些旁门左道的神奇操作，这样才对嘛，我想怎么叠加就怎么叠加，舒服</p>

<p>不过你可以尝试跑一下，理论上只有一小部分同学能跑出预期效果（版本比较低或是view全屏），剩下大部分同学跑出的效果都会不太对，比如这样：<br/>
（左图是使用神奇操作，中间是小部分同学使用的预期的枕头，右图是大部分同学使用的劣质的枕头）<br/>
<img src="media/15444051477462/transform6.gif" alt="" style="width:220px;"/><img src="media/15444051477462/transform4.gif" alt="" style="width:220px;"/><img src="media/15444051477462/transform7.gif" alt="" style="width:220px;"/></p>

<p>咦，这是怎么回事呢？<br/>
你可以回头看看最开始贴出<code>Canvas</code>API的地方，有没有发现在<code>getMatrix</code>方法的旁边还有一行小字，对，它被废弃了，API14就被废弃了</p>

<ol>
<li>（严格说这个废弃并没有标记API版本，这里说成14是为了容易理解，下文会说原因）</li>
<li>（另外实际上跟理论相反，大部分同学能跑出预期效果，只有少部分会跑的效果不太对。比如我手上几台API19+的设备都是预期枕头的效果，只有其中一个API 23的设备是劣质枕头的效果，这个问题我也很奇怪，不过我们可以暂时不去探究，否则就离题太远了，而且效果不确定跟效果不对在我们看来其实是一样的——都最好别用）</li>
</ol>

<p>你是不是心里一凉，然后想打我，搞了半天你是在给我讲废弃的API啊，不能用的你讲个P啊，信了你的邪听你讲这么久，浪费我时间，告辞！<br/>
等下，你听我解释</p>

<p>其实问题只出在一个地方，那就是<code>getMatrix</code>方法被废弃了，<del>这还用你说，不听了，告辞</del> 从废弃的注释能看到，废弃的原因在于<strong>硬件加速</strong>：</p>

<blockquote>
<p>在<code>Canvas</code>开启硬件加速后，<code>getMatrix</code>获取到的矩阵可能完全不是你预期的样子，因为这个方法的具体实现被<code>Canvas</code>创建的层级所决定，所以建议你要么不用获取到的<code>matrix</code>做事情，要么在画布之外跟踪相关的变换状态</p>
</blockquote>

<p>等下，这段原因怎么完全看不懂啊，除了知道别让用之外，其他都说是啥？好吧，那就一块来理解一下</p>

<ol>
<li>关于硬件加速我这就不展开了，推荐<a href="https://hencoder.com/ui-1-8/">扔物线的文章</a>，讲得非常清楚，个人简单总结就是：硬件加速是一种使用GPU提高渲染效率的技术，因为这个技术有利也有弊，所以它是一个可开关功能，在API 14之后默认打开，你也可以手动关闭。它有什么弊呢，一方面有的绘制操作它实现不了，文章中有个经典的表格，另一方面某些操作它实现的效果不是预期的，比如这个<code>getMatrix</code>方法</li>
<li>那为什么硬件加速会让<code>getMatrix</code>的效果达不到预期呢？谈论这个问题的地方好像不是很多，主要是<a href="https://issuetracker.google.com/issues/36938987">这个讨论</a>，这是6年前（现在是8012年）开发者给谷歌提的一个bug，已经被置为fixed了

<ol>
<li>这个开发者发现，在开启硬件加速之后，做这样一个无害操作<code>canvas.setMatrix(canvas.getMatrix())</code>居然会改变<code>Canvas</code>的状态，也就是<code>getMatrix()</code>和<code>setMatrix()</code>不对应。我猜当时谷歌也没有发现这个现象所以<code>getMatrix()</code>方法上并没有加废弃及其原因的注释，导致这个开发者当bug提了这事</li>
<li>然后谷歌员工回复是这样的：启用硬件加速后，View的绘图命令将被记录在<code>Display List</code>中。此时，<code>getMatrix()</code>将仅返回由View本身构建的矩阵。父View执行的任何操作都不会被考虑在内（也没法考虑，因为<code>Display List</code>在View拥有父View之前就已经生成了）。最后他表示<code>The documentation will be updated to explain this behavior</code>，结果他解释成上面那样了，恩，可以的</li>
</ol></li>
<li>谷歌员工的回复算是比较清晰了，梳理一下：开启硬件加速，会让<code>getMatrix()</code>返回的只是View本身变换构建的矩阵，View真正的变换效果还会包括父View对它的变换，所以你取出来矩阵再放回去之后，View里真正的变换矩阵就相比之前缺少了父View对它的变换，导致看上去View的<code>Canvas</code>状态发生改变

<ol>
<li>实际看源码中<code>View.draw(Canvas canvas, ViewGroup parent, long drawingTime)</code>（API28）方法，也能大概看到它会先整体判断是不是硬件加速的来决定是<code>drawingWithRenderNode</code>还是「drawWithCanvas」，而<code>RenderNode</code>的绘制方式就是把操作记录在<code>Display List</code>中</li>
<li>比如上面例子中，劣质枕头跟预期枕头相比，缺少了<code>ViewRoot</code>施加的向下平移变换，所以看上去整体都上移了（实际上还会更复杂一点）</li>
</ol></li>
</ol>

<!--其实连旋转的原点都被ViewRoot移到下面了，不知道怎么做到的-->

<!--但是，其实你关闭硬件加速，如果你拿出来看打印，会发现还是一样的啊，所以我的一个猜想模型是这样（不感兴趣可以跳过）：@@@-->

<!--
居然怎么看当前是否是硬件加速，怎么关闭硬件加速，都不讲了

所以你也可以试试，先用isxxx方法，确定当前是硬件加速，然后使用canvas.setMatrix(canvas.getMatrix())，确实不对
然后用xx关闭硬件加速，再试一下，就OK了对吧
-->

<p>所以总结一下：</p>

<ol>
<li>如果你明确关闭掉硬件加速，这半个枕头可以放心拿去用</li>
<li>但是如果你的硬件加速是开启的，那这半个枕头，用起来还是有很大风险的，最好是不要使用</li>
</ol>

<p>咦，那岂不是有问题，神奇操作得变成常规操作了，神奇操作做不了的，就怎么也做不了了<br/>
其实事实没有那么惨，神奇操作的思路虽然奇葩，但是如果了解原理并且多用几次，你会觉得也还行啊，然后前面说到的神奇操作做不了的情况，其实具体说是这样的：</p>

<ol>
<li>大部分时候都是整体相对，局部绝对，所以神奇操作就够了</li>
<li>万一遇到有个大的局部绝对，你也可以保留之前的矩阵来实现</li>
<li>然后整体的绝对是不会有的，否则你一个子view变换还带上父view的状态，这需求也太蠢了，不过如果真的有这种需求，你只能专门去计算获取父view会对子view做的变换了，就像源码里说的一样（@@@这里其实可以有个例子）</li>
</ol>

<p>这块纸上谈兵了好久，必须得有几个例子才行</p>

<p>有这几个需求，关闭硬件加速的时候，你可以这样做，开启之后，你就得这样做<br/>
普通的相对叠加<br/>
绕中心叠加<br/>
那个复杂的操作</p>

<hr/>

<!--
下面可能废弃

1. `canvas.set(matrix)` 就是直接设置`Canvas`当前的总变换矩阵，所以你完全可以自己在外部维护一套变换的`Matrix`，然后在合适的时候通过这个方法设置给`Canvas`，实现你需要的变换（@@@可以有具体代码例子，否则别人会不知道怎么写代码）
2. `Matrix`本身提供了左乘和右乘操作的API，这样就既能实现小鱼叠加也能实现小千叠加
    3. `matrix.preXXX` 系列基本变换API
        4. 包括：`preRotate preScale preSkew preTranslate`
        4. 它会把新的变换矩阵「右乘」之前的总变换矩阵，它实现的效果是小鱼叠加，也就是「新变换插入到最前面进行」，所以它被称为「pre」操作
        5. 使用这个系列的API，就跟直接使用`Canvas`进行变换操作是一样的
        6. 你会发现这类API其实包含了两个基本操作步骤
            7. 通过你的传入参数生成基本变换矩阵
            8. 把基本变换矩阵以左乘或右乘的方式与之前的总变换矩阵进行叠加
        6. 你还可以通过`matrix.preConcat(Matrix other)`来直接让另一个矩阵右乘当前矩阵
    4. `matrix.postXXX` 系列基本变换API
        5. 包括：`postRotate postScale postSkew postTranslate`
        5. 它会把新的变换矩阵「左乘」之前的总变换矩阵，它实现的效果是小千叠加，也就是「新变换添加到最后」，所以它被称为「post」操作
        6. 你还可以通过`matrix.postConcat(Matrix other)`来直接让另一个矩阵左乘当前矩阵
2. 除了直接给`Canvas`设置`Matrix`，还有一个`Matrix`与`Canvas`作用的方法：`canvas.contact(matrix)`
    3. 此API是让传入的`Matrix`与`Canvas`当前的`Matrix`相乘，但它继承了`Canvas`中API的"优良传统"，相乘的方式只能是「右乘」
4. 另外`Matrix`还有一些其他API，原理上没有特别值得一提的或者跟本文的主要内容不太相关，大家可以自行查看

它有很多好处，能直接实现一些复杂的叠加需求，甚至即使需求来回变换参考变换的坐标系，你也只需要改变调用的API，就能实现
（@@@这里可以马上举2个例子，一个小鱼叠加的例子，用`Canvas`做，然后用matrix做，然后是小千叠加的例子做，直接用`Canvas`有问题，然后倒着用`Canvas`，最后用matrix）

但实践上，更常见的做法是，在大的相对变换中使用局部的绝对变换
-->

<!--
《------》
5、最佳实践（@@@其实到这里讲最佳实践好像不太合适，因为带偏移中心的还没有讲）
2. 手动实现camera操作
3. 就是要要复合几个操作的时候，为什么顺序相关

几个简单的原则就是：
1. 从需求出发，如果是绝对叠加的思路，就使用matrix，如果是相对，就直接用`Canvas`


到这里，`Canvas`变换的原理和最佳实践就基本讲完了，所以我说得没错嘛，背景讲清楚了，`Canvas`变换就是水到渠成的事情，但其实我们还会面对一些问题
1. 为什么可以用绝对坐标系的思路，倒着使用相对坐标系的API，达到正着用绝对坐标系的API，同样的效果？
2. 这样有什么局限？不能叠加，只能基于单位正进行变换
3. 为什么有的操作还带有偏移中心，怎么实现的？
4. 既然带偏移中心的是复合操作，那几个这样的复合操作能叠加吗？能
（可以听下回分解这样）（这是留的几个带有一点挑战性的作业，如果你能全部完成，就说明你真的理解了，甚至融会贯通了，建议自己思考完再看下篇）
下篇会讲上面的答案，然后会讲camera变换

这里就接着写吧
-->

<h2 id="toc_20">5、带偏移中心的操作</h2>

<ol>
<li>如果你使用过<code>Canvas</code>的变换API，你会发现跟上面描述有一点不一样的地方：旋转和缩放操作都能设置一个旋转中心和缩放中心，并不只能是相对坐标系的坐标原点</li>
<li>这是什么原理，是怎么实现的？它的变换矩阵是什么？</li>
<li>因为在后面使用<code>Camera</code>时，我们只能自己去实现带偏移中心的操作，系统不提供直接的API，比如绕 \(X\) 轴翻转的API只有<code>rotateX(float degree)</code>，而不会有<code>rotateX(float degree, int x, int y)</code>（这里的 \(x,y\) 其实是投影中心），所以好好讲一讲它是有必要的</li>
<li>下面我将用旋转操作举例，分两种叠加方式进行讨论</li>
</ol>

<h3 id="toc_21">小千叠加一个带偏移中心的旋转操作</h3>

<p>假设需求是这样：画尺已经被施加的变换设为 \(T\)，需要你再给画尺用小千叠加模式叠加一个「以绝对坐标系位置为 \((100,100)\) 的点为中心顺时针旋转90度」的变换，求这个变换矩阵，效果如下图：<br/>
<img src="media/15444051477462/15450145629298.gif" alt=""/></p>

<ol>
<li>没有把需求直接变成变换矩阵的方法，但你可以跟前面一样，使用这样的流程来得到：需求 -&gt; 效果图示 -&gt; 几何法计算x/y变换函数 -&gt; 转化为变换矩阵</li>
<li>但对于当前这个需求，你自然会思考有没有其他捷径能做这件事，这个捷径就是组合叠加几个前面我们知道的基本变换来实现：绕原点旋转、移动，也就是对带偏移中心的旋转变换进行拆分

<ol>
<li>这个需求换一种说法就是：在绝对坐标系观察这个要施加的变换，它的效果应该是，变换后的画尺是「变换前的画尺绕绝对坐标系的点 \((100,100)\) 顺时针旋转90度」的样子</li>
<li>所以关键操作是旋转90度，但使用小千叠加基本变换只能让画尺绕原点旋转，于是很自然，我们可以尝试先把画尺偏移 \((-100,-100)\)，使得在绝对坐标系上看，画尺上的旋转中心跟原点重合，那么第一步就是小千叠加一个 <code>translate(-100,-100)</code> 的基本变换</li>
<li>旋转中心跟原点重合后，就可以进行旋转， 所以第二步是小千叠加一个绕原点旋转90度的基本变换 <code>rotate(90)</code></li>
<li>最后我们需要把画尺移回原来的位置，目标是画尺上的旋转中心跟变换前处于绝对坐标系的同一个位置，这很简单，也就是偏移 \((100,100)\)，所以第三步是小千叠加一个平移变换 <code>translate(100,100)</code>，这样就完成了需求</li>
</ol></li>
<li>所以总的来看

<ol>
<li>小千叠加一个带偏移中心的旋转操作非常简单，只需要三步：<code>qTranslate(-100,-100); qRotate(90); qTranslate(100,100)</code></li>
<li>前面说过，小千叠加的运算方式是矩阵左乘，于是总的变换过程用矩阵表示是：\(P = M(100,100)·R(90)·M(-100,-100)·T·P_0\) （这里使用了一个简便的基本变换矩阵的记法）</li>
<li>所以相比不带偏移中心的旋转操作，带偏移中心的操作只需要在基本旋转操作前后增加一个基本移动操作即可</li>
</ol></li>
</ol>

<!--
（@@@这里真是有点特殊，我其实还是没有完全想通，只能用一些表述的技巧去骗过直觉：注意，这里我不敢说吧画尺的100，100移动到原点，因为画尺上的100，100不是那个点，你需要用一个新的绝对坐标系）
-->

<h3 id="toc_22">小鱼叠加一个带偏移中心的旋转操作</h3>

<p>假设需求是这样：画尺已经被施加的变换设为\(T\)，需要你再给画尺用小鱼叠加模式叠加一个「以相对坐标系位置为 \((100,100)\) 的点为中心顺时针旋转90度」的变换，求这个变换矩阵</p>

<ol>
<li>同样，还是考虑怎么组合叠加基本变换

<ol>
<li>这个需求换一种说法就是：在变换前的相对坐标系观察这个要施加的变换，它的效果应该是，变换后的画尺是 变换前的画尺绕变换前的相对坐标系的点 \((100,100)\) 顺时针旋转90度的样子</li>
<li>于是就开始想，发现想不明白啊，有点模糊的思路：可以先把相对坐标系的原点移动到 \((100,100)\) ，然后转90度，转完移动回去。但想来想去还是有问题：

<ol>
<li>要以相对坐标系的 \((100,100)\) 为中心进行旋转，但我把相对坐标系移动过去，那 \((100,100)\) 也动了，这样就不是相对这个点转吧？</li>
<li>在旋转的时候你会发现这个转的效果根本不对啊，前面小千叠加的时候，一转就是我要的效果</li>
<li>接着转完怎么移动回去呢？往哪个方向移？相对的坐标系变了要不要调整移的方向？</li>
</ol></li>
<li>但实际如果你尝试一下<code>translate(100,100); rotate(90); translate(-100,-100)</code>，它会是你要的效果</li>
</ol></li>
<li>这时我想到一个新的思路：在相对坐标系中使用小千叠加

<ol>
<li>不管是前变换 \(T\) 是什么，我要对它进行小鱼叠加，都可以想象成我身处相对坐标系中，我看到一个完全正常而普通的相对坐标系，没有被施加任何变换，然后想象在相对坐标系中还有一个画尺，这个画尺坐标系现在正跟相对坐标系重合</li>
<li>现在我要做的事情是，施加变换，让这个画尺绕 \((100,100)\) 顺时针旋转90度</li>
<li>此时，我虽然处于相对坐标系，但不管是小千叠加还是小鱼叠加，只要能实现效果，都是可以使用的，而我们发现这个效果通过小鱼叠加多次基本变换做起来有点困难，所以我们选择使用小千叠加来实现</li>
<li>我们发现此时要实现的效果跟上面「小千叠加一个带偏移中心的旋转操作」例子中要实现的效果是一模一样的，而它的操作步骤我们已经得到了：<code>translate(-100,-100); rotate(90); translate(100,100)</code></li>
<li>于是在相对坐标系中，我们施加的变换可以表示为：\(P = M(100,100)·R(90)·M(-100,-100)·P_0\)</li>
<li>而整个组合变换是小鱼叠加在之前的变换上的，于是总的变换过程用矩阵表示是这样：\(P = T · (M(100,100)·R(90)·M(-100,-100)) · P_0\)，这就得到了需要的变换矩阵了

<ol>
<li>这个式子有点意思，外层是小千叠加，内层是小鱼叠加</li>
</ol></li>
</ol></li>
<li>另外，注意到如果用矩阵结合律把括号调整一下，就能得到：\(P = (((T · M(100,100)) · R(90) ) · M(-100,-100)) · P_0\) ，这就像是小鱼叠加了三个基本操作：<code>translate(100,100); rotate(90); translate(-100,-100)</code>，也跟前面有点怀疑不对的操作是一致的</li>
</ol>

<p>最后顺便说一下，带偏移中心的变换为什么也能使用神奇操作</p>

<ol>
<li>你可能会担心，带偏移中心的变换是多个变换组合而成的，神奇操作需要把变换的叠加顺序颠倒，那组合而成的「带偏移中心的变换」在颠倒的时候，其内部的基本变换是否也需要颠倒呢？如果需要的话，直接使用神奇操作会不会有问题？又要怎么颠倒内部的基本变换呢？</li>
<li>但其实前面我在讲神奇操作的前提时，并没有对变换本身有要求，而且你可能自己已经直接用了很多次，也没有出现问题，确实，带偏移中心的变换也能使用神奇操作</li>
<li>原因很简单，但怎么让其符合直觉还需要多解释一下

<ol>
<li>变换的本质属性中并没有「是否是组合而成的」这个属性，即使是基本变换，也可以由多个变换组合而成，只要组合完毕，它就可以当成是一个基本变换来看待。或者说，大家都是一个变换矩阵</li>
<li>变换的效果是固定的，&quot;组合变换&quot;的效果始终是不变的，由它本身组合了哪些变换、怎么组合叠加决定，而不因它被用来怎么叠加而改变</li>
<li>所以如果你选择了一个&quot;组合变换&quot;参与叠加，那么它跟一个基本变换没有区别，颠倒叠加顺序时，不用关心其内部的基本变换</li>
</ol></li>
</ol>

<h2 id="toc_23">二维Canvas变换实践</h2>

<p>@@@ 加 save restore</p>

<h2 id="toc_24">6、Camera与准三维变换模型</h2>

<p>理解了前面的二维变换之后，三维变换其实非常简单</p>

<h3 id="toc_25">理解</h3>

<p>首先从三维变换的本质出发</p>

<ol>
<li>如前文所述，图形变换的本质还是一个函数 \( f(\{P\}) \)，只是在三维空间中，它可以拆分成三个函数 \( ( f(\{x\}), f(\{y\}), f(\{z\}) ) \)</li>
<li>对于三维线性变换，可以用矩阵表示为： \( \begin{bmatrix} x \\ y \\ z \end{bmatrix} = \begin{bmatrix} m_{11} &amp; m_{12} &amp; m_{13} \\ m_{21} &amp; m_{22} &amp; m_{23} \\ m_{31} &amp; m_{32} &amp; m_{33} \end{bmatrix} · \begin{bmatrix} x_0 \\ y_0 \\ z_0 \end{bmatrix}\)，或 \( P = M · P_0 \)</li>
<li>所以三维变换跟二维变换没有什么本质区别，只是多了一个维度</li>
</ol>

<p>但这里要讨论的三维变换与以上内容不同，因为我们是在二维坐标系中进行三维变换</p>

<ol>
<li>直接从文字上看好像很难理解，二维坐标系里怎么进行三维变换呢？但其实我们在日常生活已经见得多了：所有的影视画面都是三维物体投影在二维屏幕上的结果，它们做着各种复杂的三维变换，但我们仍然可以通过二维载体进行观察；甚至你看到的整个三维的世界，也只是三维世界在你二维的视网膜上的投影</li>
<li>所以，在二维坐标系中进行三维变换过程的直观理解就是：变换前有一个初始的二维物体，把它放在三维空间中进行三维变换操作，得到一个三维的物体，让它在某个二维平面上做一个投影，这个二维的投影就是变换后的结果（@@@可以有图）</li>
</ol>

<p>更具体一点，在Android（@@@？ios，html）中，如何基于已有的二维齐次变换矩阵实现三维变换的效果</p>

<ol>
<li>前面已经讲过，在实际操作中，二维仿射变换使用了三维线性变换表示，它也叫二维齐次变换矩阵（@@@是吗？），变换过程可以表示为：\( \begin{bmatrix} \overrightarrow{P} \\ 1 \end{bmatrix} = \begin{bmatrix} M &amp; \overrightarrow{T} \\ 0 &amp; 1 \end{bmatrix} · \begin{bmatrix} \overrightarrow{P_0} \\ 1 \end{bmatrix} \) </li>
<li>所有的仿射变换都可以用中间的变换矩阵表示，这个矩阵的第三行为 \(\begin{bmatrix} 0 &amp; 0 &amp; 1 \end{bmatrix}\)，变换前的齐次参数（第三个维度的值）一定为1，变换后齐次参数也一定会得到1，变换前后点的位置都只需要直接取\(x\)和\(y\)的值即可</li>
<li>但是当变换不是仿射变换时，特别是当变换矩阵的第三行不是\(\begin{bmatrix} 0 &amp; 0 &amp; 1 \end{bmatrix}\)时，变换前的齐次参数当然还是1，但变换后的齐次参数就不是1了，如 \( \begin{bmatrix} x \\ y \\ k \end{bmatrix} = \begin{bmatrix} m_{11} &amp; m_{12} &amp; m_{13} \\ m_{21} &amp; m_{22} &amp; m_{23} \\ m_{31} &amp; m_{32} &amp; m_{33} \end{bmatrix} · \begin{bmatrix} x_0 \\ y_0 \\ 1 \end{bmatrix}\)。此时可以通过一个齐次操作（@@@是叫这个名字吗）把变换后的齐次参数变为1，此时x和y就会进行缩放</li>
<li>这里的「用一个第三行不是\(\begin{bmatrix} 0 &amp; 0 &amp; 1 \end{bmatrix}\)的变换矩阵进行变换」，得到一个齐次参数不为1的变换结果，然后「通过齐次操作把变换后的齐次参数变为1」，就对应着前面在二维坐标系中进行三维变换的过程中的「把二维物体放在三维空间中进行三维变换操作」和「把得到的三维物体在二维上做一个投影」，就是这样基于已有的二维齐次变换矩阵实现三维变换的效果的</li>
<li>举个具体的例子，跟前面一样，想象对一个三维正立方体施加线性变换， \( \begin{bmatrix} x_0 \\ y_0 \\ 1 \end{bmatrix} \) 可以认为是变换前三维立方体与 \(z=1\) 平面上的相交面，经过线性变换后，比如绕 \(X\) 轴旋转30度，这个面被变换成 \( \begin{bmatrix} x \\ y \\ k \end{bmatrix} \) ，把它的k变成1，其实就是把变换后的面在 \(z=1\) 平面上做一个投影，但注意，这个投影并不是正交投影，而是以原点为透视中心进行透视投影（具体可以看后文，@@@这里要不要拓展。。。），这就实现了基于已有的二维齐次变换矩阵实现三维变换的效果（@@@跟上面重复了）（@@@可以有creo图）</li>
</ol>

<p>所以现在的问题变成了，我怎么获取一个我想要的变换矩阵，能实现我希望的三维变换效果</p>

<ol>
<li>这时候终于轮到<code>Camera</code>出场了，<code>Camera</code>的作用跟前面我们讲二维变换时的<code>matrix</code>是一样的，它们都是获取变换矩阵的工具

<ol>
<li><code>matrix</code>可以通过<code>translate</code>等方法得到你想要的二维变换矩阵，但这些二维变换矩阵基本能被<code>Canvas</code>本身的变换操作API替代</li>
<li>而<code>Camera</code>提供的三维变换就不能直接用<code>Canvas</code>操作实现了</li>
</ol></li>
<li><code>Camera</code>通过有解释力的API，让你更容易地获取自己想要的三维变换效果的变换矩阵

<ol>
<li>比如我想获得一个让<code>Canvas</code>变换成沿着 \(X\) 轴旋转30度然后投影在绝对坐标系平面上的样子，就可以通过 \(camera.rotateX(30) \\ camera.getMatrix(matrix)\) 获得这个变换矩阵</li>
</ol></li>
<li>然后这个变换矩阵就跟前面所有的基本变换矩阵一样，可以通过小鱼或小千叠加作用在你的<code>Canvas</code>上，得到你想要的效果</li>
</ol>

<p>下面就让我们来认识一下，<code>Camera</code>通过什么有解释力的API，让使用者可以容易地获取自己想要的三维变换效果的变换矩阵</p>

<ol>
<li>前面我们说过，在二维坐标系中进行三维变换的过程可以分为两步：

<ol>
<li>三维变换：把二维物体放在三维空间中进行三维变换操作</li>
<li>透视投影：把得到的三维物体在二维平面上做一个透视投影

<ol>
<li>在图形学中，投影是一种将三维坐标变换为二维坐标的方法，常用到的有正交投影和透视投影：正交投影多用于三维健模，透视投影则由于和人的视觉系统相似，多用于在二维平面中对三维世界的呈现</li>
<li>基本的透视投影模型由视点 \(E\) （投影中心）和视平面 \(P\) 两部分构成：视点可以认为是观察者的位置，视平面就是渲染三维对象透视图的二维平面

<ol>
<li>对于世界中的任一点\(X\)，构造一条起点为\(E\)并经过\(X\)点的射线\(R\)，\(R\)与平面\(P\)的交点\(X_p\)即是\(X\)点的透视投影结果，如下图
<img src="media/15444051477462/15449501491636.jpg" alt=""/></li>
<li>三维世界的物体可以看作是由点的集合 \(\{X_i\}\) 构成的，这样依次构造起点为\(E\)，并经过点\(X_i\)的射线\(R_i\)，这些射线与视平面P的交点集合便是三维世界在当前视点的透视图，如下图
<img src="media/15444051477462/15449501607899.jpg" alt="" style="width:400px;"/></li>
<li>但注意，视点、视平面、被投影物体之间并没有强制的位置关系，被投影物体也可以出现在视点和视平面之间（@@@可以有图）</li>
</ol></li>
</ol></li>
</ol></li>
<li>而<code>Camera</code>变换相关的API也是基于这个变换过程设计的，分为了两类，符合使用者的直觉

<ol>
<li>三维变换

<ol>
<li>基本三维变换跟基本二维变换很像，但只有平移和旋转操作

<ol>
<li>平移：<code>translate(float offsetX, float offsetY, float offsetZ)</code>

<ol>
<li>与二维平移一样，只是多了一个z轴的平移量</li>
</ol></li>
<li>旋转：<code>rotate(float degreeX, float degreeY, float degreeZ)</code>

<ol>
<li>这个方法跟二维变换区别就比较大，二维旋转是绕某点进行旋转，但三维旋转则是绕某个轴进行旋转，而且不能是任意旋转轴，只能是三条坐标轴</li>
<li>另外还有三个独立的方法可以分别对控制绕某条坐标轴旋转，比较常用，但跟这个方法其实是一样的，不多讲述了</li>
</ol></li>
</ol></li>
<li>为什么基本变换没有缩放操作？猜想是因为只需要控制与投影点的距离，就能实现缩放了，于是没有额外提供缩放API</li>
</ol></li>
<li>透视投影

<ol>
<li>前面说了，透视投影的关键是视点和视平面，而在Android中，视平面就是基板，它是固定不变的，于是控制透视投影的关键就只有视点了</li>
<li><code>Camera</code>提供的控制视点的方法只有改变视点的位置：<code>setLocation(float x, float y, float z)</code>

<ol>
<li>这个方法的效果结合透视投影模型很好理解，比较常用的是改变视点的z轴位置</li>
<li>但是这个方法有几个需要注意的点

<ol>
<li>在Android中，改变视点位置<code>x,y,z</code>的单位不是像素 （感谢扔物线）

<ol>
<li>它的单位是<code>inch</code>（英寸），这种设计源自 Android 底层的图像引擎 Skia，Skia 中 Camera 的位置单位就是英寸，同时最关键的是，英寸和像素的换算单位在 Skia 中被写死为了 72 像素，它不是和设备 dpi 相关的</li>
<li>所以如果你希望在不同分辨率的手机上看到的移动视点效果是一致的，你需要先用dp为单位算好你希望调整的视点的位置，然后调用系统API根据屏幕分辨率计算得到视点位置的px值，最后把px值除与72得到你要设置的英寸值</li>
</ol></li>
<li>但还有一个非常bug的问题，那就是视点的初始位置是<code>(0, 0, -8)</code>（英寸），它也是用英寸表示的

<ol>
<li>于是，即使你没有想改变视点的位置，所有你使用Camera得到的三维变换矩阵，这个变换矩阵的效果在不同分辨率手机上也都是不一样的</li>
<li>这简直是一个硬核bug，但解决起来并不困难，你只要在所有需要使用camera获取三维变换矩阵之前，都对视点的位置进行重新设置，设置为一个你认为合适的dp值</li>
</ol></li>
</ol></li>
</ol></li>
</ol></li>
</ol></li>
</ol>

<p>哦对，这些操作也都是小鱼叠加的<br/>
然后三维变换和投影是复合在一起的，有的时候效果会出乎你的预料</p>

<ol>
<li>什么叫复合？（@@@）</li>
</ol>

<p>最后有一个需要注意的点，那就是<code>Camera</code>所使用的坐标系是什么样子</p>

<ol>
<li>正常我们可能都会认为，2维变3维就是在之前的<code>Canvas</code>坐标系上增加加一个z轴，我们只需要关心z轴的正方向是朝里还是朝外的就好了，但实际上并非如此，除了新增的z轴，<code>Camera</code>的三维坐标系还把 \(Y\) 轴的正方向给颠倒了</li>
<li>下面对两个坐标系做一个简单的对比

<ol>
<li><code>Canvas</code>坐标系：原点位于左上角、 \(X\) 轴正方向指向屏幕右侧、 \(Y\) 轴正方向指向屏幕下侧、无z轴</li>
<li><code>Camera</code>坐标系：原点位于左上角、 \(Y\) 轴正方向指向屏幕右侧、 \(Y\) 轴正方向指向屏幕上侧、z轴正方形垂直屏幕向内</li>
<li>如图：（@@@）</li>
</ol></li>
<li>所以需要特别注意的就是 \(Y\) 轴正方向是相反的，不过只要在用到的时候注意一下就行，比较好理解，而且实际情况中需要进行关心 \(Y\) 轴正方向的三维变换不太常见</li>
</ol>

<h3 id="toc_26">实践</h3>

<!--

## 在iOS和HTML5中的Canvas变换

HTML5中`Canvas`的二维变换与Android中是完全一致的，camera不知道
ios不知道


看一下`Canvas`和matrix的其他操作，看下会不会跟我讲的一些模型冲突。还好，不太有，就是matrix可能还有一个自定义点的操作，其实不是很重要，简单提一下就行了
补全上面所有@@@的部分
开始加例子和实践

-->

<hr/>

<!--
一点调试camera的数据

1
camera camera camera
  || canvas ：[1.0, 0.0, 0.0]
              [0.0, 1.0, 0.0]
              [0.0, 0.0, 1.0]
              
  || canvas ：[1.0, 0.0, 150.0]
            [0.0, 1.0, 150.0]
            [0.0, 0.0, 1.0] 

***|| camera ：[1.0, 0.0, 0.0]
        [0.0, 0.70710677, 0.0]
        [0.0, -0.0012276159, 1.0]***
  || canvas ：[1.0, 0.0, 150.0]
            [0.0, 0.70710677, 150.0]
            [0.0, -0.0012276159, 1.0] 相对
            
  || canvas ：[0.84449303, 0.0, 0.0]
            [0.0, 0.5971467, 37.10194]
            [0.0, -0.001036713, 1.0]

2
canvas camera canvas
  || canvas ：[1.0, 0.0, 0.0][0.0, 1.0, 0.0][0.0, 0.0, 1.0]
  
  || canvas ：[1.0, 0.0, 150.0]
            [0.0, 1.0, 150.0]
            [0.0, 0.0, 1.0]

***|| camera ：[1.0, 0.0, 0.0]
        [0.0, 0.70710677, 0.0]
        [0.0, -0.0012276159, 1.0]***
  || canvas ：[1.0, -0.18414238, 150.0]
            [0.0, 0.52296436, 150.0]
            [0.0, -0.0012276159, 1.0] 绝对
            
  || canvas ：[1.0, -0.18414238, 27.621353]
            [0.0, 0.52296436, 71.55534]
            [0.0, -0.0012276159, 1.1841424]


3
 0 || camera ：[1.0, 0.0, 0.0][0.0, 1.0, 0.0][0.0, 0.0, 1.0]
 1 || camera ：[1.0, 0.0, 150.0][0.0, 1.0, 150.0][0.0, 0.0, 1.0]
 2 || camera ：[1.0, 0.0, 0.0][0.0, 0.70710677, 0.0][0.0, -0.0012276159, 1.0]
 3 || camera ：[1.0, 0.0, -150.0][0.0, 1.0, -150.0][0.0, 0.0, 1.0]
  || canvas ：[1.0, -0.18414238, 27.621353][0.0, 0.52296436, 71.55534][0.0, -0.0012276159, 1.1841424]

-->

<div class="footnotes">
<hr/>
<ol>

<li id="fn1">
<p>很多地方都能找到，比如参考 Donald Hearn 的《计算机图形学》第四版 7.1.2节&nbsp;<a href="#fnref1" rev="footnote">&#8617;</a></p>
</li>

<li id="fn2">
<p>很多地方都能找到，比如参考 Donald Hearn 的《计算机图形学》第四版 7.5.1节&nbsp;<a href="#fnref2" rev="footnote">&#8617;</a></p>
</li>

</ol>
</div>

]]></content>
  </entry>
  
</feed>
